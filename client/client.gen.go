// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

const (
	JwtScopes         = "jwt.Scopes"
	Jwt_refreshScopes = "jwt_refresh.Scopes"
)

// Defines values for AnnotationLayerAnnotationType.
const (
	EVENT      AnnotationLayerAnnotationType = "EVENT"
	FORMULA    AnnotationLayerAnnotationType = "FORMULA"
	INTERVAL   AnnotationLayerAnnotationType = "INTERVAL"
	TIMESERIES AnnotationLayerAnnotationType = "TIME_SERIES"
)

// Defines values for AnnotationLayerOpacity.
const (
	OpacityHigh   AnnotationLayerOpacity = "opacityHigh"
	OpacityLow    AnnotationLayerOpacity = "opacityLow"
	OpacityMedium AnnotationLayerOpacity = "opacityMedium"
)

// Defines values for AnnotationLayerSourceType.
const (
	AnnotationLayerSourceTypeLine   AnnotationLayerSourceType = "line"
	AnnotationLayerSourceTypeNATIVE AnnotationLayerSourceType = "NATIVE"
	AnnotationLayerSourceTypeTable  AnnotationLayerSourceType = "table"
)

// Defines values for AnnotationLayerStyle.
const (
	Dashed     AnnotationLayerStyle = "dashed"
	Dotted     AnnotationLayerStyle = "dotted"
	LongDashed AnnotationLayerStyle = "longDashed"
	Solid      AnnotationLayerStyle = "solid"
)

// Defines values for ChartDataDatasourceType.
const (
	ChartDataDatasourceTypeDataset    ChartDataDatasourceType = "dataset"
	ChartDataDatasourceTypeQuery      ChartDataDatasourceType = "query"
	ChartDataDatasourceTypeSavedQuery ChartDataDatasourceType = "saved_query"
	ChartDataDatasourceTypeSlTable    ChartDataDatasourceType = "sl_table"
	ChartDataDatasourceTypeTable      ChartDataDatasourceType = "table"
	ChartDataDatasourceTypeView       ChartDataDatasourceType = "view"
)

// Defines values for ChartDataExtrasRelativeEnd.
const (
	ChartDataExtrasRelativeEndNow   ChartDataExtrasRelativeEnd = "now"
	ChartDataExtrasRelativeEndToday ChartDataExtrasRelativeEnd = "today"
)

// Defines values for ChartDataExtrasRelativeStart.
const (
	ChartDataExtrasRelativeStartNow   ChartDataExtrasRelativeStart = "now"
	ChartDataExtrasRelativeStartToday ChartDataExtrasRelativeStart = "today"
)

// Defines values for ChartDataExtrasTimeGrainSqla.
const (
	ChartDataExtrasTimeGrainSqlaN19691228T000000ZP1W ChartDataExtrasTimeGrainSqla = "1969-12-28T00:00:00Z/P1W"
	ChartDataExtrasTimeGrainSqlaN19691229T000000ZP1W ChartDataExtrasTimeGrainSqla = "1969-12-29T00:00:00Z/P1W"
	ChartDataExtrasTimeGrainSqlaP1D                  ChartDataExtrasTimeGrainSqla = "P1D"
	ChartDataExtrasTimeGrainSqlaP1M                  ChartDataExtrasTimeGrainSqla = "P1M"
	ChartDataExtrasTimeGrainSqlaP1W                  ChartDataExtrasTimeGrainSqla = "P1W"
	ChartDataExtrasTimeGrainSqlaP1W19700103T000000Z  ChartDataExtrasTimeGrainSqla = "P1W/1970-01-03T00:00:00Z"
	ChartDataExtrasTimeGrainSqlaP1W19700104T000000Z  ChartDataExtrasTimeGrainSqla = "P1W/1970-01-04T00:00:00Z"
	ChartDataExtrasTimeGrainSqlaP1Y                  ChartDataExtrasTimeGrainSqla = "P1Y"
	ChartDataExtrasTimeGrainSqlaP3M                  ChartDataExtrasTimeGrainSqla = "P3M"
	ChartDataExtrasTimeGrainSqlaPT10M                ChartDataExtrasTimeGrainSqla = "PT10M"
	ChartDataExtrasTimeGrainSqlaPT15M                ChartDataExtrasTimeGrainSqla = "PT15M"
	ChartDataExtrasTimeGrainSqlaPT1H                 ChartDataExtrasTimeGrainSqla = "PT1H"
	ChartDataExtrasTimeGrainSqlaPT1M                 ChartDataExtrasTimeGrainSqla = "PT1M"
	ChartDataExtrasTimeGrainSqlaPT1S                 ChartDataExtrasTimeGrainSqla = "PT1S"
	ChartDataExtrasTimeGrainSqlaPT30M                ChartDataExtrasTimeGrainSqla = "PT30M"
	ChartDataExtrasTimeGrainSqlaPT30S                ChartDataExtrasTimeGrainSqla = "PT30S"
	ChartDataExtrasTimeGrainSqlaPT5M                 ChartDataExtrasTimeGrainSqla = "PT5M"
	ChartDataExtrasTimeGrainSqlaPT5S                 ChartDataExtrasTimeGrainSqla = "PT5S"
	ChartDataExtrasTimeGrainSqlaPT6H                 ChartDataExtrasTimeGrainSqla = "PT6H"
)

// Defines values for ChartDataPostProcessingOperationOperation.
const (
	ChartDataPostProcessingOperationOperationAggregate         ChartDataPostProcessingOperationOperation = "aggregate"
	ChartDataPostProcessingOperationOperationBoxplot           ChartDataPostProcessingOperationOperation = "boxplot"
	ChartDataPostProcessingOperationOperationCompare           ChartDataPostProcessingOperationOperation = "compare"
	ChartDataPostProcessingOperationOperationContribution      ChartDataPostProcessingOperationOperation = "contribution"
	ChartDataPostProcessingOperationOperationCum               ChartDataPostProcessingOperationOperation = "cum"
	ChartDataPostProcessingOperationOperationDiff              ChartDataPostProcessingOperationOperation = "diff"
	ChartDataPostProcessingOperationOperationEscapeSeparator   ChartDataPostProcessingOperationOperation = "escape_separator"
	ChartDataPostProcessingOperationOperationFlatten           ChartDataPostProcessingOperationOperation = "flatten"
	ChartDataPostProcessingOperationOperationGeodeticParse     ChartDataPostProcessingOperationOperation = "geodetic_parse"
	ChartDataPostProcessingOperationOperationGeohashDecode     ChartDataPostProcessingOperationOperation = "geohash_decode"
	ChartDataPostProcessingOperationOperationGeohashEncode     ChartDataPostProcessingOperationOperation = "geohash_encode"
	ChartDataPostProcessingOperationOperationPivot             ChartDataPostProcessingOperationOperation = "pivot"
	ChartDataPostProcessingOperationOperationProphet           ChartDataPostProcessingOperationOperation = "prophet"
	ChartDataPostProcessingOperationOperationRename            ChartDataPostProcessingOperationOperation = "rename"
	ChartDataPostProcessingOperationOperationResample          ChartDataPostProcessingOperationOperation = "resample"
	ChartDataPostProcessingOperationOperationRolling           ChartDataPostProcessingOperationOperation = "rolling"
	ChartDataPostProcessingOperationOperationSelect            ChartDataPostProcessingOperationOperation = "select"
	ChartDataPostProcessingOperationOperationSort              ChartDataPostProcessingOperationOperation = "sort"
	ChartDataPostProcessingOperationOperationUnescapeSeparator ChartDataPostProcessingOperationOperation = "unescape_separator"
)

// Defines values for ChartDataQueryObjectDatasourceType.
const (
	ChartDataQueryObjectDatasourceTypeDataset    ChartDataQueryObjectDatasourceType = "dataset"
	ChartDataQueryObjectDatasourceTypeQuery      ChartDataQueryObjectDatasourceType = "query"
	ChartDataQueryObjectDatasourceTypeSavedQuery ChartDataQueryObjectDatasourceType = "saved_query"
	ChartDataQueryObjectDatasourceTypeSlTable    ChartDataQueryObjectDatasourceType = "sl_table"
	ChartDataQueryObjectDatasourceTypeTable      ChartDataQueryObjectDatasourceType = "table"
	ChartDataQueryObjectDatasourceTypeView       ChartDataQueryObjectDatasourceType = "view"
)

// Defines values for ChartDataQueryObjectExtrasRelativeEnd.
const (
	ChartDataQueryObjectExtrasRelativeEndNow   ChartDataQueryObjectExtrasRelativeEnd = "now"
	ChartDataQueryObjectExtrasRelativeEndToday ChartDataQueryObjectExtrasRelativeEnd = "today"
)

// Defines values for ChartDataQueryObjectExtrasRelativeStart.
const (
	ChartDataQueryObjectExtrasRelativeStartNow   ChartDataQueryObjectExtrasRelativeStart = "now"
	ChartDataQueryObjectExtrasRelativeStartToday ChartDataQueryObjectExtrasRelativeStart = "today"
)

// Defines values for ChartDataQueryObjectExtrasTimeGrainSqla.
const (
	ChartDataQueryObjectExtrasTimeGrainSqlaN19691228T000000ZP1W ChartDataQueryObjectExtrasTimeGrainSqla = "1969-12-28T00:00:00Z/P1W"
	ChartDataQueryObjectExtrasTimeGrainSqlaN19691229T000000ZP1W ChartDataQueryObjectExtrasTimeGrainSqla = "1969-12-29T00:00:00Z/P1W"
	ChartDataQueryObjectExtrasTimeGrainSqlaP1D                  ChartDataQueryObjectExtrasTimeGrainSqla = "P1D"
	ChartDataQueryObjectExtrasTimeGrainSqlaP1M                  ChartDataQueryObjectExtrasTimeGrainSqla = "P1M"
	ChartDataQueryObjectExtrasTimeGrainSqlaP1W                  ChartDataQueryObjectExtrasTimeGrainSqla = "P1W"
	ChartDataQueryObjectExtrasTimeGrainSqlaP1W19700103T000000Z  ChartDataQueryObjectExtrasTimeGrainSqla = "P1W/1970-01-03T00:00:00Z"
	ChartDataQueryObjectExtrasTimeGrainSqlaP1W19700104T000000Z  ChartDataQueryObjectExtrasTimeGrainSqla = "P1W/1970-01-04T00:00:00Z"
	ChartDataQueryObjectExtrasTimeGrainSqlaP1Y                  ChartDataQueryObjectExtrasTimeGrainSqla = "P1Y"
	ChartDataQueryObjectExtrasTimeGrainSqlaP3M                  ChartDataQueryObjectExtrasTimeGrainSqla = "P3M"
	ChartDataQueryObjectExtrasTimeGrainSqlaPT10M                ChartDataQueryObjectExtrasTimeGrainSqla = "PT10M"
	ChartDataQueryObjectExtrasTimeGrainSqlaPT15M                ChartDataQueryObjectExtrasTimeGrainSqla = "PT15M"
	ChartDataQueryObjectExtrasTimeGrainSqlaPT1H                 ChartDataQueryObjectExtrasTimeGrainSqla = "PT1H"
	ChartDataQueryObjectExtrasTimeGrainSqlaPT1M                 ChartDataQueryObjectExtrasTimeGrainSqla = "PT1M"
	ChartDataQueryObjectExtrasTimeGrainSqlaPT1S                 ChartDataQueryObjectExtrasTimeGrainSqla = "PT1S"
	ChartDataQueryObjectExtrasTimeGrainSqlaPT30M                ChartDataQueryObjectExtrasTimeGrainSqla = "PT30M"
	ChartDataQueryObjectExtrasTimeGrainSqlaPT30S                ChartDataQueryObjectExtrasTimeGrainSqla = "PT30S"
	ChartDataQueryObjectExtrasTimeGrainSqlaPT5M                 ChartDataQueryObjectExtrasTimeGrainSqla = "PT5M"
	ChartDataQueryObjectExtrasTimeGrainSqlaPT5S                 ChartDataQueryObjectExtrasTimeGrainSqla = "PT5S"
	ChartDataQueryObjectExtrasTimeGrainSqlaPT6H                 ChartDataQueryObjectExtrasTimeGrainSqla = "PT6H"
)

// Defines values for ChartDataQueryObjectPostProcessingOperation.
const (
	ChartDataQueryObjectPostProcessingOperationAggregate         ChartDataQueryObjectPostProcessingOperation = "aggregate"
	ChartDataQueryObjectPostProcessingOperationBoxplot           ChartDataQueryObjectPostProcessingOperation = "boxplot"
	ChartDataQueryObjectPostProcessingOperationCompare           ChartDataQueryObjectPostProcessingOperation = "compare"
	ChartDataQueryObjectPostProcessingOperationContribution      ChartDataQueryObjectPostProcessingOperation = "contribution"
	ChartDataQueryObjectPostProcessingOperationCum               ChartDataQueryObjectPostProcessingOperation = "cum"
	ChartDataQueryObjectPostProcessingOperationDiff              ChartDataQueryObjectPostProcessingOperation = "diff"
	ChartDataQueryObjectPostProcessingOperationEscapeSeparator   ChartDataQueryObjectPostProcessingOperation = "escape_separator"
	ChartDataQueryObjectPostProcessingOperationFlatten           ChartDataQueryObjectPostProcessingOperation = "flatten"
	ChartDataQueryObjectPostProcessingOperationGeodeticParse     ChartDataQueryObjectPostProcessingOperation = "geodetic_parse"
	ChartDataQueryObjectPostProcessingOperationGeohashDecode     ChartDataQueryObjectPostProcessingOperation = "geohash_decode"
	ChartDataQueryObjectPostProcessingOperationGeohashEncode     ChartDataQueryObjectPostProcessingOperation = "geohash_encode"
	ChartDataQueryObjectPostProcessingOperationPivot             ChartDataQueryObjectPostProcessingOperation = "pivot"
	ChartDataQueryObjectPostProcessingOperationProphet           ChartDataQueryObjectPostProcessingOperation = "prophet"
	ChartDataQueryObjectPostProcessingOperationRename            ChartDataQueryObjectPostProcessingOperation = "rename"
	ChartDataQueryObjectPostProcessingOperationResample          ChartDataQueryObjectPostProcessingOperation = "resample"
	ChartDataQueryObjectPostProcessingOperationRolling           ChartDataQueryObjectPostProcessingOperation = "rolling"
	ChartDataQueryObjectPostProcessingOperationSelect            ChartDataQueryObjectPostProcessingOperation = "select"
	ChartDataQueryObjectPostProcessingOperationSort              ChartDataQueryObjectPostProcessingOperation = "sort"
	ChartDataQueryObjectPostProcessingOperationUnescapeSeparator ChartDataQueryObjectPostProcessingOperation = "unescape_separator"
)

// Defines values for ChartDataResponseResultStatus.
const (
	Failed    ChartDataResponseResultStatus = "failed"
	Pending   ChartDataResponseResultStatus = "pending"
	Running   ChartDataResponseResultStatus = "running"
	Scheduled ChartDataResponseResultStatus = "scheduled"
	Stopped   ChartDataResponseResultStatus = "stopped"
	Success   ChartDataResponseResultStatus = "success"
	TimedOut  ChartDataResponseResultStatus = "timed_out"
)

// Defines values for ChartRestApiPostDatasourceType.
const (
	ChartRestApiPostDatasourceTypeDataset    ChartRestApiPostDatasourceType = "dataset"
	ChartRestApiPostDatasourceTypeQuery      ChartRestApiPostDatasourceType = "query"
	ChartRestApiPostDatasourceTypeSavedQuery ChartRestApiPostDatasourceType = "saved_query"
	ChartRestApiPostDatasourceTypeSlTable    ChartRestApiPostDatasourceType = "sl_table"
	ChartRestApiPostDatasourceTypeTable      ChartRestApiPostDatasourceType = "table"
	ChartRestApiPostDatasourceTypeView       ChartRestApiPostDatasourceType = "view"
)

// Defines values for ChartRestApiPutDatasourceType.
const (
	ChartRestApiPutDatasourceTypeDataset    ChartRestApiPutDatasourceType = "dataset"
	ChartRestApiPutDatasourceTypeQuery      ChartRestApiPutDatasourceType = "query"
	ChartRestApiPutDatasourceTypeSavedQuery ChartRestApiPutDatasourceType = "saved_query"
	ChartRestApiPutDatasourceTypeSlTable    ChartRestApiPutDatasourceType = "sl_table"
	ChartRestApiPutDatasourceTypeTable      ChartRestApiPutDatasourceType = "table"
	ChartRestApiPutDatasourceTypeView       ChartRestApiPutDatasourceType = "view"
)

// Defines values for DatasourceDatasourceType.
const (
	DatasourceDatasourceTypeDataset    DatasourceDatasourceType = "dataset"
	DatasourceDatasourceTypeQuery      DatasourceDatasourceType = "query"
	DatasourceDatasourceTypeSavedQuery DatasourceDatasourceType = "saved_query"
	DatasourceDatasourceTypeSlTable    DatasourceDatasourceType = "sl_table"
	DatasourceDatasourceTypeTable      DatasourceDatasourceType = "table"
	DatasourceDatasourceTypeView       DatasourceDatasourceType = "view"
)

// Defines values for FilterSetRestApiPostOwnerType.
const (
	FilterSetRestApiPostOwnerTypeDashboard FilterSetRestApiPostOwnerType = "Dashboard"
	FilterSetRestApiPostOwnerTypeUser      FilterSetRestApiPostOwnerType = "User"
)

// Defines values for FilterSetRestApiPutOwnerType.
const (
	FilterSetRestApiPutOwnerTypeDashboard FilterSetRestApiPutOwnerType = "Dashboard"
)

// Defines values for FormDataPostSchemaDatasourceType.
const (
	FormDataPostSchemaDatasourceTypeDataset    FormDataPostSchemaDatasourceType = "dataset"
	FormDataPostSchemaDatasourceTypeQuery      FormDataPostSchemaDatasourceType = "query"
	FormDataPostSchemaDatasourceTypeSavedQuery FormDataPostSchemaDatasourceType = "saved_query"
	FormDataPostSchemaDatasourceTypeSlTable    FormDataPostSchemaDatasourceType = "sl_table"
	FormDataPostSchemaDatasourceTypeTable      FormDataPostSchemaDatasourceType = "table"
	FormDataPostSchemaDatasourceTypeView       FormDataPostSchemaDatasourceType = "view"
)

// Defines values for FormDataPutSchemaDatasourceType.
const (
	FormDataPutSchemaDatasourceTypeDataset    FormDataPutSchemaDatasourceType = "dataset"
	FormDataPutSchemaDatasourceTypeQuery      FormDataPutSchemaDatasourceType = "query"
	FormDataPutSchemaDatasourceTypeSavedQuery FormDataPutSchemaDatasourceType = "saved_query"
	FormDataPutSchemaDatasourceTypeSlTable    FormDataPutSchemaDatasourceType = "sl_table"
	FormDataPutSchemaDatasourceTypeTable      FormDataPutSchemaDatasourceType = "table"
	FormDataPutSchemaDatasourceTypeView       FormDataPutSchemaDatasourceType = "view"
)

// Defines values for ReportRecipientType.
const (
	Email ReportRecipientType = "Email"
	Slack ReportRecipientType = "Slack"
)

// Defines values for ReportScheduleRestApiPostReportFormat.
const (
	ReportScheduleRestApiPostReportFormatCSV  ReportScheduleRestApiPostReportFormat = "CSV"
	ReportScheduleRestApiPostReportFormatPNG  ReportScheduleRestApiPostReportFormat = "PNG"
	ReportScheduleRestApiPostReportFormatTEXT ReportScheduleRestApiPostReportFormat = "TEXT"
)

// Defines values for ReportScheduleRestApiPostTimezone.
const (
	ReportScheduleRestApiPostTimezoneAfricaAbidjan                  ReportScheduleRestApiPostTimezone = "Africa/Abidjan"
	ReportScheduleRestApiPostTimezoneAfricaAccra                    ReportScheduleRestApiPostTimezone = "Africa/Accra"
	ReportScheduleRestApiPostTimezoneAfricaAddisAbaba               ReportScheduleRestApiPostTimezone = "Africa/Addis_Ababa"
	ReportScheduleRestApiPostTimezoneAfricaAlgiers                  ReportScheduleRestApiPostTimezone = "Africa/Algiers"
	ReportScheduleRestApiPostTimezoneAfricaAsmara                   ReportScheduleRestApiPostTimezone = "Africa/Asmara"
	ReportScheduleRestApiPostTimezoneAfricaAsmera                   ReportScheduleRestApiPostTimezone = "Africa/Asmera"
	ReportScheduleRestApiPostTimezoneAfricaBamako                   ReportScheduleRestApiPostTimezone = "Africa/Bamako"
	ReportScheduleRestApiPostTimezoneAfricaBangui                   ReportScheduleRestApiPostTimezone = "Africa/Bangui"
	ReportScheduleRestApiPostTimezoneAfricaBanjul                   ReportScheduleRestApiPostTimezone = "Africa/Banjul"
	ReportScheduleRestApiPostTimezoneAfricaBissau                   ReportScheduleRestApiPostTimezone = "Africa/Bissau"
	ReportScheduleRestApiPostTimezoneAfricaBlantyre                 ReportScheduleRestApiPostTimezone = "Africa/Blantyre"
	ReportScheduleRestApiPostTimezoneAfricaBrazzaville              ReportScheduleRestApiPostTimezone = "Africa/Brazzaville"
	ReportScheduleRestApiPostTimezoneAfricaBujumbura                ReportScheduleRestApiPostTimezone = "Africa/Bujumbura"
	ReportScheduleRestApiPostTimezoneAfricaCairo                    ReportScheduleRestApiPostTimezone = "Africa/Cairo"
	ReportScheduleRestApiPostTimezoneAfricaCasablanca               ReportScheduleRestApiPostTimezone = "Africa/Casablanca"
	ReportScheduleRestApiPostTimezoneAfricaCeuta                    ReportScheduleRestApiPostTimezone = "Africa/Ceuta"
	ReportScheduleRestApiPostTimezoneAfricaConakry                  ReportScheduleRestApiPostTimezone = "Africa/Conakry"
	ReportScheduleRestApiPostTimezoneAfricaDakar                    ReportScheduleRestApiPostTimezone = "Africa/Dakar"
	ReportScheduleRestApiPostTimezoneAfricaDarEsSalaam              ReportScheduleRestApiPostTimezone = "Africa/Dar_es_Salaam"
	ReportScheduleRestApiPostTimezoneAfricaDjibouti                 ReportScheduleRestApiPostTimezone = "Africa/Djibouti"
	ReportScheduleRestApiPostTimezoneAfricaDouala                   ReportScheduleRestApiPostTimezone = "Africa/Douala"
	ReportScheduleRestApiPostTimezoneAfricaElAaiun                  ReportScheduleRestApiPostTimezone = "Africa/El_Aaiun"
	ReportScheduleRestApiPostTimezoneAfricaFreetown                 ReportScheduleRestApiPostTimezone = "Africa/Freetown"
	ReportScheduleRestApiPostTimezoneAfricaGaborone                 ReportScheduleRestApiPostTimezone = "Africa/Gaborone"
	ReportScheduleRestApiPostTimezoneAfricaHarare                   ReportScheduleRestApiPostTimezone = "Africa/Harare"
	ReportScheduleRestApiPostTimezoneAfricaJohannesburg             ReportScheduleRestApiPostTimezone = "Africa/Johannesburg"
	ReportScheduleRestApiPostTimezoneAfricaJuba                     ReportScheduleRestApiPostTimezone = "Africa/Juba"
	ReportScheduleRestApiPostTimezoneAfricaKampala                  ReportScheduleRestApiPostTimezone = "Africa/Kampala"
	ReportScheduleRestApiPostTimezoneAfricaKhartoum                 ReportScheduleRestApiPostTimezone = "Africa/Khartoum"
	ReportScheduleRestApiPostTimezoneAfricaKigali                   ReportScheduleRestApiPostTimezone = "Africa/Kigali"
	ReportScheduleRestApiPostTimezoneAfricaKinshasa                 ReportScheduleRestApiPostTimezone = "Africa/Kinshasa"
	ReportScheduleRestApiPostTimezoneAfricaLagos                    ReportScheduleRestApiPostTimezone = "Africa/Lagos"
	ReportScheduleRestApiPostTimezoneAfricaLibreville               ReportScheduleRestApiPostTimezone = "Africa/Libreville"
	ReportScheduleRestApiPostTimezoneAfricaLome                     ReportScheduleRestApiPostTimezone = "Africa/Lome"
	ReportScheduleRestApiPostTimezoneAfricaLuanda                   ReportScheduleRestApiPostTimezone = "Africa/Luanda"
	ReportScheduleRestApiPostTimezoneAfricaLubumbashi               ReportScheduleRestApiPostTimezone = "Africa/Lubumbashi"
	ReportScheduleRestApiPostTimezoneAfricaLusaka                   ReportScheduleRestApiPostTimezone = "Africa/Lusaka"
	ReportScheduleRestApiPostTimezoneAfricaMalabo                   ReportScheduleRestApiPostTimezone = "Africa/Malabo"
	ReportScheduleRestApiPostTimezoneAfricaMaputo                   ReportScheduleRestApiPostTimezone = "Africa/Maputo"
	ReportScheduleRestApiPostTimezoneAfricaMaseru                   ReportScheduleRestApiPostTimezone = "Africa/Maseru"
	ReportScheduleRestApiPostTimezoneAfricaMbabane                  ReportScheduleRestApiPostTimezone = "Africa/Mbabane"
	ReportScheduleRestApiPostTimezoneAfricaMogadishu                ReportScheduleRestApiPostTimezone = "Africa/Mogadishu"
	ReportScheduleRestApiPostTimezoneAfricaMonrovia                 ReportScheduleRestApiPostTimezone = "Africa/Monrovia"
	ReportScheduleRestApiPostTimezoneAfricaNairobi                  ReportScheduleRestApiPostTimezone = "Africa/Nairobi"
	ReportScheduleRestApiPostTimezoneAfricaNdjamena                 ReportScheduleRestApiPostTimezone = "Africa/Ndjamena"
	ReportScheduleRestApiPostTimezoneAfricaNiamey                   ReportScheduleRestApiPostTimezone = "Africa/Niamey"
	ReportScheduleRestApiPostTimezoneAfricaNouakchott               ReportScheduleRestApiPostTimezone = "Africa/Nouakchott"
	ReportScheduleRestApiPostTimezoneAfricaOuagadougou              ReportScheduleRestApiPostTimezone = "Africa/Ouagadougou"
	ReportScheduleRestApiPostTimezoneAfricaPortoNovo                ReportScheduleRestApiPostTimezone = "Africa/Porto-Novo"
	ReportScheduleRestApiPostTimezoneAfricaSaoTome                  ReportScheduleRestApiPostTimezone = "Africa/Sao_Tome"
	ReportScheduleRestApiPostTimezoneAfricaTimbuktu                 ReportScheduleRestApiPostTimezone = "Africa/Timbuktu"
	ReportScheduleRestApiPostTimezoneAfricaTripoli                  ReportScheduleRestApiPostTimezone = "Africa/Tripoli"
	ReportScheduleRestApiPostTimezoneAfricaTunis                    ReportScheduleRestApiPostTimezone = "Africa/Tunis"
	ReportScheduleRestApiPostTimezoneAfricaWindhoek                 ReportScheduleRestApiPostTimezone = "Africa/Windhoek"
	ReportScheduleRestApiPostTimezoneAmericaAdak                    ReportScheduleRestApiPostTimezone = "America/Adak"
	ReportScheduleRestApiPostTimezoneAmericaAnchorage               ReportScheduleRestApiPostTimezone = "America/Anchorage"
	ReportScheduleRestApiPostTimezoneAmericaAnguilla                ReportScheduleRestApiPostTimezone = "America/Anguilla"
	ReportScheduleRestApiPostTimezoneAmericaAntigua                 ReportScheduleRestApiPostTimezone = "America/Antigua"
	ReportScheduleRestApiPostTimezoneAmericaAraguaina               ReportScheduleRestApiPostTimezone = "America/Araguaina"
	ReportScheduleRestApiPostTimezoneAmericaArgentinaBuenosAires    ReportScheduleRestApiPostTimezone = "America/Argentina/Buenos_Aires"
	ReportScheduleRestApiPostTimezoneAmericaArgentinaCatamarca      ReportScheduleRestApiPostTimezone = "America/Argentina/Catamarca"
	ReportScheduleRestApiPostTimezoneAmericaArgentinaComodRivadavia ReportScheduleRestApiPostTimezone = "America/Argentina/ComodRivadavia"
	ReportScheduleRestApiPostTimezoneAmericaArgentinaCordoba        ReportScheduleRestApiPostTimezone = "America/Argentina/Cordoba"
	ReportScheduleRestApiPostTimezoneAmericaArgentinaJujuy          ReportScheduleRestApiPostTimezone = "America/Argentina/Jujuy"
	ReportScheduleRestApiPostTimezoneAmericaArgentinaLaRioja        ReportScheduleRestApiPostTimezone = "America/Argentina/La_Rioja"
	ReportScheduleRestApiPostTimezoneAmericaArgentinaMendoza        ReportScheduleRestApiPostTimezone = "America/Argentina/Mendoza"
	ReportScheduleRestApiPostTimezoneAmericaArgentinaRioGallegos    ReportScheduleRestApiPostTimezone = "America/Argentina/Rio_Gallegos"
	ReportScheduleRestApiPostTimezoneAmericaArgentinaSalta          ReportScheduleRestApiPostTimezone = "America/Argentina/Salta"
	ReportScheduleRestApiPostTimezoneAmericaArgentinaSanJuan        ReportScheduleRestApiPostTimezone = "America/Argentina/San_Juan"
	ReportScheduleRestApiPostTimezoneAmericaArgentinaSanLuis        ReportScheduleRestApiPostTimezone = "America/Argentina/San_Luis"
	ReportScheduleRestApiPostTimezoneAmericaArgentinaTucuman        ReportScheduleRestApiPostTimezone = "America/Argentina/Tucuman"
	ReportScheduleRestApiPostTimezoneAmericaArgentinaUshuaia        ReportScheduleRestApiPostTimezone = "America/Argentina/Ushuaia"
	ReportScheduleRestApiPostTimezoneAmericaAruba                   ReportScheduleRestApiPostTimezone = "America/Aruba"
	ReportScheduleRestApiPostTimezoneAmericaAsuncion                ReportScheduleRestApiPostTimezone = "America/Asuncion"
	ReportScheduleRestApiPostTimezoneAmericaAtikokan                ReportScheduleRestApiPostTimezone = "America/Atikokan"
	ReportScheduleRestApiPostTimezoneAmericaAtka                    ReportScheduleRestApiPostTimezone = "America/Atka"
	ReportScheduleRestApiPostTimezoneAmericaBahia                   ReportScheduleRestApiPostTimezone = "America/Bahia"
	ReportScheduleRestApiPostTimezoneAmericaBahiaBanderas           ReportScheduleRestApiPostTimezone = "America/Bahia_Banderas"
	ReportScheduleRestApiPostTimezoneAmericaBarbados                ReportScheduleRestApiPostTimezone = "America/Barbados"
	ReportScheduleRestApiPostTimezoneAmericaBelem                   ReportScheduleRestApiPostTimezone = "America/Belem"
	ReportScheduleRestApiPostTimezoneAmericaBelize                  ReportScheduleRestApiPostTimezone = "America/Belize"
	ReportScheduleRestApiPostTimezoneAmericaBlancSablon             ReportScheduleRestApiPostTimezone = "America/Blanc-Sablon"
	ReportScheduleRestApiPostTimezoneAmericaBoaVista                ReportScheduleRestApiPostTimezone = "America/Boa_Vista"
	ReportScheduleRestApiPostTimezoneAmericaBogota                  ReportScheduleRestApiPostTimezone = "America/Bogota"
	ReportScheduleRestApiPostTimezoneAmericaBoise                   ReportScheduleRestApiPostTimezone = "America/Boise"
	ReportScheduleRestApiPostTimezoneAmericaBuenosAires             ReportScheduleRestApiPostTimezone = "America/Buenos_Aires"
	ReportScheduleRestApiPostTimezoneAmericaCambridgeBay            ReportScheduleRestApiPostTimezone = "America/Cambridge_Bay"
	ReportScheduleRestApiPostTimezoneAmericaCampoGrande             ReportScheduleRestApiPostTimezone = "America/Campo_Grande"
	ReportScheduleRestApiPostTimezoneAmericaCancun                  ReportScheduleRestApiPostTimezone = "America/Cancun"
	ReportScheduleRestApiPostTimezoneAmericaCaracas                 ReportScheduleRestApiPostTimezone = "America/Caracas"
	ReportScheduleRestApiPostTimezoneAmericaCatamarca               ReportScheduleRestApiPostTimezone = "America/Catamarca"
	ReportScheduleRestApiPostTimezoneAmericaCayenne                 ReportScheduleRestApiPostTimezone = "America/Cayenne"
	ReportScheduleRestApiPostTimezoneAmericaCayman                  ReportScheduleRestApiPostTimezone = "America/Cayman"
	ReportScheduleRestApiPostTimezoneAmericaChicago                 ReportScheduleRestApiPostTimezone = "America/Chicago"
	ReportScheduleRestApiPostTimezoneAmericaChihuahua               ReportScheduleRestApiPostTimezone = "America/Chihuahua"
	ReportScheduleRestApiPostTimezoneAmericaCoralHarbour            ReportScheduleRestApiPostTimezone = "America/Coral_Harbour"
	ReportScheduleRestApiPostTimezoneAmericaCordoba                 ReportScheduleRestApiPostTimezone = "America/Cordoba"
	ReportScheduleRestApiPostTimezoneAmericaCostaRica               ReportScheduleRestApiPostTimezone = "America/Costa_Rica"
	ReportScheduleRestApiPostTimezoneAmericaCreston                 ReportScheduleRestApiPostTimezone = "America/Creston"
	ReportScheduleRestApiPostTimezoneAmericaCuiaba                  ReportScheduleRestApiPostTimezone = "America/Cuiaba"
	ReportScheduleRestApiPostTimezoneAmericaCuracao                 ReportScheduleRestApiPostTimezone = "America/Curacao"
	ReportScheduleRestApiPostTimezoneAmericaDanmarkshavn            ReportScheduleRestApiPostTimezone = "America/Danmarkshavn"
	ReportScheduleRestApiPostTimezoneAmericaDawson                  ReportScheduleRestApiPostTimezone = "America/Dawson"
	ReportScheduleRestApiPostTimezoneAmericaDawsonCreek             ReportScheduleRestApiPostTimezone = "America/Dawson_Creek"
	ReportScheduleRestApiPostTimezoneAmericaDenver                  ReportScheduleRestApiPostTimezone = "America/Denver"
	ReportScheduleRestApiPostTimezoneAmericaDetroit                 ReportScheduleRestApiPostTimezone = "America/Detroit"
	ReportScheduleRestApiPostTimezoneAmericaDominica                ReportScheduleRestApiPostTimezone = "America/Dominica"
	ReportScheduleRestApiPostTimezoneAmericaEdmonton                ReportScheduleRestApiPostTimezone = "America/Edmonton"
	ReportScheduleRestApiPostTimezoneAmericaEirunepe                ReportScheduleRestApiPostTimezone = "America/Eirunepe"
	ReportScheduleRestApiPostTimezoneAmericaElSalvador              ReportScheduleRestApiPostTimezone = "America/El_Salvador"
	ReportScheduleRestApiPostTimezoneAmericaEnsenada                ReportScheduleRestApiPostTimezone = "America/Ensenada"
	ReportScheduleRestApiPostTimezoneAmericaFortNelson              ReportScheduleRestApiPostTimezone = "America/Fort_Nelson"
	ReportScheduleRestApiPostTimezoneAmericaFortWayne               ReportScheduleRestApiPostTimezone = "America/Fort_Wayne"
	ReportScheduleRestApiPostTimezoneAmericaFortaleza               ReportScheduleRestApiPostTimezone = "America/Fortaleza"
	ReportScheduleRestApiPostTimezoneAmericaGlaceBay                ReportScheduleRestApiPostTimezone = "America/Glace_Bay"
	ReportScheduleRestApiPostTimezoneAmericaGodthab                 ReportScheduleRestApiPostTimezone = "America/Godthab"
	ReportScheduleRestApiPostTimezoneAmericaGooseBay                ReportScheduleRestApiPostTimezone = "America/Goose_Bay"
	ReportScheduleRestApiPostTimezoneAmericaGrandTurk               ReportScheduleRestApiPostTimezone = "America/Grand_Turk"
	ReportScheduleRestApiPostTimezoneAmericaGrenada                 ReportScheduleRestApiPostTimezone = "America/Grenada"
	ReportScheduleRestApiPostTimezoneAmericaGuadeloupe              ReportScheduleRestApiPostTimezone = "America/Guadeloupe"
	ReportScheduleRestApiPostTimezoneAmericaGuatemala               ReportScheduleRestApiPostTimezone = "America/Guatemala"
	ReportScheduleRestApiPostTimezoneAmericaGuayaquil               ReportScheduleRestApiPostTimezone = "America/Guayaquil"
	ReportScheduleRestApiPostTimezoneAmericaGuyana                  ReportScheduleRestApiPostTimezone = "America/Guyana"
	ReportScheduleRestApiPostTimezoneAmericaHalifax                 ReportScheduleRestApiPostTimezone = "America/Halifax"
	ReportScheduleRestApiPostTimezoneAmericaHavana                  ReportScheduleRestApiPostTimezone = "America/Havana"
	ReportScheduleRestApiPostTimezoneAmericaHermosillo              ReportScheduleRestApiPostTimezone = "America/Hermosillo"
	ReportScheduleRestApiPostTimezoneAmericaIndianaIndianapolis     ReportScheduleRestApiPostTimezone = "America/Indiana/Indianapolis"
	ReportScheduleRestApiPostTimezoneAmericaIndianaKnox             ReportScheduleRestApiPostTimezone = "America/Indiana/Knox"
	ReportScheduleRestApiPostTimezoneAmericaIndianaMarengo          ReportScheduleRestApiPostTimezone = "America/Indiana/Marengo"
	ReportScheduleRestApiPostTimezoneAmericaIndianaPetersburg       ReportScheduleRestApiPostTimezone = "America/Indiana/Petersburg"
	ReportScheduleRestApiPostTimezoneAmericaIndianaTellCity         ReportScheduleRestApiPostTimezone = "America/Indiana/Tell_City"
	ReportScheduleRestApiPostTimezoneAmericaIndianaVevay            ReportScheduleRestApiPostTimezone = "America/Indiana/Vevay"
	ReportScheduleRestApiPostTimezoneAmericaIndianaVincennes        ReportScheduleRestApiPostTimezone = "America/Indiana/Vincennes"
	ReportScheduleRestApiPostTimezoneAmericaIndianaWinamac          ReportScheduleRestApiPostTimezone = "America/Indiana/Winamac"
	ReportScheduleRestApiPostTimezoneAmericaIndianapolis            ReportScheduleRestApiPostTimezone = "America/Indianapolis"
	ReportScheduleRestApiPostTimezoneAmericaInuvik                  ReportScheduleRestApiPostTimezone = "America/Inuvik"
	ReportScheduleRestApiPostTimezoneAmericaIqaluit                 ReportScheduleRestApiPostTimezone = "America/Iqaluit"
	ReportScheduleRestApiPostTimezoneAmericaJamaica                 ReportScheduleRestApiPostTimezone = "America/Jamaica"
	ReportScheduleRestApiPostTimezoneAmericaJujuy                   ReportScheduleRestApiPostTimezone = "America/Jujuy"
	ReportScheduleRestApiPostTimezoneAmericaJuneau                  ReportScheduleRestApiPostTimezone = "America/Juneau"
	ReportScheduleRestApiPostTimezoneAmericaKentuckyLouisville      ReportScheduleRestApiPostTimezone = "America/Kentucky/Louisville"
	ReportScheduleRestApiPostTimezoneAmericaKentuckyMonticello      ReportScheduleRestApiPostTimezone = "America/Kentucky/Monticello"
	ReportScheduleRestApiPostTimezoneAmericaKnoxIN                  ReportScheduleRestApiPostTimezone = "America/Knox_IN"
	ReportScheduleRestApiPostTimezoneAmericaKralendijk              ReportScheduleRestApiPostTimezone = "America/Kralendijk"
	ReportScheduleRestApiPostTimezoneAmericaLaPaz                   ReportScheduleRestApiPostTimezone = "America/La_Paz"
	ReportScheduleRestApiPostTimezoneAmericaLima                    ReportScheduleRestApiPostTimezone = "America/Lima"
	ReportScheduleRestApiPostTimezoneAmericaLosAngeles              ReportScheduleRestApiPostTimezone = "America/Los_Angeles"
	ReportScheduleRestApiPostTimezoneAmericaLouisville              ReportScheduleRestApiPostTimezone = "America/Louisville"
	ReportScheduleRestApiPostTimezoneAmericaLowerPrinces            ReportScheduleRestApiPostTimezone = "America/Lower_Princes"
	ReportScheduleRestApiPostTimezoneAmericaMaceio                  ReportScheduleRestApiPostTimezone = "America/Maceio"
	ReportScheduleRestApiPostTimezoneAmericaManagua                 ReportScheduleRestApiPostTimezone = "America/Managua"
	ReportScheduleRestApiPostTimezoneAmericaManaus                  ReportScheduleRestApiPostTimezone = "America/Manaus"
	ReportScheduleRestApiPostTimezoneAmericaMarigot                 ReportScheduleRestApiPostTimezone = "America/Marigot"
	ReportScheduleRestApiPostTimezoneAmericaMartinique              ReportScheduleRestApiPostTimezone = "America/Martinique"
	ReportScheduleRestApiPostTimezoneAmericaMatamoros               ReportScheduleRestApiPostTimezone = "America/Matamoros"
	ReportScheduleRestApiPostTimezoneAmericaMazatlan                ReportScheduleRestApiPostTimezone = "America/Mazatlan"
	ReportScheduleRestApiPostTimezoneAmericaMendoza                 ReportScheduleRestApiPostTimezone = "America/Mendoza"
	ReportScheduleRestApiPostTimezoneAmericaMenominee               ReportScheduleRestApiPostTimezone = "America/Menominee"
	ReportScheduleRestApiPostTimezoneAmericaMerida                  ReportScheduleRestApiPostTimezone = "America/Merida"
	ReportScheduleRestApiPostTimezoneAmericaMetlakatla              ReportScheduleRestApiPostTimezone = "America/Metlakatla"
	ReportScheduleRestApiPostTimezoneAmericaMexicoCity              ReportScheduleRestApiPostTimezone = "America/Mexico_City"
	ReportScheduleRestApiPostTimezoneAmericaMiquelon                ReportScheduleRestApiPostTimezone = "America/Miquelon"
	ReportScheduleRestApiPostTimezoneAmericaMoncton                 ReportScheduleRestApiPostTimezone = "America/Moncton"
	ReportScheduleRestApiPostTimezoneAmericaMonterrey               ReportScheduleRestApiPostTimezone = "America/Monterrey"
	ReportScheduleRestApiPostTimezoneAmericaMontevideo              ReportScheduleRestApiPostTimezone = "America/Montevideo"
	ReportScheduleRestApiPostTimezoneAmericaMontreal                ReportScheduleRestApiPostTimezone = "America/Montreal"
	ReportScheduleRestApiPostTimezoneAmericaMontserrat              ReportScheduleRestApiPostTimezone = "America/Montserrat"
	ReportScheduleRestApiPostTimezoneAmericaNassau                  ReportScheduleRestApiPostTimezone = "America/Nassau"
	ReportScheduleRestApiPostTimezoneAmericaNewYork                 ReportScheduleRestApiPostTimezone = "America/New_York"
	ReportScheduleRestApiPostTimezoneAmericaNipigon                 ReportScheduleRestApiPostTimezone = "America/Nipigon"
	ReportScheduleRestApiPostTimezoneAmericaNome                    ReportScheduleRestApiPostTimezone = "America/Nome"
	ReportScheduleRestApiPostTimezoneAmericaNoronha                 ReportScheduleRestApiPostTimezone = "America/Noronha"
	ReportScheduleRestApiPostTimezoneAmericaNorthDakotaBeulah       ReportScheduleRestApiPostTimezone = "America/North_Dakota/Beulah"
	ReportScheduleRestApiPostTimezoneAmericaNorthDakotaCenter       ReportScheduleRestApiPostTimezone = "America/North_Dakota/Center"
	ReportScheduleRestApiPostTimezoneAmericaNorthDakotaNewSalem     ReportScheduleRestApiPostTimezone = "America/North_Dakota/New_Salem"
	ReportScheduleRestApiPostTimezoneAmericaNuuk                    ReportScheduleRestApiPostTimezone = "America/Nuuk"
	ReportScheduleRestApiPostTimezoneAmericaOjinaga                 ReportScheduleRestApiPostTimezone = "America/Ojinaga"
	ReportScheduleRestApiPostTimezoneAmericaPanama                  ReportScheduleRestApiPostTimezone = "America/Panama"
	ReportScheduleRestApiPostTimezoneAmericaPangnirtung             ReportScheduleRestApiPostTimezone = "America/Pangnirtung"
	ReportScheduleRestApiPostTimezoneAmericaParamaribo              ReportScheduleRestApiPostTimezone = "America/Paramaribo"
	ReportScheduleRestApiPostTimezoneAmericaPhoenix                 ReportScheduleRestApiPostTimezone = "America/Phoenix"
	ReportScheduleRestApiPostTimezoneAmericaPortAuPrince            ReportScheduleRestApiPostTimezone = "America/Port-au-Prince"
	ReportScheduleRestApiPostTimezoneAmericaPortOfSpain             ReportScheduleRestApiPostTimezone = "America/Port_of_Spain"
	ReportScheduleRestApiPostTimezoneAmericaPortoAcre               ReportScheduleRestApiPostTimezone = "America/Porto_Acre"
	ReportScheduleRestApiPostTimezoneAmericaPortoVelho              ReportScheduleRestApiPostTimezone = "America/Porto_Velho"
	ReportScheduleRestApiPostTimezoneAmericaPuertoRico              ReportScheduleRestApiPostTimezone = "America/Puerto_Rico"
	ReportScheduleRestApiPostTimezoneAmericaPuntaArenas             ReportScheduleRestApiPostTimezone = "America/Punta_Arenas"
	ReportScheduleRestApiPostTimezoneAmericaRainyRiver              ReportScheduleRestApiPostTimezone = "America/Rainy_River"
	ReportScheduleRestApiPostTimezoneAmericaRankinInlet             ReportScheduleRestApiPostTimezone = "America/Rankin_Inlet"
	ReportScheduleRestApiPostTimezoneAmericaRecife                  ReportScheduleRestApiPostTimezone = "America/Recife"
	ReportScheduleRestApiPostTimezoneAmericaRegina                  ReportScheduleRestApiPostTimezone = "America/Regina"
	ReportScheduleRestApiPostTimezoneAmericaResolute                ReportScheduleRestApiPostTimezone = "America/Resolute"
	ReportScheduleRestApiPostTimezoneAmericaRioBranco               ReportScheduleRestApiPostTimezone = "America/Rio_Branco"
	ReportScheduleRestApiPostTimezoneAmericaRosario                 ReportScheduleRestApiPostTimezone = "America/Rosario"
	ReportScheduleRestApiPostTimezoneAmericaSantaIsabel             ReportScheduleRestApiPostTimezone = "America/Santa_Isabel"
	ReportScheduleRestApiPostTimezoneAmericaSantarem                ReportScheduleRestApiPostTimezone = "America/Santarem"
	ReportScheduleRestApiPostTimezoneAmericaSantiago                ReportScheduleRestApiPostTimezone = "America/Santiago"
	ReportScheduleRestApiPostTimezoneAmericaSantoDomingo            ReportScheduleRestApiPostTimezone = "America/Santo_Domingo"
	ReportScheduleRestApiPostTimezoneAmericaSaoPaulo                ReportScheduleRestApiPostTimezone = "America/Sao_Paulo"
	ReportScheduleRestApiPostTimezoneAmericaScoresbysund            ReportScheduleRestApiPostTimezone = "America/Scoresbysund"
	ReportScheduleRestApiPostTimezoneAmericaShiprock                ReportScheduleRestApiPostTimezone = "America/Shiprock"
	ReportScheduleRestApiPostTimezoneAmericaSitka                   ReportScheduleRestApiPostTimezone = "America/Sitka"
	ReportScheduleRestApiPostTimezoneAmericaStBarthelemy            ReportScheduleRestApiPostTimezone = "America/St_Barthelemy"
	ReportScheduleRestApiPostTimezoneAmericaStJohns                 ReportScheduleRestApiPostTimezone = "America/St_Johns"
	ReportScheduleRestApiPostTimezoneAmericaStKitts                 ReportScheduleRestApiPostTimezone = "America/St_Kitts"
	ReportScheduleRestApiPostTimezoneAmericaStLucia                 ReportScheduleRestApiPostTimezone = "America/St_Lucia"
	ReportScheduleRestApiPostTimezoneAmericaStThomas                ReportScheduleRestApiPostTimezone = "America/St_Thomas"
	ReportScheduleRestApiPostTimezoneAmericaStVincent               ReportScheduleRestApiPostTimezone = "America/St_Vincent"
	ReportScheduleRestApiPostTimezoneAmericaSwiftCurrent            ReportScheduleRestApiPostTimezone = "America/Swift_Current"
	ReportScheduleRestApiPostTimezoneAmericaTegucigalpa             ReportScheduleRestApiPostTimezone = "America/Tegucigalpa"
	ReportScheduleRestApiPostTimezoneAmericaThule                   ReportScheduleRestApiPostTimezone = "America/Thule"
	ReportScheduleRestApiPostTimezoneAmericaThunderBay              ReportScheduleRestApiPostTimezone = "America/Thunder_Bay"
	ReportScheduleRestApiPostTimezoneAmericaTijuana                 ReportScheduleRestApiPostTimezone = "America/Tijuana"
	ReportScheduleRestApiPostTimezoneAmericaToronto                 ReportScheduleRestApiPostTimezone = "America/Toronto"
	ReportScheduleRestApiPostTimezoneAmericaTortola                 ReportScheduleRestApiPostTimezone = "America/Tortola"
	ReportScheduleRestApiPostTimezoneAmericaVancouver               ReportScheduleRestApiPostTimezone = "America/Vancouver"
	ReportScheduleRestApiPostTimezoneAmericaVirgin                  ReportScheduleRestApiPostTimezone = "America/Virgin"
	ReportScheduleRestApiPostTimezoneAmericaWhitehorse              ReportScheduleRestApiPostTimezone = "America/Whitehorse"
	ReportScheduleRestApiPostTimezoneAmericaWinnipeg                ReportScheduleRestApiPostTimezone = "America/Winnipeg"
	ReportScheduleRestApiPostTimezoneAmericaYakutat                 ReportScheduleRestApiPostTimezone = "America/Yakutat"
	ReportScheduleRestApiPostTimezoneAmericaYellowknife             ReportScheduleRestApiPostTimezone = "America/Yellowknife"
	ReportScheduleRestApiPostTimezoneAntarcticaCasey                ReportScheduleRestApiPostTimezone = "Antarctica/Casey"
	ReportScheduleRestApiPostTimezoneAntarcticaDavis                ReportScheduleRestApiPostTimezone = "Antarctica/Davis"
	ReportScheduleRestApiPostTimezoneAntarcticaDumontDUrville       ReportScheduleRestApiPostTimezone = "Antarctica/DumontDUrville"
	ReportScheduleRestApiPostTimezoneAntarcticaMacquarie            ReportScheduleRestApiPostTimezone = "Antarctica/Macquarie"
	ReportScheduleRestApiPostTimezoneAntarcticaMawson               ReportScheduleRestApiPostTimezone = "Antarctica/Mawson"
	ReportScheduleRestApiPostTimezoneAntarcticaMcMurdo              ReportScheduleRestApiPostTimezone = "Antarctica/McMurdo"
	ReportScheduleRestApiPostTimezoneAntarcticaPalmer               ReportScheduleRestApiPostTimezone = "Antarctica/Palmer"
	ReportScheduleRestApiPostTimezoneAntarcticaRothera              ReportScheduleRestApiPostTimezone = "Antarctica/Rothera"
	ReportScheduleRestApiPostTimezoneAntarcticaSouthPole            ReportScheduleRestApiPostTimezone = "Antarctica/South_Pole"
	ReportScheduleRestApiPostTimezoneAntarcticaSyowa                ReportScheduleRestApiPostTimezone = "Antarctica/Syowa"
	ReportScheduleRestApiPostTimezoneAntarcticaTroll                ReportScheduleRestApiPostTimezone = "Antarctica/Troll"
	ReportScheduleRestApiPostTimezoneAntarcticaVostok               ReportScheduleRestApiPostTimezone = "Antarctica/Vostok"
	ReportScheduleRestApiPostTimezoneArcticLongyearbyen             ReportScheduleRestApiPostTimezone = "Arctic/Longyearbyen"
	ReportScheduleRestApiPostTimezoneAsiaAden                       ReportScheduleRestApiPostTimezone = "Asia/Aden"
	ReportScheduleRestApiPostTimezoneAsiaAlmaty                     ReportScheduleRestApiPostTimezone = "Asia/Almaty"
	ReportScheduleRestApiPostTimezoneAsiaAmman                      ReportScheduleRestApiPostTimezone = "Asia/Amman"
	ReportScheduleRestApiPostTimezoneAsiaAnadyr                     ReportScheduleRestApiPostTimezone = "Asia/Anadyr"
	ReportScheduleRestApiPostTimezoneAsiaAqtau                      ReportScheduleRestApiPostTimezone = "Asia/Aqtau"
	ReportScheduleRestApiPostTimezoneAsiaAqtobe                     ReportScheduleRestApiPostTimezone = "Asia/Aqtobe"
	ReportScheduleRestApiPostTimezoneAsiaAshgabat                   ReportScheduleRestApiPostTimezone = "Asia/Ashgabat"
	ReportScheduleRestApiPostTimezoneAsiaAshkhabad                  ReportScheduleRestApiPostTimezone = "Asia/Ashkhabad"
	ReportScheduleRestApiPostTimezoneAsiaAtyrau                     ReportScheduleRestApiPostTimezone = "Asia/Atyrau"
	ReportScheduleRestApiPostTimezoneAsiaBaghdad                    ReportScheduleRestApiPostTimezone = "Asia/Baghdad"
	ReportScheduleRestApiPostTimezoneAsiaBahrain                    ReportScheduleRestApiPostTimezone = "Asia/Bahrain"
	ReportScheduleRestApiPostTimezoneAsiaBaku                       ReportScheduleRestApiPostTimezone = "Asia/Baku"
	ReportScheduleRestApiPostTimezoneAsiaBangkok                    ReportScheduleRestApiPostTimezone = "Asia/Bangkok"
	ReportScheduleRestApiPostTimezoneAsiaBarnaul                    ReportScheduleRestApiPostTimezone = "Asia/Barnaul"
	ReportScheduleRestApiPostTimezoneAsiaBeirut                     ReportScheduleRestApiPostTimezone = "Asia/Beirut"
	ReportScheduleRestApiPostTimezoneAsiaBishkek                    ReportScheduleRestApiPostTimezone = "Asia/Bishkek"
	ReportScheduleRestApiPostTimezoneAsiaBrunei                     ReportScheduleRestApiPostTimezone = "Asia/Brunei"
	ReportScheduleRestApiPostTimezoneAsiaCalcutta                   ReportScheduleRestApiPostTimezone = "Asia/Calcutta"
	ReportScheduleRestApiPostTimezoneAsiaChita                      ReportScheduleRestApiPostTimezone = "Asia/Chita"
	ReportScheduleRestApiPostTimezoneAsiaChoibalsan                 ReportScheduleRestApiPostTimezone = "Asia/Choibalsan"
	ReportScheduleRestApiPostTimezoneAsiaChongqing                  ReportScheduleRestApiPostTimezone = "Asia/Chongqing"
	ReportScheduleRestApiPostTimezoneAsiaChungking                  ReportScheduleRestApiPostTimezone = "Asia/Chungking"
	ReportScheduleRestApiPostTimezoneAsiaColombo                    ReportScheduleRestApiPostTimezone = "Asia/Colombo"
	ReportScheduleRestApiPostTimezoneAsiaDacca                      ReportScheduleRestApiPostTimezone = "Asia/Dacca"
	ReportScheduleRestApiPostTimezoneAsiaDamascus                   ReportScheduleRestApiPostTimezone = "Asia/Damascus"
	ReportScheduleRestApiPostTimezoneAsiaDhaka                      ReportScheduleRestApiPostTimezone = "Asia/Dhaka"
	ReportScheduleRestApiPostTimezoneAsiaDili                       ReportScheduleRestApiPostTimezone = "Asia/Dili"
	ReportScheduleRestApiPostTimezoneAsiaDubai                      ReportScheduleRestApiPostTimezone = "Asia/Dubai"
	ReportScheduleRestApiPostTimezoneAsiaDushanbe                   ReportScheduleRestApiPostTimezone = "Asia/Dushanbe"
	ReportScheduleRestApiPostTimezoneAsiaFamagusta                  ReportScheduleRestApiPostTimezone = "Asia/Famagusta"
	ReportScheduleRestApiPostTimezoneAsiaGaza                       ReportScheduleRestApiPostTimezone = "Asia/Gaza"
	ReportScheduleRestApiPostTimezoneAsiaHarbin                     ReportScheduleRestApiPostTimezone = "Asia/Harbin"
	ReportScheduleRestApiPostTimezoneAsiaHebron                     ReportScheduleRestApiPostTimezone = "Asia/Hebron"
	ReportScheduleRestApiPostTimezoneAsiaHoChiMinh                  ReportScheduleRestApiPostTimezone = "Asia/Ho_Chi_Minh"
	ReportScheduleRestApiPostTimezoneAsiaHongKong                   ReportScheduleRestApiPostTimezone = "Asia/Hong_Kong"
	ReportScheduleRestApiPostTimezoneAsiaHovd                       ReportScheduleRestApiPostTimezone = "Asia/Hovd"
	ReportScheduleRestApiPostTimezoneAsiaIrkutsk                    ReportScheduleRestApiPostTimezone = "Asia/Irkutsk"
	ReportScheduleRestApiPostTimezoneAsiaIstanbul                   ReportScheduleRestApiPostTimezone = "Asia/Istanbul"
	ReportScheduleRestApiPostTimezoneAsiaJakarta                    ReportScheduleRestApiPostTimezone = "Asia/Jakarta"
	ReportScheduleRestApiPostTimezoneAsiaJayapura                   ReportScheduleRestApiPostTimezone = "Asia/Jayapura"
	ReportScheduleRestApiPostTimezoneAsiaJerusalem                  ReportScheduleRestApiPostTimezone = "Asia/Jerusalem"
	ReportScheduleRestApiPostTimezoneAsiaKabul                      ReportScheduleRestApiPostTimezone = "Asia/Kabul"
	ReportScheduleRestApiPostTimezoneAsiaKamchatka                  ReportScheduleRestApiPostTimezone = "Asia/Kamchatka"
	ReportScheduleRestApiPostTimezoneAsiaKarachi                    ReportScheduleRestApiPostTimezone = "Asia/Karachi"
	ReportScheduleRestApiPostTimezoneAsiaKashgar                    ReportScheduleRestApiPostTimezone = "Asia/Kashgar"
	ReportScheduleRestApiPostTimezoneAsiaKathmandu                  ReportScheduleRestApiPostTimezone = "Asia/Kathmandu"
	ReportScheduleRestApiPostTimezoneAsiaKatmandu                   ReportScheduleRestApiPostTimezone = "Asia/Katmandu"
	ReportScheduleRestApiPostTimezoneAsiaKhandyga                   ReportScheduleRestApiPostTimezone = "Asia/Khandyga"
	ReportScheduleRestApiPostTimezoneAsiaKolkata                    ReportScheduleRestApiPostTimezone = "Asia/Kolkata"
	ReportScheduleRestApiPostTimezoneAsiaKrasnoyarsk                ReportScheduleRestApiPostTimezone = "Asia/Krasnoyarsk"
	ReportScheduleRestApiPostTimezoneAsiaKualaLumpur                ReportScheduleRestApiPostTimezone = "Asia/Kuala_Lumpur"
	ReportScheduleRestApiPostTimezoneAsiaKuching                    ReportScheduleRestApiPostTimezone = "Asia/Kuching"
	ReportScheduleRestApiPostTimezoneAsiaKuwait                     ReportScheduleRestApiPostTimezone = "Asia/Kuwait"
	ReportScheduleRestApiPostTimezoneAsiaMacao                      ReportScheduleRestApiPostTimezone = "Asia/Macao"
	ReportScheduleRestApiPostTimezoneAsiaMacau                      ReportScheduleRestApiPostTimezone = "Asia/Macau"
	ReportScheduleRestApiPostTimezoneAsiaMagadan                    ReportScheduleRestApiPostTimezone = "Asia/Magadan"
	ReportScheduleRestApiPostTimezoneAsiaMakassar                   ReportScheduleRestApiPostTimezone = "Asia/Makassar"
	ReportScheduleRestApiPostTimezoneAsiaManila                     ReportScheduleRestApiPostTimezone = "Asia/Manila"
	ReportScheduleRestApiPostTimezoneAsiaMuscat                     ReportScheduleRestApiPostTimezone = "Asia/Muscat"
	ReportScheduleRestApiPostTimezoneAsiaNicosia                    ReportScheduleRestApiPostTimezone = "Asia/Nicosia"
	ReportScheduleRestApiPostTimezoneAsiaNovokuznetsk               ReportScheduleRestApiPostTimezone = "Asia/Novokuznetsk"
	ReportScheduleRestApiPostTimezoneAsiaNovosibirsk                ReportScheduleRestApiPostTimezone = "Asia/Novosibirsk"
	ReportScheduleRestApiPostTimezoneAsiaOmsk                       ReportScheduleRestApiPostTimezone = "Asia/Omsk"
	ReportScheduleRestApiPostTimezoneAsiaOral                       ReportScheduleRestApiPostTimezone = "Asia/Oral"
	ReportScheduleRestApiPostTimezoneAsiaPhnomPenh                  ReportScheduleRestApiPostTimezone = "Asia/Phnom_Penh"
	ReportScheduleRestApiPostTimezoneAsiaPontianak                  ReportScheduleRestApiPostTimezone = "Asia/Pontianak"
	ReportScheduleRestApiPostTimezoneAsiaPyongyang                  ReportScheduleRestApiPostTimezone = "Asia/Pyongyang"
	ReportScheduleRestApiPostTimezoneAsiaQatar                      ReportScheduleRestApiPostTimezone = "Asia/Qatar"
	ReportScheduleRestApiPostTimezoneAsiaQostanay                   ReportScheduleRestApiPostTimezone = "Asia/Qostanay"
	ReportScheduleRestApiPostTimezoneAsiaQyzylorda                  ReportScheduleRestApiPostTimezone = "Asia/Qyzylorda"
	ReportScheduleRestApiPostTimezoneAsiaRangoon                    ReportScheduleRestApiPostTimezone = "Asia/Rangoon"
	ReportScheduleRestApiPostTimezoneAsiaRiyadh                     ReportScheduleRestApiPostTimezone = "Asia/Riyadh"
	ReportScheduleRestApiPostTimezoneAsiaSaigon                     ReportScheduleRestApiPostTimezone = "Asia/Saigon"
	ReportScheduleRestApiPostTimezoneAsiaSakhalin                   ReportScheduleRestApiPostTimezone = "Asia/Sakhalin"
	ReportScheduleRestApiPostTimezoneAsiaSamarkand                  ReportScheduleRestApiPostTimezone = "Asia/Samarkand"
	ReportScheduleRestApiPostTimezoneAsiaSeoul                      ReportScheduleRestApiPostTimezone = "Asia/Seoul"
	ReportScheduleRestApiPostTimezoneAsiaShanghai                   ReportScheduleRestApiPostTimezone = "Asia/Shanghai"
	ReportScheduleRestApiPostTimezoneAsiaSingapore                  ReportScheduleRestApiPostTimezone = "Asia/Singapore"
	ReportScheduleRestApiPostTimezoneAsiaSrednekolymsk              ReportScheduleRestApiPostTimezone = "Asia/Srednekolymsk"
	ReportScheduleRestApiPostTimezoneAsiaTaipei                     ReportScheduleRestApiPostTimezone = "Asia/Taipei"
	ReportScheduleRestApiPostTimezoneAsiaTashkent                   ReportScheduleRestApiPostTimezone = "Asia/Tashkent"
	ReportScheduleRestApiPostTimezoneAsiaTbilisi                    ReportScheduleRestApiPostTimezone = "Asia/Tbilisi"
	ReportScheduleRestApiPostTimezoneAsiaTehran                     ReportScheduleRestApiPostTimezone = "Asia/Tehran"
	ReportScheduleRestApiPostTimezoneAsiaTelAviv                    ReportScheduleRestApiPostTimezone = "Asia/Tel_Aviv"
	ReportScheduleRestApiPostTimezoneAsiaThimbu                     ReportScheduleRestApiPostTimezone = "Asia/Thimbu"
	ReportScheduleRestApiPostTimezoneAsiaThimphu                    ReportScheduleRestApiPostTimezone = "Asia/Thimphu"
	ReportScheduleRestApiPostTimezoneAsiaTokyo                      ReportScheduleRestApiPostTimezone = "Asia/Tokyo"
	ReportScheduleRestApiPostTimezoneAsiaTomsk                      ReportScheduleRestApiPostTimezone = "Asia/Tomsk"
	ReportScheduleRestApiPostTimezoneAsiaUjungPandang               ReportScheduleRestApiPostTimezone = "Asia/Ujung_Pandang"
	ReportScheduleRestApiPostTimezoneAsiaUlaanbaatar                ReportScheduleRestApiPostTimezone = "Asia/Ulaanbaatar"
	ReportScheduleRestApiPostTimezoneAsiaUlanBator                  ReportScheduleRestApiPostTimezone = "Asia/Ulan_Bator"
	ReportScheduleRestApiPostTimezoneAsiaUrumqi                     ReportScheduleRestApiPostTimezone = "Asia/Urumqi"
	ReportScheduleRestApiPostTimezoneAsiaUstNera                    ReportScheduleRestApiPostTimezone = "Asia/Ust-Nera"
	ReportScheduleRestApiPostTimezoneAsiaVientiane                  ReportScheduleRestApiPostTimezone = "Asia/Vientiane"
	ReportScheduleRestApiPostTimezoneAsiaVladivostok                ReportScheduleRestApiPostTimezone = "Asia/Vladivostok"
	ReportScheduleRestApiPostTimezoneAsiaYakutsk                    ReportScheduleRestApiPostTimezone = "Asia/Yakutsk"
	ReportScheduleRestApiPostTimezoneAsiaYangon                     ReportScheduleRestApiPostTimezone = "Asia/Yangon"
	ReportScheduleRestApiPostTimezoneAsiaYekaterinburg              ReportScheduleRestApiPostTimezone = "Asia/Yekaterinburg"
	ReportScheduleRestApiPostTimezoneAsiaYerevan                    ReportScheduleRestApiPostTimezone = "Asia/Yerevan"
	ReportScheduleRestApiPostTimezoneAtlanticAzores                 ReportScheduleRestApiPostTimezone = "Atlantic/Azores"
	ReportScheduleRestApiPostTimezoneAtlanticBermuda                ReportScheduleRestApiPostTimezone = "Atlantic/Bermuda"
	ReportScheduleRestApiPostTimezoneAtlanticCanary                 ReportScheduleRestApiPostTimezone = "Atlantic/Canary"
	ReportScheduleRestApiPostTimezoneAtlanticCapeVerde              ReportScheduleRestApiPostTimezone = "Atlantic/Cape_Verde"
	ReportScheduleRestApiPostTimezoneAtlanticFaeroe                 ReportScheduleRestApiPostTimezone = "Atlantic/Faeroe"
	ReportScheduleRestApiPostTimezoneAtlanticFaroe                  ReportScheduleRestApiPostTimezone = "Atlantic/Faroe"
	ReportScheduleRestApiPostTimezoneAtlanticJanMayen               ReportScheduleRestApiPostTimezone = "Atlantic/Jan_Mayen"
	ReportScheduleRestApiPostTimezoneAtlanticMadeira                ReportScheduleRestApiPostTimezone = "Atlantic/Madeira"
	ReportScheduleRestApiPostTimezoneAtlanticReykjavik              ReportScheduleRestApiPostTimezone = "Atlantic/Reykjavik"
	ReportScheduleRestApiPostTimezoneAtlanticSouthGeorgia           ReportScheduleRestApiPostTimezone = "Atlantic/South_Georgia"
	ReportScheduleRestApiPostTimezoneAtlanticStHelena               ReportScheduleRestApiPostTimezone = "Atlantic/St_Helena"
	ReportScheduleRestApiPostTimezoneAtlanticStanley                ReportScheduleRestApiPostTimezone = "Atlantic/Stanley"
	ReportScheduleRestApiPostTimezoneAustraliaACT                   ReportScheduleRestApiPostTimezone = "Australia/ACT"
	ReportScheduleRestApiPostTimezoneAustraliaAdelaide              ReportScheduleRestApiPostTimezone = "Australia/Adelaide"
	ReportScheduleRestApiPostTimezoneAustraliaBrisbane              ReportScheduleRestApiPostTimezone = "Australia/Brisbane"
	ReportScheduleRestApiPostTimezoneAustraliaBrokenHill            ReportScheduleRestApiPostTimezone = "Australia/Broken_Hill"
	ReportScheduleRestApiPostTimezoneAustraliaCanberra              ReportScheduleRestApiPostTimezone = "Australia/Canberra"
	ReportScheduleRestApiPostTimezoneAustraliaCurrie                ReportScheduleRestApiPostTimezone = "Australia/Currie"
	ReportScheduleRestApiPostTimezoneAustraliaDarwin                ReportScheduleRestApiPostTimezone = "Australia/Darwin"
	ReportScheduleRestApiPostTimezoneAustraliaEucla                 ReportScheduleRestApiPostTimezone = "Australia/Eucla"
	ReportScheduleRestApiPostTimezoneAustraliaHobart                ReportScheduleRestApiPostTimezone = "Australia/Hobart"
	ReportScheduleRestApiPostTimezoneAustraliaLHI                   ReportScheduleRestApiPostTimezone = "Australia/LHI"
	ReportScheduleRestApiPostTimezoneAustraliaLindeman              ReportScheduleRestApiPostTimezone = "Australia/Lindeman"
	ReportScheduleRestApiPostTimezoneAustraliaLordHowe              ReportScheduleRestApiPostTimezone = "Australia/Lord_Howe"
	ReportScheduleRestApiPostTimezoneAustraliaMelbourne             ReportScheduleRestApiPostTimezone = "Australia/Melbourne"
	ReportScheduleRestApiPostTimezoneAustraliaNSW                   ReportScheduleRestApiPostTimezone = "Australia/NSW"
	ReportScheduleRestApiPostTimezoneAustraliaNorth                 ReportScheduleRestApiPostTimezone = "Australia/North"
	ReportScheduleRestApiPostTimezoneAustraliaPerth                 ReportScheduleRestApiPostTimezone = "Australia/Perth"
	ReportScheduleRestApiPostTimezoneAustraliaQueensland            ReportScheduleRestApiPostTimezone = "Australia/Queensland"
	ReportScheduleRestApiPostTimezoneAustraliaSouth                 ReportScheduleRestApiPostTimezone = "Australia/South"
	ReportScheduleRestApiPostTimezoneAustraliaSydney                ReportScheduleRestApiPostTimezone = "Australia/Sydney"
	ReportScheduleRestApiPostTimezoneAustraliaTasmania              ReportScheduleRestApiPostTimezone = "Australia/Tasmania"
	ReportScheduleRestApiPostTimezoneAustraliaVictoria              ReportScheduleRestApiPostTimezone = "Australia/Victoria"
	ReportScheduleRestApiPostTimezoneAustraliaWest                  ReportScheduleRestApiPostTimezone = "Australia/West"
	ReportScheduleRestApiPostTimezoneAustraliaYancowinna            ReportScheduleRestApiPostTimezone = "Australia/Yancowinna"
	ReportScheduleRestApiPostTimezoneBrazilAcre                     ReportScheduleRestApiPostTimezone = "Brazil/Acre"
	ReportScheduleRestApiPostTimezoneBrazilDeNoronha                ReportScheduleRestApiPostTimezone = "Brazil/DeNoronha"
	ReportScheduleRestApiPostTimezoneBrazilEast                     ReportScheduleRestApiPostTimezone = "Brazil/East"
	ReportScheduleRestApiPostTimezoneBrazilWest                     ReportScheduleRestApiPostTimezone = "Brazil/West"
	ReportScheduleRestApiPostTimezoneCET                            ReportScheduleRestApiPostTimezone = "CET"
	ReportScheduleRestApiPostTimezoneCST6CDT                        ReportScheduleRestApiPostTimezone = "CST6CDT"
	ReportScheduleRestApiPostTimezoneCanadaAtlantic                 ReportScheduleRestApiPostTimezone = "Canada/Atlantic"
	ReportScheduleRestApiPostTimezoneCanadaCentral                  ReportScheduleRestApiPostTimezone = "Canada/Central"
	ReportScheduleRestApiPostTimezoneCanadaEastern                  ReportScheduleRestApiPostTimezone = "Canada/Eastern"
	ReportScheduleRestApiPostTimezoneCanadaMountain                 ReportScheduleRestApiPostTimezone = "Canada/Mountain"
	ReportScheduleRestApiPostTimezoneCanadaNewfoundland             ReportScheduleRestApiPostTimezone = "Canada/Newfoundland"
	ReportScheduleRestApiPostTimezoneCanadaPacific                  ReportScheduleRestApiPostTimezone = "Canada/Pacific"
	ReportScheduleRestApiPostTimezoneCanadaSaskatchewan             ReportScheduleRestApiPostTimezone = "Canada/Saskatchewan"
	ReportScheduleRestApiPostTimezoneCanadaYukon                    ReportScheduleRestApiPostTimezone = "Canada/Yukon"
	ReportScheduleRestApiPostTimezoneChileContinental               ReportScheduleRestApiPostTimezone = "Chile/Continental"
	ReportScheduleRestApiPostTimezoneChileEasterIsland              ReportScheduleRestApiPostTimezone = "Chile/EasterIsland"
	ReportScheduleRestApiPostTimezoneCuba                           ReportScheduleRestApiPostTimezone = "Cuba"
	ReportScheduleRestApiPostTimezoneEET                            ReportScheduleRestApiPostTimezone = "EET"
	ReportScheduleRestApiPostTimezoneEST                            ReportScheduleRestApiPostTimezone = "EST"
	ReportScheduleRestApiPostTimezoneEST5EDT                        ReportScheduleRestApiPostTimezone = "EST5EDT"
	ReportScheduleRestApiPostTimezoneEgypt                          ReportScheduleRestApiPostTimezone = "Egypt"
	ReportScheduleRestApiPostTimezoneEire                           ReportScheduleRestApiPostTimezone = "Eire"
	ReportScheduleRestApiPostTimezoneEtcGMT                         ReportScheduleRestApiPostTimezone = "Etc/GMT"
	ReportScheduleRestApiPostTimezoneEtcGMT0                        ReportScheduleRestApiPostTimezone = "Etc/GMT+0"
	ReportScheduleRestApiPostTimezoneEtcGMT01                       ReportScheduleRestApiPostTimezone = "Etc/GMT-0"
	ReportScheduleRestApiPostTimezoneEtcGMT02                       ReportScheduleRestApiPostTimezone = "Etc/GMT0"
	ReportScheduleRestApiPostTimezoneEtcGMT1                        ReportScheduleRestApiPostTimezone = "Etc/GMT+1"
	ReportScheduleRestApiPostTimezoneEtcGMT10                       ReportScheduleRestApiPostTimezone = "Etc/GMT+10"
	ReportScheduleRestApiPostTimezoneEtcGMT101                      ReportScheduleRestApiPostTimezone = "Etc/GMT-10"
	ReportScheduleRestApiPostTimezoneEtcGMT11                       ReportScheduleRestApiPostTimezone = "Etc/GMT-1"
	ReportScheduleRestApiPostTimezoneEtcGMT111                      ReportScheduleRestApiPostTimezone = "Etc/GMT-11"
	ReportScheduleRestApiPostTimezoneEtcGMT12                       ReportScheduleRestApiPostTimezone = "Etc/GMT+12"
	ReportScheduleRestApiPostTimezoneEtcGMT121                      ReportScheduleRestApiPostTimezone = "Etc/GMT-12"
	ReportScheduleRestApiPostTimezoneEtcGMT13                       ReportScheduleRestApiPostTimezone = "Etc/GMT-13"
	ReportScheduleRestApiPostTimezoneEtcGMT14                       ReportScheduleRestApiPostTimezone = "Etc/GMT-14"
	ReportScheduleRestApiPostTimezoneEtcGMT2                        ReportScheduleRestApiPostTimezone = "Etc/GMT+2"
	ReportScheduleRestApiPostTimezoneEtcGMT21                       ReportScheduleRestApiPostTimezone = "Etc/GMT-2"
	ReportScheduleRestApiPostTimezoneEtcGMT3                        ReportScheduleRestApiPostTimezone = "Etc/GMT+3"
	ReportScheduleRestApiPostTimezoneEtcGMT31                       ReportScheduleRestApiPostTimezone = "Etc/GMT-3"
	ReportScheduleRestApiPostTimezoneEtcGMT4                        ReportScheduleRestApiPostTimezone = "Etc/GMT+4"
	ReportScheduleRestApiPostTimezoneEtcGMT41                       ReportScheduleRestApiPostTimezone = "Etc/GMT-4"
	ReportScheduleRestApiPostTimezoneEtcGMT5                        ReportScheduleRestApiPostTimezone = "Etc/GMT+5"
	ReportScheduleRestApiPostTimezoneEtcGMT51                       ReportScheduleRestApiPostTimezone = "Etc/GMT-5"
	ReportScheduleRestApiPostTimezoneEtcGMT6                        ReportScheduleRestApiPostTimezone = "Etc/GMT+6"
	ReportScheduleRestApiPostTimezoneEtcGMT61                       ReportScheduleRestApiPostTimezone = "Etc/GMT-6"
	ReportScheduleRestApiPostTimezoneEtcGMT7                        ReportScheduleRestApiPostTimezone = "Etc/GMT+7"
	ReportScheduleRestApiPostTimezoneEtcGMT71                       ReportScheduleRestApiPostTimezone = "Etc/GMT-7"
	ReportScheduleRestApiPostTimezoneEtcGMT8                        ReportScheduleRestApiPostTimezone = "Etc/GMT+8"
	ReportScheduleRestApiPostTimezoneEtcGMT81                       ReportScheduleRestApiPostTimezone = "Etc/GMT-8"
	ReportScheduleRestApiPostTimezoneEtcGMT9                        ReportScheduleRestApiPostTimezone = "Etc/GMT+9"
	ReportScheduleRestApiPostTimezoneEtcGMT91                       ReportScheduleRestApiPostTimezone = "Etc/GMT-9"
	ReportScheduleRestApiPostTimezoneEtcGreenwich                   ReportScheduleRestApiPostTimezone = "Etc/Greenwich"
	ReportScheduleRestApiPostTimezoneEtcUCT                         ReportScheduleRestApiPostTimezone = "Etc/UCT"
	ReportScheduleRestApiPostTimezoneEtcUTC                         ReportScheduleRestApiPostTimezone = "Etc/UTC"
	ReportScheduleRestApiPostTimezoneEtcUniversal                   ReportScheduleRestApiPostTimezone = "Etc/Universal"
	ReportScheduleRestApiPostTimezoneEtcZulu                        ReportScheduleRestApiPostTimezone = "Etc/Zulu"
	ReportScheduleRestApiPostTimezoneEuropeAmsterdam                ReportScheduleRestApiPostTimezone = "Europe/Amsterdam"
	ReportScheduleRestApiPostTimezoneEuropeAndorra                  ReportScheduleRestApiPostTimezone = "Europe/Andorra"
	ReportScheduleRestApiPostTimezoneEuropeAstrakhan                ReportScheduleRestApiPostTimezone = "Europe/Astrakhan"
	ReportScheduleRestApiPostTimezoneEuropeAthens                   ReportScheduleRestApiPostTimezone = "Europe/Athens"
	ReportScheduleRestApiPostTimezoneEuropeBelfast                  ReportScheduleRestApiPostTimezone = "Europe/Belfast"
	ReportScheduleRestApiPostTimezoneEuropeBelgrade                 ReportScheduleRestApiPostTimezone = "Europe/Belgrade"
	ReportScheduleRestApiPostTimezoneEuropeBerlin                   ReportScheduleRestApiPostTimezone = "Europe/Berlin"
	ReportScheduleRestApiPostTimezoneEuropeBratislava               ReportScheduleRestApiPostTimezone = "Europe/Bratislava"
	ReportScheduleRestApiPostTimezoneEuropeBrussels                 ReportScheduleRestApiPostTimezone = "Europe/Brussels"
	ReportScheduleRestApiPostTimezoneEuropeBucharest                ReportScheduleRestApiPostTimezone = "Europe/Bucharest"
	ReportScheduleRestApiPostTimezoneEuropeBudapest                 ReportScheduleRestApiPostTimezone = "Europe/Budapest"
	ReportScheduleRestApiPostTimezoneEuropeBusingen                 ReportScheduleRestApiPostTimezone = "Europe/Busingen"
	ReportScheduleRestApiPostTimezoneEuropeChisinau                 ReportScheduleRestApiPostTimezone = "Europe/Chisinau"
	ReportScheduleRestApiPostTimezoneEuropeCopenhagen               ReportScheduleRestApiPostTimezone = "Europe/Copenhagen"
	ReportScheduleRestApiPostTimezoneEuropeDublin                   ReportScheduleRestApiPostTimezone = "Europe/Dublin"
	ReportScheduleRestApiPostTimezoneEuropeGibraltar                ReportScheduleRestApiPostTimezone = "Europe/Gibraltar"
	ReportScheduleRestApiPostTimezoneEuropeGuernsey                 ReportScheduleRestApiPostTimezone = "Europe/Guernsey"
	ReportScheduleRestApiPostTimezoneEuropeHelsinki                 ReportScheduleRestApiPostTimezone = "Europe/Helsinki"
	ReportScheduleRestApiPostTimezoneEuropeIsleOfMan                ReportScheduleRestApiPostTimezone = "Europe/Isle_of_Man"
	ReportScheduleRestApiPostTimezoneEuropeIstanbul                 ReportScheduleRestApiPostTimezone = "Europe/Istanbul"
	ReportScheduleRestApiPostTimezoneEuropeJersey                   ReportScheduleRestApiPostTimezone = "Europe/Jersey"
	ReportScheduleRestApiPostTimezoneEuropeKaliningrad              ReportScheduleRestApiPostTimezone = "Europe/Kaliningrad"
	ReportScheduleRestApiPostTimezoneEuropeKiev                     ReportScheduleRestApiPostTimezone = "Europe/Kiev"
	ReportScheduleRestApiPostTimezoneEuropeKirov                    ReportScheduleRestApiPostTimezone = "Europe/Kirov"
	ReportScheduleRestApiPostTimezoneEuropeLisbon                   ReportScheduleRestApiPostTimezone = "Europe/Lisbon"
	ReportScheduleRestApiPostTimezoneEuropeLjubljana                ReportScheduleRestApiPostTimezone = "Europe/Ljubljana"
	ReportScheduleRestApiPostTimezoneEuropeLondon                   ReportScheduleRestApiPostTimezone = "Europe/London"
	ReportScheduleRestApiPostTimezoneEuropeLuxembourg               ReportScheduleRestApiPostTimezone = "Europe/Luxembourg"
	ReportScheduleRestApiPostTimezoneEuropeMadrid                   ReportScheduleRestApiPostTimezone = "Europe/Madrid"
	ReportScheduleRestApiPostTimezoneEuropeMalta                    ReportScheduleRestApiPostTimezone = "Europe/Malta"
	ReportScheduleRestApiPostTimezoneEuropeMariehamn                ReportScheduleRestApiPostTimezone = "Europe/Mariehamn"
	ReportScheduleRestApiPostTimezoneEuropeMinsk                    ReportScheduleRestApiPostTimezone = "Europe/Minsk"
	ReportScheduleRestApiPostTimezoneEuropeMonaco                   ReportScheduleRestApiPostTimezone = "Europe/Monaco"
	ReportScheduleRestApiPostTimezoneEuropeMoscow                   ReportScheduleRestApiPostTimezone = "Europe/Moscow"
	ReportScheduleRestApiPostTimezoneEuropeNicosia                  ReportScheduleRestApiPostTimezone = "Europe/Nicosia"
	ReportScheduleRestApiPostTimezoneEuropeOslo                     ReportScheduleRestApiPostTimezone = "Europe/Oslo"
	ReportScheduleRestApiPostTimezoneEuropeParis                    ReportScheduleRestApiPostTimezone = "Europe/Paris"
	ReportScheduleRestApiPostTimezoneEuropePodgorica                ReportScheduleRestApiPostTimezone = "Europe/Podgorica"
	ReportScheduleRestApiPostTimezoneEuropePrague                   ReportScheduleRestApiPostTimezone = "Europe/Prague"
	ReportScheduleRestApiPostTimezoneEuropeRiga                     ReportScheduleRestApiPostTimezone = "Europe/Riga"
	ReportScheduleRestApiPostTimezoneEuropeRome                     ReportScheduleRestApiPostTimezone = "Europe/Rome"
	ReportScheduleRestApiPostTimezoneEuropeSamara                   ReportScheduleRestApiPostTimezone = "Europe/Samara"
	ReportScheduleRestApiPostTimezoneEuropeSanMarino                ReportScheduleRestApiPostTimezone = "Europe/San_Marino"
	ReportScheduleRestApiPostTimezoneEuropeSarajevo                 ReportScheduleRestApiPostTimezone = "Europe/Sarajevo"
	ReportScheduleRestApiPostTimezoneEuropeSaratov                  ReportScheduleRestApiPostTimezone = "Europe/Saratov"
	ReportScheduleRestApiPostTimezoneEuropeSimferopol               ReportScheduleRestApiPostTimezone = "Europe/Simferopol"
	ReportScheduleRestApiPostTimezoneEuropeSkopje                   ReportScheduleRestApiPostTimezone = "Europe/Skopje"
	ReportScheduleRestApiPostTimezoneEuropeSofia                    ReportScheduleRestApiPostTimezone = "Europe/Sofia"
	ReportScheduleRestApiPostTimezoneEuropeStockholm                ReportScheduleRestApiPostTimezone = "Europe/Stockholm"
	ReportScheduleRestApiPostTimezoneEuropeTallinn                  ReportScheduleRestApiPostTimezone = "Europe/Tallinn"
	ReportScheduleRestApiPostTimezoneEuropeTirane                   ReportScheduleRestApiPostTimezone = "Europe/Tirane"
	ReportScheduleRestApiPostTimezoneEuropeTiraspol                 ReportScheduleRestApiPostTimezone = "Europe/Tiraspol"
	ReportScheduleRestApiPostTimezoneEuropeUlyanovsk                ReportScheduleRestApiPostTimezone = "Europe/Ulyanovsk"
	ReportScheduleRestApiPostTimezoneEuropeUzhgorod                 ReportScheduleRestApiPostTimezone = "Europe/Uzhgorod"
	ReportScheduleRestApiPostTimezoneEuropeVaduz                    ReportScheduleRestApiPostTimezone = "Europe/Vaduz"
	ReportScheduleRestApiPostTimezoneEuropeVatican                  ReportScheduleRestApiPostTimezone = "Europe/Vatican"
	ReportScheduleRestApiPostTimezoneEuropeVienna                   ReportScheduleRestApiPostTimezone = "Europe/Vienna"
	ReportScheduleRestApiPostTimezoneEuropeVilnius                  ReportScheduleRestApiPostTimezone = "Europe/Vilnius"
	ReportScheduleRestApiPostTimezoneEuropeVolgograd                ReportScheduleRestApiPostTimezone = "Europe/Volgograd"
	ReportScheduleRestApiPostTimezoneEuropeWarsaw                   ReportScheduleRestApiPostTimezone = "Europe/Warsaw"
	ReportScheduleRestApiPostTimezoneEuropeZagreb                   ReportScheduleRestApiPostTimezone = "Europe/Zagreb"
	ReportScheduleRestApiPostTimezoneEuropeZaporozhye               ReportScheduleRestApiPostTimezone = "Europe/Zaporozhye"
	ReportScheduleRestApiPostTimezoneEuropeZurich                   ReportScheduleRestApiPostTimezone = "Europe/Zurich"
	ReportScheduleRestApiPostTimezoneGB                             ReportScheduleRestApiPostTimezone = "GB"
	ReportScheduleRestApiPostTimezoneGBEire                         ReportScheduleRestApiPostTimezone = "GB-Eire"
	ReportScheduleRestApiPostTimezoneGMT                            ReportScheduleRestApiPostTimezone = "GMT"
	ReportScheduleRestApiPostTimezoneGMT0                           ReportScheduleRestApiPostTimezone = "GMT+0"
	ReportScheduleRestApiPostTimezoneGMT01                          ReportScheduleRestApiPostTimezone = "GMT-0"
	ReportScheduleRestApiPostTimezoneGMT02                          ReportScheduleRestApiPostTimezone = "GMT0"
	ReportScheduleRestApiPostTimezoneGreenwich                      ReportScheduleRestApiPostTimezone = "Greenwich"
	ReportScheduleRestApiPostTimezoneHST                            ReportScheduleRestApiPostTimezone = "HST"
	ReportScheduleRestApiPostTimezoneHongkong                       ReportScheduleRestApiPostTimezone = "Hongkong"
	ReportScheduleRestApiPostTimezoneIceland                        ReportScheduleRestApiPostTimezone = "Iceland"
	ReportScheduleRestApiPostTimezoneIndianAntananarivo             ReportScheduleRestApiPostTimezone = "Indian/Antananarivo"
	ReportScheduleRestApiPostTimezoneIndianChagos                   ReportScheduleRestApiPostTimezone = "Indian/Chagos"
	ReportScheduleRestApiPostTimezoneIndianChristmas                ReportScheduleRestApiPostTimezone = "Indian/Christmas"
	ReportScheduleRestApiPostTimezoneIndianCocos                    ReportScheduleRestApiPostTimezone = "Indian/Cocos"
	ReportScheduleRestApiPostTimezoneIndianComoro                   ReportScheduleRestApiPostTimezone = "Indian/Comoro"
	ReportScheduleRestApiPostTimezoneIndianKerguelen                ReportScheduleRestApiPostTimezone = "Indian/Kerguelen"
	ReportScheduleRestApiPostTimezoneIndianMahe                     ReportScheduleRestApiPostTimezone = "Indian/Mahe"
	ReportScheduleRestApiPostTimezoneIndianMaldives                 ReportScheduleRestApiPostTimezone = "Indian/Maldives"
	ReportScheduleRestApiPostTimezoneIndianMauritius                ReportScheduleRestApiPostTimezone = "Indian/Mauritius"
	ReportScheduleRestApiPostTimezoneIndianMayotte                  ReportScheduleRestApiPostTimezone = "Indian/Mayotte"
	ReportScheduleRestApiPostTimezoneIndianReunion                  ReportScheduleRestApiPostTimezone = "Indian/Reunion"
	ReportScheduleRestApiPostTimezoneIran                           ReportScheduleRestApiPostTimezone = "Iran"
	ReportScheduleRestApiPostTimezoneIsrael                         ReportScheduleRestApiPostTimezone = "Israel"
	ReportScheduleRestApiPostTimezoneJamaica                        ReportScheduleRestApiPostTimezone = "Jamaica"
	ReportScheduleRestApiPostTimezoneJapan                          ReportScheduleRestApiPostTimezone = "Japan"
	ReportScheduleRestApiPostTimezoneKwajalein                      ReportScheduleRestApiPostTimezone = "Kwajalein"
	ReportScheduleRestApiPostTimezoneLibya                          ReportScheduleRestApiPostTimezone = "Libya"
	ReportScheduleRestApiPostTimezoneMET                            ReportScheduleRestApiPostTimezone = "MET"
	ReportScheduleRestApiPostTimezoneMST                            ReportScheduleRestApiPostTimezone = "MST"
	ReportScheduleRestApiPostTimezoneMST7MDT                        ReportScheduleRestApiPostTimezone = "MST7MDT"
	ReportScheduleRestApiPostTimezoneMexicoBajaNorte                ReportScheduleRestApiPostTimezone = "Mexico/BajaNorte"
	ReportScheduleRestApiPostTimezoneMexicoBajaSur                  ReportScheduleRestApiPostTimezone = "Mexico/BajaSur"
	ReportScheduleRestApiPostTimezoneMexicoGeneral                  ReportScheduleRestApiPostTimezone = "Mexico/General"
	ReportScheduleRestApiPostTimezoneNZ                             ReportScheduleRestApiPostTimezone = "NZ"
	ReportScheduleRestApiPostTimezoneNZCHAT                         ReportScheduleRestApiPostTimezone = "NZ-CHAT"
	ReportScheduleRestApiPostTimezoneNavajo                         ReportScheduleRestApiPostTimezone = "Navajo"
	ReportScheduleRestApiPostTimezonePRC                            ReportScheduleRestApiPostTimezone = "PRC"
	ReportScheduleRestApiPostTimezonePST8PDT                        ReportScheduleRestApiPostTimezone = "PST8PDT"
	ReportScheduleRestApiPostTimezonePacificApia                    ReportScheduleRestApiPostTimezone = "Pacific/Apia"
	ReportScheduleRestApiPostTimezonePacificAuckland                ReportScheduleRestApiPostTimezone = "Pacific/Auckland"
	ReportScheduleRestApiPostTimezonePacificBougainville            ReportScheduleRestApiPostTimezone = "Pacific/Bougainville"
	ReportScheduleRestApiPostTimezonePacificChatham                 ReportScheduleRestApiPostTimezone = "Pacific/Chatham"
	ReportScheduleRestApiPostTimezonePacificChuuk                   ReportScheduleRestApiPostTimezone = "Pacific/Chuuk"
	ReportScheduleRestApiPostTimezonePacificEaster                  ReportScheduleRestApiPostTimezone = "Pacific/Easter"
	ReportScheduleRestApiPostTimezonePacificEfate                   ReportScheduleRestApiPostTimezone = "Pacific/Efate"
	ReportScheduleRestApiPostTimezonePacificEnderbury               ReportScheduleRestApiPostTimezone = "Pacific/Enderbury"
	ReportScheduleRestApiPostTimezonePacificFakaofo                 ReportScheduleRestApiPostTimezone = "Pacific/Fakaofo"
	ReportScheduleRestApiPostTimezonePacificFiji                    ReportScheduleRestApiPostTimezone = "Pacific/Fiji"
	ReportScheduleRestApiPostTimezonePacificFunafuti                ReportScheduleRestApiPostTimezone = "Pacific/Funafuti"
	ReportScheduleRestApiPostTimezonePacificGalapagos               ReportScheduleRestApiPostTimezone = "Pacific/Galapagos"
	ReportScheduleRestApiPostTimezonePacificGambier                 ReportScheduleRestApiPostTimezone = "Pacific/Gambier"
	ReportScheduleRestApiPostTimezonePacificGuadalcanal             ReportScheduleRestApiPostTimezone = "Pacific/Guadalcanal"
	ReportScheduleRestApiPostTimezonePacificGuam                    ReportScheduleRestApiPostTimezone = "Pacific/Guam"
	ReportScheduleRestApiPostTimezonePacificHonolulu                ReportScheduleRestApiPostTimezone = "Pacific/Honolulu"
	ReportScheduleRestApiPostTimezonePacificJohnston                ReportScheduleRestApiPostTimezone = "Pacific/Johnston"
	ReportScheduleRestApiPostTimezonePacificKanton                  ReportScheduleRestApiPostTimezone = "Pacific/Kanton"
	ReportScheduleRestApiPostTimezonePacificKiritimati              ReportScheduleRestApiPostTimezone = "Pacific/Kiritimati"
	ReportScheduleRestApiPostTimezonePacificKosrae                  ReportScheduleRestApiPostTimezone = "Pacific/Kosrae"
	ReportScheduleRestApiPostTimezonePacificKwajalein               ReportScheduleRestApiPostTimezone = "Pacific/Kwajalein"
	ReportScheduleRestApiPostTimezonePacificMajuro                  ReportScheduleRestApiPostTimezone = "Pacific/Majuro"
	ReportScheduleRestApiPostTimezonePacificMarquesas               ReportScheduleRestApiPostTimezone = "Pacific/Marquesas"
	ReportScheduleRestApiPostTimezonePacificMidway                  ReportScheduleRestApiPostTimezone = "Pacific/Midway"
	ReportScheduleRestApiPostTimezonePacificNauru                   ReportScheduleRestApiPostTimezone = "Pacific/Nauru"
	ReportScheduleRestApiPostTimezonePacificNiue                    ReportScheduleRestApiPostTimezone = "Pacific/Niue"
	ReportScheduleRestApiPostTimezonePacificNorfolk                 ReportScheduleRestApiPostTimezone = "Pacific/Norfolk"
	ReportScheduleRestApiPostTimezonePacificNoumea                  ReportScheduleRestApiPostTimezone = "Pacific/Noumea"
	ReportScheduleRestApiPostTimezonePacificPagoPago                ReportScheduleRestApiPostTimezone = "Pacific/Pago_Pago"
	ReportScheduleRestApiPostTimezonePacificPalau                   ReportScheduleRestApiPostTimezone = "Pacific/Palau"
	ReportScheduleRestApiPostTimezonePacificPitcairn                ReportScheduleRestApiPostTimezone = "Pacific/Pitcairn"
	ReportScheduleRestApiPostTimezonePacificPohnpei                 ReportScheduleRestApiPostTimezone = "Pacific/Pohnpei"
	ReportScheduleRestApiPostTimezonePacificPonape                  ReportScheduleRestApiPostTimezone = "Pacific/Ponape"
	ReportScheduleRestApiPostTimezonePacificPortMoresby             ReportScheduleRestApiPostTimezone = "Pacific/Port_Moresby"
	ReportScheduleRestApiPostTimezonePacificRarotonga               ReportScheduleRestApiPostTimezone = "Pacific/Rarotonga"
	ReportScheduleRestApiPostTimezonePacificSaipan                  ReportScheduleRestApiPostTimezone = "Pacific/Saipan"
	ReportScheduleRestApiPostTimezonePacificSamoa                   ReportScheduleRestApiPostTimezone = "Pacific/Samoa"
	ReportScheduleRestApiPostTimezonePacificTahiti                  ReportScheduleRestApiPostTimezone = "Pacific/Tahiti"
	ReportScheduleRestApiPostTimezonePacificTarawa                  ReportScheduleRestApiPostTimezone = "Pacific/Tarawa"
	ReportScheduleRestApiPostTimezonePacificTongatapu               ReportScheduleRestApiPostTimezone = "Pacific/Tongatapu"
	ReportScheduleRestApiPostTimezonePacificTruk                    ReportScheduleRestApiPostTimezone = "Pacific/Truk"
	ReportScheduleRestApiPostTimezonePacificWake                    ReportScheduleRestApiPostTimezone = "Pacific/Wake"
	ReportScheduleRestApiPostTimezonePacificWallis                  ReportScheduleRestApiPostTimezone = "Pacific/Wallis"
	ReportScheduleRestApiPostTimezonePacificYap                     ReportScheduleRestApiPostTimezone = "Pacific/Yap"
	ReportScheduleRestApiPostTimezonePoland                         ReportScheduleRestApiPostTimezone = "Poland"
	ReportScheduleRestApiPostTimezonePortugal                       ReportScheduleRestApiPostTimezone = "Portugal"
	ReportScheduleRestApiPostTimezoneROC                            ReportScheduleRestApiPostTimezone = "ROC"
	ReportScheduleRestApiPostTimezoneROK                            ReportScheduleRestApiPostTimezone = "ROK"
	ReportScheduleRestApiPostTimezoneSingapore                      ReportScheduleRestApiPostTimezone = "Singapore"
	ReportScheduleRestApiPostTimezoneTurkey                         ReportScheduleRestApiPostTimezone = "Turkey"
	ReportScheduleRestApiPostTimezoneUCT                            ReportScheduleRestApiPostTimezone = "UCT"
	ReportScheduleRestApiPostTimezoneUSAlaska                       ReportScheduleRestApiPostTimezone = "US/Alaska"
	ReportScheduleRestApiPostTimezoneUSAleutian                     ReportScheduleRestApiPostTimezone = "US/Aleutian"
	ReportScheduleRestApiPostTimezoneUSArizona                      ReportScheduleRestApiPostTimezone = "US/Arizona"
	ReportScheduleRestApiPostTimezoneUSCentral                      ReportScheduleRestApiPostTimezone = "US/Central"
	ReportScheduleRestApiPostTimezoneUSEastIndiana                  ReportScheduleRestApiPostTimezone = "US/East-Indiana"
	ReportScheduleRestApiPostTimezoneUSEastern                      ReportScheduleRestApiPostTimezone = "US/Eastern"
	ReportScheduleRestApiPostTimezoneUSHawaii                       ReportScheduleRestApiPostTimezone = "US/Hawaii"
	ReportScheduleRestApiPostTimezoneUSIndianaStarke                ReportScheduleRestApiPostTimezone = "US/Indiana-Starke"
	ReportScheduleRestApiPostTimezoneUSMichigan                     ReportScheduleRestApiPostTimezone = "US/Michigan"
	ReportScheduleRestApiPostTimezoneUSMountain                     ReportScheduleRestApiPostTimezone = "US/Mountain"
	ReportScheduleRestApiPostTimezoneUSPacific                      ReportScheduleRestApiPostTimezone = "US/Pacific"
	ReportScheduleRestApiPostTimezoneUSSamoa                        ReportScheduleRestApiPostTimezone = "US/Samoa"
	ReportScheduleRestApiPostTimezoneUTC                            ReportScheduleRestApiPostTimezone = "UTC"
	ReportScheduleRestApiPostTimezoneUniversal                      ReportScheduleRestApiPostTimezone = "Universal"
	ReportScheduleRestApiPostTimezoneWET                            ReportScheduleRestApiPostTimezone = "WET"
	ReportScheduleRestApiPostTimezoneWSU                            ReportScheduleRestApiPostTimezone = "W-SU"
	ReportScheduleRestApiPostTimezoneZulu                           ReportScheduleRestApiPostTimezone = "Zulu"
)

// Defines values for ReportScheduleRestApiPostType.
const (
	ReportScheduleRestApiPostTypeAlert  ReportScheduleRestApiPostType = "Alert"
	ReportScheduleRestApiPostTypeReport ReportScheduleRestApiPostType = "Report"
)

// Defines values for ReportScheduleRestApiPostValidatorType.
const (
	ReportScheduleRestApiPostValidatorTypeNotNull  ReportScheduleRestApiPostValidatorType = "not null"
	ReportScheduleRestApiPostValidatorTypeOperator ReportScheduleRestApiPostValidatorType = "operator"
)

// Defines values for ReportScheduleRestApiPutReportFormat.
const (
	ReportScheduleRestApiPutReportFormatCSV  ReportScheduleRestApiPutReportFormat = "CSV"
	ReportScheduleRestApiPutReportFormatPNG  ReportScheduleRestApiPutReportFormat = "PNG"
	ReportScheduleRestApiPutReportFormatTEXT ReportScheduleRestApiPutReportFormat = "TEXT"
)

// Defines values for ReportScheduleRestApiPutTimezone.
const (
	ReportScheduleRestApiPutTimezoneAfricaAbidjan                  ReportScheduleRestApiPutTimezone = "Africa/Abidjan"
	ReportScheduleRestApiPutTimezoneAfricaAccra                    ReportScheduleRestApiPutTimezone = "Africa/Accra"
	ReportScheduleRestApiPutTimezoneAfricaAddisAbaba               ReportScheduleRestApiPutTimezone = "Africa/Addis_Ababa"
	ReportScheduleRestApiPutTimezoneAfricaAlgiers                  ReportScheduleRestApiPutTimezone = "Africa/Algiers"
	ReportScheduleRestApiPutTimezoneAfricaAsmara                   ReportScheduleRestApiPutTimezone = "Africa/Asmara"
	ReportScheduleRestApiPutTimezoneAfricaAsmera                   ReportScheduleRestApiPutTimezone = "Africa/Asmera"
	ReportScheduleRestApiPutTimezoneAfricaBamako                   ReportScheduleRestApiPutTimezone = "Africa/Bamako"
	ReportScheduleRestApiPutTimezoneAfricaBangui                   ReportScheduleRestApiPutTimezone = "Africa/Bangui"
	ReportScheduleRestApiPutTimezoneAfricaBanjul                   ReportScheduleRestApiPutTimezone = "Africa/Banjul"
	ReportScheduleRestApiPutTimezoneAfricaBissau                   ReportScheduleRestApiPutTimezone = "Africa/Bissau"
	ReportScheduleRestApiPutTimezoneAfricaBlantyre                 ReportScheduleRestApiPutTimezone = "Africa/Blantyre"
	ReportScheduleRestApiPutTimezoneAfricaBrazzaville              ReportScheduleRestApiPutTimezone = "Africa/Brazzaville"
	ReportScheduleRestApiPutTimezoneAfricaBujumbura                ReportScheduleRestApiPutTimezone = "Africa/Bujumbura"
	ReportScheduleRestApiPutTimezoneAfricaCairo                    ReportScheduleRestApiPutTimezone = "Africa/Cairo"
	ReportScheduleRestApiPutTimezoneAfricaCasablanca               ReportScheduleRestApiPutTimezone = "Africa/Casablanca"
	ReportScheduleRestApiPutTimezoneAfricaCeuta                    ReportScheduleRestApiPutTimezone = "Africa/Ceuta"
	ReportScheduleRestApiPutTimezoneAfricaConakry                  ReportScheduleRestApiPutTimezone = "Africa/Conakry"
	ReportScheduleRestApiPutTimezoneAfricaDakar                    ReportScheduleRestApiPutTimezone = "Africa/Dakar"
	ReportScheduleRestApiPutTimezoneAfricaDarEsSalaam              ReportScheduleRestApiPutTimezone = "Africa/Dar_es_Salaam"
	ReportScheduleRestApiPutTimezoneAfricaDjibouti                 ReportScheduleRestApiPutTimezone = "Africa/Djibouti"
	ReportScheduleRestApiPutTimezoneAfricaDouala                   ReportScheduleRestApiPutTimezone = "Africa/Douala"
	ReportScheduleRestApiPutTimezoneAfricaElAaiun                  ReportScheduleRestApiPutTimezone = "Africa/El_Aaiun"
	ReportScheduleRestApiPutTimezoneAfricaFreetown                 ReportScheduleRestApiPutTimezone = "Africa/Freetown"
	ReportScheduleRestApiPutTimezoneAfricaGaborone                 ReportScheduleRestApiPutTimezone = "Africa/Gaborone"
	ReportScheduleRestApiPutTimezoneAfricaHarare                   ReportScheduleRestApiPutTimezone = "Africa/Harare"
	ReportScheduleRestApiPutTimezoneAfricaJohannesburg             ReportScheduleRestApiPutTimezone = "Africa/Johannesburg"
	ReportScheduleRestApiPutTimezoneAfricaJuba                     ReportScheduleRestApiPutTimezone = "Africa/Juba"
	ReportScheduleRestApiPutTimezoneAfricaKampala                  ReportScheduleRestApiPutTimezone = "Africa/Kampala"
	ReportScheduleRestApiPutTimezoneAfricaKhartoum                 ReportScheduleRestApiPutTimezone = "Africa/Khartoum"
	ReportScheduleRestApiPutTimezoneAfricaKigali                   ReportScheduleRestApiPutTimezone = "Africa/Kigali"
	ReportScheduleRestApiPutTimezoneAfricaKinshasa                 ReportScheduleRestApiPutTimezone = "Africa/Kinshasa"
	ReportScheduleRestApiPutTimezoneAfricaLagos                    ReportScheduleRestApiPutTimezone = "Africa/Lagos"
	ReportScheduleRestApiPutTimezoneAfricaLibreville               ReportScheduleRestApiPutTimezone = "Africa/Libreville"
	ReportScheduleRestApiPutTimezoneAfricaLome                     ReportScheduleRestApiPutTimezone = "Africa/Lome"
	ReportScheduleRestApiPutTimezoneAfricaLuanda                   ReportScheduleRestApiPutTimezone = "Africa/Luanda"
	ReportScheduleRestApiPutTimezoneAfricaLubumbashi               ReportScheduleRestApiPutTimezone = "Africa/Lubumbashi"
	ReportScheduleRestApiPutTimezoneAfricaLusaka                   ReportScheduleRestApiPutTimezone = "Africa/Lusaka"
	ReportScheduleRestApiPutTimezoneAfricaMalabo                   ReportScheduleRestApiPutTimezone = "Africa/Malabo"
	ReportScheduleRestApiPutTimezoneAfricaMaputo                   ReportScheduleRestApiPutTimezone = "Africa/Maputo"
	ReportScheduleRestApiPutTimezoneAfricaMaseru                   ReportScheduleRestApiPutTimezone = "Africa/Maseru"
	ReportScheduleRestApiPutTimezoneAfricaMbabane                  ReportScheduleRestApiPutTimezone = "Africa/Mbabane"
	ReportScheduleRestApiPutTimezoneAfricaMogadishu                ReportScheduleRestApiPutTimezone = "Africa/Mogadishu"
	ReportScheduleRestApiPutTimezoneAfricaMonrovia                 ReportScheduleRestApiPutTimezone = "Africa/Monrovia"
	ReportScheduleRestApiPutTimezoneAfricaNairobi                  ReportScheduleRestApiPutTimezone = "Africa/Nairobi"
	ReportScheduleRestApiPutTimezoneAfricaNdjamena                 ReportScheduleRestApiPutTimezone = "Africa/Ndjamena"
	ReportScheduleRestApiPutTimezoneAfricaNiamey                   ReportScheduleRestApiPutTimezone = "Africa/Niamey"
	ReportScheduleRestApiPutTimezoneAfricaNouakchott               ReportScheduleRestApiPutTimezone = "Africa/Nouakchott"
	ReportScheduleRestApiPutTimezoneAfricaOuagadougou              ReportScheduleRestApiPutTimezone = "Africa/Ouagadougou"
	ReportScheduleRestApiPutTimezoneAfricaPortoNovo                ReportScheduleRestApiPutTimezone = "Africa/Porto-Novo"
	ReportScheduleRestApiPutTimezoneAfricaSaoTome                  ReportScheduleRestApiPutTimezone = "Africa/Sao_Tome"
	ReportScheduleRestApiPutTimezoneAfricaTimbuktu                 ReportScheduleRestApiPutTimezone = "Africa/Timbuktu"
	ReportScheduleRestApiPutTimezoneAfricaTripoli                  ReportScheduleRestApiPutTimezone = "Africa/Tripoli"
	ReportScheduleRestApiPutTimezoneAfricaTunis                    ReportScheduleRestApiPutTimezone = "Africa/Tunis"
	ReportScheduleRestApiPutTimezoneAfricaWindhoek                 ReportScheduleRestApiPutTimezone = "Africa/Windhoek"
	ReportScheduleRestApiPutTimezoneAmericaAdak                    ReportScheduleRestApiPutTimezone = "America/Adak"
	ReportScheduleRestApiPutTimezoneAmericaAnchorage               ReportScheduleRestApiPutTimezone = "America/Anchorage"
	ReportScheduleRestApiPutTimezoneAmericaAnguilla                ReportScheduleRestApiPutTimezone = "America/Anguilla"
	ReportScheduleRestApiPutTimezoneAmericaAntigua                 ReportScheduleRestApiPutTimezone = "America/Antigua"
	ReportScheduleRestApiPutTimezoneAmericaAraguaina               ReportScheduleRestApiPutTimezone = "America/Araguaina"
	ReportScheduleRestApiPutTimezoneAmericaArgentinaBuenosAires    ReportScheduleRestApiPutTimezone = "America/Argentina/Buenos_Aires"
	ReportScheduleRestApiPutTimezoneAmericaArgentinaCatamarca      ReportScheduleRestApiPutTimezone = "America/Argentina/Catamarca"
	ReportScheduleRestApiPutTimezoneAmericaArgentinaComodRivadavia ReportScheduleRestApiPutTimezone = "America/Argentina/ComodRivadavia"
	ReportScheduleRestApiPutTimezoneAmericaArgentinaCordoba        ReportScheduleRestApiPutTimezone = "America/Argentina/Cordoba"
	ReportScheduleRestApiPutTimezoneAmericaArgentinaJujuy          ReportScheduleRestApiPutTimezone = "America/Argentina/Jujuy"
	ReportScheduleRestApiPutTimezoneAmericaArgentinaLaRioja        ReportScheduleRestApiPutTimezone = "America/Argentina/La_Rioja"
	ReportScheduleRestApiPutTimezoneAmericaArgentinaMendoza        ReportScheduleRestApiPutTimezone = "America/Argentina/Mendoza"
	ReportScheduleRestApiPutTimezoneAmericaArgentinaRioGallegos    ReportScheduleRestApiPutTimezone = "America/Argentina/Rio_Gallegos"
	ReportScheduleRestApiPutTimezoneAmericaArgentinaSalta          ReportScheduleRestApiPutTimezone = "America/Argentina/Salta"
	ReportScheduleRestApiPutTimezoneAmericaArgentinaSanJuan        ReportScheduleRestApiPutTimezone = "America/Argentina/San_Juan"
	ReportScheduleRestApiPutTimezoneAmericaArgentinaSanLuis        ReportScheduleRestApiPutTimezone = "America/Argentina/San_Luis"
	ReportScheduleRestApiPutTimezoneAmericaArgentinaTucuman        ReportScheduleRestApiPutTimezone = "America/Argentina/Tucuman"
	ReportScheduleRestApiPutTimezoneAmericaArgentinaUshuaia        ReportScheduleRestApiPutTimezone = "America/Argentina/Ushuaia"
	ReportScheduleRestApiPutTimezoneAmericaAruba                   ReportScheduleRestApiPutTimezone = "America/Aruba"
	ReportScheduleRestApiPutTimezoneAmericaAsuncion                ReportScheduleRestApiPutTimezone = "America/Asuncion"
	ReportScheduleRestApiPutTimezoneAmericaAtikokan                ReportScheduleRestApiPutTimezone = "America/Atikokan"
	ReportScheduleRestApiPutTimezoneAmericaAtka                    ReportScheduleRestApiPutTimezone = "America/Atka"
	ReportScheduleRestApiPutTimezoneAmericaBahia                   ReportScheduleRestApiPutTimezone = "America/Bahia"
	ReportScheduleRestApiPutTimezoneAmericaBahiaBanderas           ReportScheduleRestApiPutTimezone = "America/Bahia_Banderas"
	ReportScheduleRestApiPutTimezoneAmericaBarbados                ReportScheduleRestApiPutTimezone = "America/Barbados"
	ReportScheduleRestApiPutTimezoneAmericaBelem                   ReportScheduleRestApiPutTimezone = "America/Belem"
	ReportScheduleRestApiPutTimezoneAmericaBelize                  ReportScheduleRestApiPutTimezone = "America/Belize"
	ReportScheduleRestApiPutTimezoneAmericaBlancSablon             ReportScheduleRestApiPutTimezone = "America/Blanc-Sablon"
	ReportScheduleRestApiPutTimezoneAmericaBoaVista                ReportScheduleRestApiPutTimezone = "America/Boa_Vista"
	ReportScheduleRestApiPutTimezoneAmericaBogota                  ReportScheduleRestApiPutTimezone = "America/Bogota"
	ReportScheduleRestApiPutTimezoneAmericaBoise                   ReportScheduleRestApiPutTimezone = "America/Boise"
	ReportScheduleRestApiPutTimezoneAmericaBuenosAires             ReportScheduleRestApiPutTimezone = "America/Buenos_Aires"
	ReportScheduleRestApiPutTimezoneAmericaCambridgeBay            ReportScheduleRestApiPutTimezone = "America/Cambridge_Bay"
	ReportScheduleRestApiPutTimezoneAmericaCampoGrande             ReportScheduleRestApiPutTimezone = "America/Campo_Grande"
	ReportScheduleRestApiPutTimezoneAmericaCancun                  ReportScheduleRestApiPutTimezone = "America/Cancun"
	ReportScheduleRestApiPutTimezoneAmericaCaracas                 ReportScheduleRestApiPutTimezone = "America/Caracas"
	ReportScheduleRestApiPutTimezoneAmericaCatamarca               ReportScheduleRestApiPutTimezone = "America/Catamarca"
	ReportScheduleRestApiPutTimezoneAmericaCayenne                 ReportScheduleRestApiPutTimezone = "America/Cayenne"
	ReportScheduleRestApiPutTimezoneAmericaCayman                  ReportScheduleRestApiPutTimezone = "America/Cayman"
	ReportScheduleRestApiPutTimezoneAmericaChicago                 ReportScheduleRestApiPutTimezone = "America/Chicago"
	ReportScheduleRestApiPutTimezoneAmericaChihuahua               ReportScheduleRestApiPutTimezone = "America/Chihuahua"
	ReportScheduleRestApiPutTimezoneAmericaCoralHarbour            ReportScheduleRestApiPutTimezone = "America/Coral_Harbour"
	ReportScheduleRestApiPutTimezoneAmericaCordoba                 ReportScheduleRestApiPutTimezone = "America/Cordoba"
	ReportScheduleRestApiPutTimezoneAmericaCostaRica               ReportScheduleRestApiPutTimezone = "America/Costa_Rica"
	ReportScheduleRestApiPutTimezoneAmericaCreston                 ReportScheduleRestApiPutTimezone = "America/Creston"
	ReportScheduleRestApiPutTimezoneAmericaCuiaba                  ReportScheduleRestApiPutTimezone = "America/Cuiaba"
	ReportScheduleRestApiPutTimezoneAmericaCuracao                 ReportScheduleRestApiPutTimezone = "America/Curacao"
	ReportScheduleRestApiPutTimezoneAmericaDanmarkshavn            ReportScheduleRestApiPutTimezone = "America/Danmarkshavn"
	ReportScheduleRestApiPutTimezoneAmericaDawson                  ReportScheduleRestApiPutTimezone = "America/Dawson"
	ReportScheduleRestApiPutTimezoneAmericaDawsonCreek             ReportScheduleRestApiPutTimezone = "America/Dawson_Creek"
	ReportScheduleRestApiPutTimezoneAmericaDenver                  ReportScheduleRestApiPutTimezone = "America/Denver"
	ReportScheduleRestApiPutTimezoneAmericaDetroit                 ReportScheduleRestApiPutTimezone = "America/Detroit"
	ReportScheduleRestApiPutTimezoneAmericaDominica                ReportScheduleRestApiPutTimezone = "America/Dominica"
	ReportScheduleRestApiPutTimezoneAmericaEdmonton                ReportScheduleRestApiPutTimezone = "America/Edmonton"
	ReportScheduleRestApiPutTimezoneAmericaEirunepe                ReportScheduleRestApiPutTimezone = "America/Eirunepe"
	ReportScheduleRestApiPutTimezoneAmericaElSalvador              ReportScheduleRestApiPutTimezone = "America/El_Salvador"
	ReportScheduleRestApiPutTimezoneAmericaEnsenada                ReportScheduleRestApiPutTimezone = "America/Ensenada"
	ReportScheduleRestApiPutTimezoneAmericaFortNelson              ReportScheduleRestApiPutTimezone = "America/Fort_Nelson"
	ReportScheduleRestApiPutTimezoneAmericaFortWayne               ReportScheduleRestApiPutTimezone = "America/Fort_Wayne"
	ReportScheduleRestApiPutTimezoneAmericaFortaleza               ReportScheduleRestApiPutTimezone = "America/Fortaleza"
	ReportScheduleRestApiPutTimezoneAmericaGlaceBay                ReportScheduleRestApiPutTimezone = "America/Glace_Bay"
	ReportScheduleRestApiPutTimezoneAmericaGodthab                 ReportScheduleRestApiPutTimezone = "America/Godthab"
	ReportScheduleRestApiPutTimezoneAmericaGooseBay                ReportScheduleRestApiPutTimezone = "America/Goose_Bay"
	ReportScheduleRestApiPutTimezoneAmericaGrandTurk               ReportScheduleRestApiPutTimezone = "America/Grand_Turk"
	ReportScheduleRestApiPutTimezoneAmericaGrenada                 ReportScheduleRestApiPutTimezone = "America/Grenada"
	ReportScheduleRestApiPutTimezoneAmericaGuadeloupe              ReportScheduleRestApiPutTimezone = "America/Guadeloupe"
	ReportScheduleRestApiPutTimezoneAmericaGuatemala               ReportScheduleRestApiPutTimezone = "America/Guatemala"
	ReportScheduleRestApiPutTimezoneAmericaGuayaquil               ReportScheduleRestApiPutTimezone = "America/Guayaquil"
	ReportScheduleRestApiPutTimezoneAmericaGuyana                  ReportScheduleRestApiPutTimezone = "America/Guyana"
	ReportScheduleRestApiPutTimezoneAmericaHalifax                 ReportScheduleRestApiPutTimezone = "America/Halifax"
	ReportScheduleRestApiPutTimezoneAmericaHavana                  ReportScheduleRestApiPutTimezone = "America/Havana"
	ReportScheduleRestApiPutTimezoneAmericaHermosillo              ReportScheduleRestApiPutTimezone = "America/Hermosillo"
	ReportScheduleRestApiPutTimezoneAmericaIndianaIndianapolis     ReportScheduleRestApiPutTimezone = "America/Indiana/Indianapolis"
	ReportScheduleRestApiPutTimezoneAmericaIndianaKnox             ReportScheduleRestApiPutTimezone = "America/Indiana/Knox"
	ReportScheduleRestApiPutTimezoneAmericaIndianaMarengo          ReportScheduleRestApiPutTimezone = "America/Indiana/Marengo"
	ReportScheduleRestApiPutTimezoneAmericaIndianaPetersburg       ReportScheduleRestApiPutTimezone = "America/Indiana/Petersburg"
	ReportScheduleRestApiPutTimezoneAmericaIndianaTellCity         ReportScheduleRestApiPutTimezone = "America/Indiana/Tell_City"
	ReportScheduleRestApiPutTimezoneAmericaIndianaVevay            ReportScheduleRestApiPutTimezone = "America/Indiana/Vevay"
	ReportScheduleRestApiPutTimezoneAmericaIndianaVincennes        ReportScheduleRestApiPutTimezone = "America/Indiana/Vincennes"
	ReportScheduleRestApiPutTimezoneAmericaIndianaWinamac          ReportScheduleRestApiPutTimezone = "America/Indiana/Winamac"
	ReportScheduleRestApiPutTimezoneAmericaIndianapolis            ReportScheduleRestApiPutTimezone = "America/Indianapolis"
	ReportScheduleRestApiPutTimezoneAmericaInuvik                  ReportScheduleRestApiPutTimezone = "America/Inuvik"
	ReportScheduleRestApiPutTimezoneAmericaIqaluit                 ReportScheduleRestApiPutTimezone = "America/Iqaluit"
	ReportScheduleRestApiPutTimezoneAmericaJamaica                 ReportScheduleRestApiPutTimezone = "America/Jamaica"
	ReportScheduleRestApiPutTimezoneAmericaJujuy                   ReportScheduleRestApiPutTimezone = "America/Jujuy"
	ReportScheduleRestApiPutTimezoneAmericaJuneau                  ReportScheduleRestApiPutTimezone = "America/Juneau"
	ReportScheduleRestApiPutTimezoneAmericaKentuckyLouisville      ReportScheduleRestApiPutTimezone = "America/Kentucky/Louisville"
	ReportScheduleRestApiPutTimezoneAmericaKentuckyMonticello      ReportScheduleRestApiPutTimezone = "America/Kentucky/Monticello"
	ReportScheduleRestApiPutTimezoneAmericaKnoxIN                  ReportScheduleRestApiPutTimezone = "America/Knox_IN"
	ReportScheduleRestApiPutTimezoneAmericaKralendijk              ReportScheduleRestApiPutTimezone = "America/Kralendijk"
	ReportScheduleRestApiPutTimezoneAmericaLaPaz                   ReportScheduleRestApiPutTimezone = "America/La_Paz"
	ReportScheduleRestApiPutTimezoneAmericaLima                    ReportScheduleRestApiPutTimezone = "America/Lima"
	ReportScheduleRestApiPutTimezoneAmericaLosAngeles              ReportScheduleRestApiPutTimezone = "America/Los_Angeles"
	ReportScheduleRestApiPutTimezoneAmericaLouisville              ReportScheduleRestApiPutTimezone = "America/Louisville"
	ReportScheduleRestApiPutTimezoneAmericaLowerPrinces            ReportScheduleRestApiPutTimezone = "America/Lower_Princes"
	ReportScheduleRestApiPutTimezoneAmericaMaceio                  ReportScheduleRestApiPutTimezone = "America/Maceio"
	ReportScheduleRestApiPutTimezoneAmericaManagua                 ReportScheduleRestApiPutTimezone = "America/Managua"
	ReportScheduleRestApiPutTimezoneAmericaManaus                  ReportScheduleRestApiPutTimezone = "America/Manaus"
	ReportScheduleRestApiPutTimezoneAmericaMarigot                 ReportScheduleRestApiPutTimezone = "America/Marigot"
	ReportScheduleRestApiPutTimezoneAmericaMartinique              ReportScheduleRestApiPutTimezone = "America/Martinique"
	ReportScheduleRestApiPutTimezoneAmericaMatamoros               ReportScheduleRestApiPutTimezone = "America/Matamoros"
	ReportScheduleRestApiPutTimezoneAmericaMazatlan                ReportScheduleRestApiPutTimezone = "America/Mazatlan"
	ReportScheduleRestApiPutTimezoneAmericaMendoza                 ReportScheduleRestApiPutTimezone = "America/Mendoza"
	ReportScheduleRestApiPutTimezoneAmericaMenominee               ReportScheduleRestApiPutTimezone = "America/Menominee"
	ReportScheduleRestApiPutTimezoneAmericaMerida                  ReportScheduleRestApiPutTimezone = "America/Merida"
	ReportScheduleRestApiPutTimezoneAmericaMetlakatla              ReportScheduleRestApiPutTimezone = "America/Metlakatla"
	ReportScheduleRestApiPutTimezoneAmericaMexicoCity              ReportScheduleRestApiPutTimezone = "America/Mexico_City"
	ReportScheduleRestApiPutTimezoneAmericaMiquelon                ReportScheduleRestApiPutTimezone = "America/Miquelon"
	ReportScheduleRestApiPutTimezoneAmericaMoncton                 ReportScheduleRestApiPutTimezone = "America/Moncton"
	ReportScheduleRestApiPutTimezoneAmericaMonterrey               ReportScheduleRestApiPutTimezone = "America/Monterrey"
	ReportScheduleRestApiPutTimezoneAmericaMontevideo              ReportScheduleRestApiPutTimezone = "America/Montevideo"
	ReportScheduleRestApiPutTimezoneAmericaMontreal                ReportScheduleRestApiPutTimezone = "America/Montreal"
	ReportScheduleRestApiPutTimezoneAmericaMontserrat              ReportScheduleRestApiPutTimezone = "America/Montserrat"
	ReportScheduleRestApiPutTimezoneAmericaNassau                  ReportScheduleRestApiPutTimezone = "America/Nassau"
	ReportScheduleRestApiPutTimezoneAmericaNewYork                 ReportScheduleRestApiPutTimezone = "America/New_York"
	ReportScheduleRestApiPutTimezoneAmericaNipigon                 ReportScheduleRestApiPutTimezone = "America/Nipigon"
	ReportScheduleRestApiPutTimezoneAmericaNome                    ReportScheduleRestApiPutTimezone = "America/Nome"
	ReportScheduleRestApiPutTimezoneAmericaNoronha                 ReportScheduleRestApiPutTimezone = "America/Noronha"
	ReportScheduleRestApiPutTimezoneAmericaNorthDakotaBeulah       ReportScheduleRestApiPutTimezone = "America/North_Dakota/Beulah"
	ReportScheduleRestApiPutTimezoneAmericaNorthDakotaCenter       ReportScheduleRestApiPutTimezone = "America/North_Dakota/Center"
	ReportScheduleRestApiPutTimezoneAmericaNorthDakotaNewSalem     ReportScheduleRestApiPutTimezone = "America/North_Dakota/New_Salem"
	ReportScheduleRestApiPutTimezoneAmericaNuuk                    ReportScheduleRestApiPutTimezone = "America/Nuuk"
	ReportScheduleRestApiPutTimezoneAmericaOjinaga                 ReportScheduleRestApiPutTimezone = "America/Ojinaga"
	ReportScheduleRestApiPutTimezoneAmericaPanama                  ReportScheduleRestApiPutTimezone = "America/Panama"
	ReportScheduleRestApiPutTimezoneAmericaPangnirtung             ReportScheduleRestApiPutTimezone = "America/Pangnirtung"
	ReportScheduleRestApiPutTimezoneAmericaParamaribo              ReportScheduleRestApiPutTimezone = "America/Paramaribo"
	ReportScheduleRestApiPutTimezoneAmericaPhoenix                 ReportScheduleRestApiPutTimezone = "America/Phoenix"
	ReportScheduleRestApiPutTimezoneAmericaPortAuPrince            ReportScheduleRestApiPutTimezone = "America/Port-au-Prince"
	ReportScheduleRestApiPutTimezoneAmericaPortOfSpain             ReportScheduleRestApiPutTimezone = "America/Port_of_Spain"
	ReportScheduleRestApiPutTimezoneAmericaPortoAcre               ReportScheduleRestApiPutTimezone = "America/Porto_Acre"
	ReportScheduleRestApiPutTimezoneAmericaPortoVelho              ReportScheduleRestApiPutTimezone = "America/Porto_Velho"
	ReportScheduleRestApiPutTimezoneAmericaPuertoRico              ReportScheduleRestApiPutTimezone = "America/Puerto_Rico"
	ReportScheduleRestApiPutTimezoneAmericaPuntaArenas             ReportScheduleRestApiPutTimezone = "America/Punta_Arenas"
	ReportScheduleRestApiPutTimezoneAmericaRainyRiver              ReportScheduleRestApiPutTimezone = "America/Rainy_River"
	ReportScheduleRestApiPutTimezoneAmericaRankinInlet             ReportScheduleRestApiPutTimezone = "America/Rankin_Inlet"
	ReportScheduleRestApiPutTimezoneAmericaRecife                  ReportScheduleRestApiPutTimezone = "America/Recife"
	ReportScheduleRestApiPutTimezoneAmericaRegina                  ReportScheduleRestApiPutTimezone = "America/Regina"
	ReportScheduleRestApiPutTimezoneAmericaResolute                ReportScheduleRestApiPutTimezone = "America/Resolute"
	ReportScheduleRestApiPutTimezoneAmericaRioBranco               ReportScheduleRestApiPutTimezone = "America/Rio_Branco"
	ReportScheduleRestApiPutTimezoneAmericaRosario                 ReportScheduleRestApiPutTimezone = "America/Rosario"
	ReportScheduleRestApiPutTimezoneAmericaSantaIsabel             ReportScheduleRestApiPutTimezone = "America/Santa_Isabel"
	ReportScheduleRestApiPutTimezoneAmericaSantarem                ReportScheduleRestApiPutTimezone = "America/Santarem"
	ReportScheduleRestApiPutTimezoneAmericaSantiago                ReportScheduleRestApiPutTimezone = "America/Santiago"
	ReportScheduleRestApiPutTimezoneAmericaSantoDomingo            ReportScheduleRestApiPutTimezone = "America/Santo_Domingo"
	ReportScheduleRestApiPutTimezoneAmericaSaoPaulo                ReportScheduleRestApiPutTimezone = "America/Sao_Paulo"
	ReportScheduleRestApiPutTimezoneAmericaScoresbysund            ReportScheduleRestApiPutTimezone = "America/Scoresbysund"
	ReportScheduleRestApiPutTimezoneAmericaShiprock                ReportScheduleRestApiPutTimezone = "America/Shiprock"
	ReportScheduleRestApiPutTimezoneAmericaSitka                   ReportScheduleRestApiPutTimezone = "America/Sitka"
	ReportScheduleRestApiPutTimezoneAmericaStBarthelemy            ReportScheduleRestApiPutTimezone = "America/St_Barthelemy"
	ReportScheduleRestApiPutTimezoneAmericaStJohns                 ReportScheduleRestApiPutTimezone = "America/St_Johns"
	ReportScheduleRestApiPutTimezoneAmericaStKitts                 ReportScheduleRestApiPutTimezone = "America/St_Kitts"
	ReportScheduleRestApiPutTimezoneAmericaStLucia                 ReportScheduleRestApiPutTimezone = "America/St_Lucia"
	ReportScheduleRestApiPutTimezoneAmericaStThomas                ReportScheduleRestApiPutTimezone = "America/St_Thomas"
	ReportScheduleRestApiPutTimezoneAmericaStVincent               ReportScheduleRestApiPutTimezone = "America/St_Vincent"
	ReportScheduleRestApiPutTimezoneAmericaSwiftCurrent            ReportScheduleRestApiPutTimezone = "America/Swift_Current"
	ReportScheduleRestApiPutTimezoneAmericaTegucigalpa             ReportScheduleRestApiPutTimezone = "America/Tegucigalpa"
	ReportScheduleRestApiPutTimezoneAmericaThule                   ReportScheduleRestApiPutTimezone = "America/Thule"
	ReportScheduleRestApiPutTimezoneAmericaThunderBay              ReportScheduleRestApiPutTimezone = "America/Thunder_Bay"
	ReportScheduleRestApiPutTimezoneAmericaTijuana                 ReportScheduleRestApiPutTimezone = "America/Tijuana"
	ReportScheduleRestApiPutTimezoneAmericaToronto                 ReportScheduleRestApiPutTimezone = "America/Toronto"
	ReportScheduleRestApiPutTimezoneAmericaTortola                 ReportScheduleRestApiPutTimezone = "America/Tortola"
	ReportScheduleRestApiPutTimezoneAmericaVancouver               ReportScheduleRestApiPutTimezone = "America/Vancouver"
	ReportScheduleRestApiPutTimezoneAmericaVirgin                  ReportScheduleRestApiPutTimezone = "America/Virgin"
	ReportScheduleRestApiPutTimezoneAmericaWhitehorse              ReportScheduleRestApiPutTimezone = "America/Whitehorse"
	ReportScheduleRestApiPutTimezoneAmericaWinnipeg                ReportScheduleRestApiPutTimezone = "America/Winnipeg"
	ReportScheduleRestApiPutTimezoneAmericaYakutat                 ReportScheduleRestApiPutTimezone = "America/Yakutat"
	ReportScheduleRestApiPutTimezoneAmericaYellowknife             ReportScheduleRestApiPutTimezone = "America/Yellowknife"
	ReportScheduleRestApiPutTimezoneAntarcticaCasey                ReportScheduleRestApiPutTimezone = "Antarctica/Casey"
	ReportScheduleRestApiPutTimezoneAntarcticaDavis                ReportScheduleRestApiPutTimezone = "Antarctica/Davis"
	ReportScheduleRestApiPutTimezoneAntarcticaDumontDUrville       ReportScheduleRestApiPutTimezone = "Antarctica/DumontDUrville"
	ReportScheduleRestApiPutTimezoneAntarcticaMacquarie            ReportScheduleRestApiPutTimezone = "Antarctica/Macquarie"
	ReportScheduleRestApiPutTimezoneAntarcticaMawson               ReportScheduleRestApiPutTimezone = "Antarctica/Mawson"
	ReportScheduleRestApiPutTimezoneAntarcticaMcMurdo              ReportScheduleRestApiPutTimezone = "Antarctica/McMurdo"
	ReportScheduleRestApiPutTimezoneAntarcticaPalmer               ReportScheduleRestApiPutTimezone = "Antarctica/Palmer"
	ReportScheduleRestApiPutTimezoneAntarcticaRothera              ReportScheduleRestApiPutTimezone = "Antarctica/Rothera"
	ReportScheduleRestApiPutTimezoneAntarcticaSouthPole            ReportScheduleRestApiPutTimezone = "Antarctica/South_Pole"
	ReportScheduleRestApiPutTimezoneAntarcticaSyowa                ReportScheduleRestApiPutTimezone = "Antarctica/Syowa"
	ReportScheduleRestApiPutTimezoneAntarcticaTroll                ReportScheduleRestApiPutTimezone = "Antarctica/Troll"
	ReportScheduleRestApiPutTimezoneAntarcticaVostok               ReportScheduleRestApiPutTimezone = "Antarctica/Vostok"
	ReportScheduleRestApiPutTimezoneArcticLongyearbyen             ReportScheduleRestApiPutTimezone = "Arctic/Longyearbyen"
	ReportScheduleRestApiPutTimezoneAsiaAden                       ReportScheduleRestApiPutTimezone = "Asia/Aden"
	ReportScheduleRestApiPutTimezoneAsiaAlmaty                     ReportScheduleRestApiPutTimezone = "Asia/Almaty"
	ReportScheduleRestApiPutTimezoneAsiaAmman                      ReportScheduleRestApiPutTimezone = "Asia/Amman"
	ReportScheduleRestApiPutTimezoneAsiaAnadyr                     ReportScheduleRestApiPutTimezone = "Asia/Anadyr"
	ReportScheduleRestApiPutTimezoneAsiaAqtau                      ReportScheduleRestApiPutTimezone = "Asia/Aqtau"
	ReportScheduleRestApiPutTimezoneAsiaAqtobe                     ReportScheduleRestApiPutTimezone = "Asia/Aqtobe"
	ReportScheduleRestApiPutTimezoneAsiaAshgabat                   ReportScheduleRestApiPutTimezone = "Asia/Ashgabat"
	ReportScheduleRestApiPutTimezoneAsiaAshkhabad                  ReportScheduleRestApiPutTimezone = "Asia/Ashkhabad"
	ReportScheduleRestApiPutTimezoneAsiaAtyrau                     ReportScheduleRestApiPutTimezone = "Asia/Atyrau"
	ReportScheduleRestApiPutTimezoneAsiaBaghdad                    ReportScheduleRestApiPutTimezone = "Asia/Baghdad"
	ReportScheduleRestApiPutTimezoneAsiaBahrain                    ReportScheduleRestApiPutTimezone = "Asia/Bahrain"
	ReportScheduleRestApiPutTimezoneAsiaBaku                       ReportScheduleRestApiPutTimezone = "Asia/Baku"
	ReportScheduleRestApiPutTimezoneAsiaBangkok                    ReportScheduleRestApiPutTimezone = "Asia/Bangkok"
	ReportScheduleRestApiPutTimezoneAsiaBarnaul                    ReportScheduleRestApiPutTimezone = "Asia/Barnaul"
	ReportScheduleRestApiPutTimezoneAsiaBeirut                     ReportScheduleRestApiPutTimezone = "Asia/Beirut"
	ReportScheduleRestApiPutTimezoneAsiaBishkek                    ReportScheduleRestApiPutTimezone = "Asia/Bishkek"
	ReportScheduleRestApiPutTimezoneAsiaBrunei                     ReportScheduleRestApiPutTimezone = "Asia/Brunei"
	ReportScheduleRestApiPutTimezoneAsiaCalcutta                   ReportScheduleRestApiPutTimezone = "Asia/Calcutta"
	ReportScheduleRestApiPutTimezoneAsiaChita                      ReportScheduleRestApiPutTimezone = "Asia/Chita"
	ReportScheduleRestApiPutTimezoneAsiaChoibalsan                 ReportScheduleRestApiPutTimezone = "Asia/Choibalsan"
	ReportScheduleRestApiPutTimezoneAsiaChongqing                  ReportScheduleRestApiPutTimezone = "Asia/Chongqing"
	ReportScheduleRestApiPutTimezoneAsiaChungking                  ReportScheduleRestApiPutTimezone = "Asia/Chungking"
	ReportScheduleRestApiPutTimezoneAsiaColombo                    ReportScheduleRestApiPutTimezone = "Asia/Colombo"
	ReportScheduleRestApiPutTimezoneAsiaDacca                      ReportScheduleRestApiPutTimezone = "Asia/Dacca"
	ReportScheduleRestApiPutTimezoneAsiaDamascus                   ReportScheduleRestApiPutTimezone = "Asia/Damascus"
	ReportScheduleRestApiPutTimezoneAsiaDhaka                      ReportScheduleRestApiPutTimezone = "Asia/Dhaka"
	ReportScheduleRestApiPutTimezoneAsiaDili                       ReportScheduleRestApiPutTimezone = "Asia/Dili"
	ReportScheduleRestApiPutTimezoneAsiaDubai                      ReportScheduleRestApiPutTimezone = "Asia/Dubai"
	ReportScheduleRestApiPutTimezoneAsiaDushanbe                   ReportScheduleRestApiPutTimezone = "Asia/Dushanbe"
	ReportScheduleRestApiPutTimezoneAsiaFamagusta                  ReportScheduleRestApiPutTimezone = "Asia/Famagusta"
	ReportScheduleRestApiPutTimezoneAsiaGaza                       ReportScheduleRestApiPutTimezone = "Asia/Gaza"
	ReportScheduleRestApiPutTimezoneAsiaHarbin                     ReportScheduleRestApiPutTimezone = "Asia/Harbin"
	ReportScheduleRestApiPutTimezoneAsiaHebron                     ReportScheduleRestApiPutTimezone = "Asia/Hebron"
	ReportScheduleRestApiPutTimezoneAsiaHoChiMinh                  ReportScheduleRestApiPutTimezone = "Asia/Ho_Chi_Minh"
	ReportScheduleRestApiPutTimezoneAsiaHongKong                   ReportScheduleRestApiPutTimezone = "Asia/Hong_Kong"
	ReportScheduleRestApiPutTimezoneAsiaHovd                       ReportScheduleRestApiPutTimezone = "Asia/Hovd"
	ReportScheduleRestApiPutTimezoneAsiaIrkutsk                    ReportScheduleRestApiPutTimezone = "Asia/Irkutsk"
	ReportScheduleRestApiPutTimezoneAsiaIstanbul                   ReportScheduleRestApiPutTimezone = "Asia/Istanbul"
	ReportScheduleRestApiPutTimezoneAsiaJakarta                    ReportScheduleRestApiPutTimezone = "Asia/Jakarta"
	ReportScheduleRestApiPutTimezoneAsiaJayapura                   ReportScheduleRestApiPutTimezone = "Asia/Jayapura"
	ReportScheduleRestApiPutTimezoneAsiaJerusalem                  ReportScheduleRestApiPutTimezone = "Asia/Jerusalem"
	ReportScheduleRestApiPutTimezoneAsiaKabul                      ReportScheduleRestApiPutTimezone = "Asia/Kabul"
	ReportScheduleRestApiPutTimezoneAsiaKamchatka                  ReportScheduleRestApiPutTimezone = "Asia/Kamchatka"
	ReportScheduleRestApiPutTimezoneAsiaKarachi                    ReportScheduleRestApiPutTimezone = "Asia/Karachi"
	ReportScheduleRestApiPutTimezoneAsiaKashgar                    ReportScheduleRestApiPutTimezone = "Asia/Kashgar"
	ReportScheduleRestApiPutTimezoneAsiaKathmandu                  ReportScheduleRestApiPutTimezone = "Asia/Kathmandu"
	ReportScheduleRestApiPutTimezoneAsiaKatmandu                   ReportScheduleRestApiPutTimezone = "Asia/Katmandu"
	ReportScheduleRestApiPutTimezoneAsiaKhandyga                   ReportScheduleRestApiPutTimezone = "Asia/Khandyga"
	ReportScheduleRestApiPutTimezoneAsiaKolkata                    ReportScheduleRestApiPutTimezone = "Asia/Kolkata"
	ReportScheduleRestApiPutTimezoneAsiaKrasnoyarsk                ReportScheduleRestApiPutTimezone = "Asia/Krasnoyarsk"
	ReportScheduleRestApiPutTimezoneAsiaKualaLumpur                ReportScheduleRestApiPutTimezone = "Asia/Kuala_Lumpur"
	ReportScheduleRestApiPutTimezoneAsiaKuching                    ReportScheduleRestApiPutTimezone = "Asia/Kuching"
	ReportScheduleRestApiPutTimezoneAsiaKuwait                     ReportScheduleRestApiPutTimezone = "Asia/Kuwait"
	ReportScheduleRestApiPutTimezoneAsiaMacao                      ReportScheduleRestApiPutTimezone = "Asia/Macao"
	ReportScheduleRestApiPutTimezoneAsiaMacau                      ReportScheduleRestApiPutTimezone = "Asia/Macau"
	ReportScheduleRestApiPutTimezoneAsiaMagadan                    ReportScheduleRestApiPutTimezone = "Asia/Magadan"
	ReportScheduleRestApiPutTimezoneAsiaMakassar                   ReportScheduleRestApiPutTimezone = "Asia/Makassar"
	ReportScheduleRestApiPutTimezoneAsiaManila                     ReportScheduleRestApiPutTimezone = "Asia/Manila"
	ReportScheduleRestApiPutTimezoneAsiaMuscat                     ReportScheduleRestApiPutTimezone = "Asia/Muscat"
	ReportScheduleRestApiPutTimezoneAsiaNicosia                    ReportScheduleRestApiPutTimezone = "Asia/Nicosia"
	ReportScheduleRestApiPutTimezoneAsiaNovokuznetsk               ReportScheduleRestApiPutTimezone = "Asia/Novokuznetsk"
	ReportScheduleRestApiPutTimezoneAsiaNovosibirsk                ReportScheduleRestApiPutTimezone = "Asia/Novosibirsk"
	ReportScheduleRestApiPutTimezoneAsiaOmsk                       ReportScheduleRestApiPutTimezone = "Asia/Omsk"
	ReportScheduleRestApiPutTimezoneAsiaOral                       ReportScheduleRestApiPutTimezone = "Asia/Oral"
	ReportScheduleRestApiPutTimezoneAsiaPhnomPenh                  ReportScheduleRestApiPutTimezone = "Asia/Phnom_Penh"
	ReportScheduleRestApiPutTimezoneAsiaPontianak                  ReportScheduleRestApiPutTimezone = "Asia/Pontianak"
	ReportScheduleRestApiPutTimezoneAsiaPyongyang                  ReportScheduleRestApiPutTimezone = "Asia/Pyongyang"
	ReportScheduleRestApiPutTimezoneAsiaQatar                      ReportScheduleRestApiPutTimezone = "Asia/Qatar"
	ReportScheduleRestApiPutTimezoneAsiaQostanay                   ReportScheduleRestApiPutTimezone = "Asia/Qostanay"
	ReportScheduleRestApiPutTimezoneAsiaQyzylorda                  ReportScheduleRestApiPutTimezone = "Asia/Qyzylorda"
	ReportScheduleRestApiPutTimezoneAsiaRangoon                    ReportScheduleRestApiPutTimezone = "Asia/Rangoon"
	ReportScheduleRestApiPutTimezoneAsiaRiyadh                     ReportScheduleRestApiPutTimezone = "Asia/Riyadh"
	ReportScheduleRestApiPutTimezoneAsiaSaigon                     ReportScheduleRestApiPutTimezone = "Asia/Saigon"
	ReportScheduleRestApiPutTimezoneAsiaSakhalin                   ReportScheduleRestApiPutTimezone = "Asia/Sakhalin"
	ReportScheduleRestApiPutTimezoneAsiaSamarkand                  ReportScheduleRestApiPutTimezone = "Asia/Samarkand"
	ReportScheduleRestApiPutTimezoneAsiaSeoul                      ReportScheduleRestApiPutTimezone = "Asia/Seoul"
	ReportScheduleRestApiPutTimezoneAsiaShanghai                   ReportScheduleRestApiPutTimezone = "Asia/Shanghai"
	ReportScheduleRestApiPutTimezoneAsiaSingapore                  ReportScheduleRestApiPutTimezone = "Asia/Singapore"
	ReportScheduleRestApiPutTimezoneAsiaSrednekolymsk              ReportScheduleRestApiPutTimezone = "Asia/Srednekolymsk"
	ReportScheduleRestApiPutTimezoneAsiaTaipei                     ReportScheduleRestApiPutTimezone = "Asia/Taipei"
	ReportScheduleRestApiPutTimezoneAsiaTashkent                   ReportScheduleRestApiPutTimezone = "Asia/Tashkent"
	ReportScheduleRestApiPutTimezoneAsiaTbilisi                    ReportScheduleRestApiPutTimezone = "Asia/Tbilisi"
	ReportScheduleRestApiPutTimezoneAsiaTehran                     ReportScheduleRestApiPutTimezone = "Asia/Tehran"
	ReportScheduleRestApiPutTimezoneAsiaTelAviv                    ReportScheduleRestApiPutTimezone = "Asia/Tel_Aviv"
	ReportScheduleRestApiPutTimezoneAsiaThimbu                     ReportScheduleRestApiPutTimezone = "Asia/Thimbu"
	ReportScheduleRestApiPutTimezoneAsiaThimphu                    ReportScheduleRestApiPutTimezone = "Asia/Thimphu"
	ReportScheduleRestApiPutTimezoneAsiaTokyo                      ReportScheduleRestApiPutTimezone = "Asia/Tokyo"
	ReportScheduleRestApiPutTimezoneAsiaTomsk                      ReportScheduleRestApiPutTimezone = "Asia/Tomsk"
	ReportScheduleRestApiPutTimezoneAsiaUjungPandang               ReportScheduleRestApiPutTimezone = "Asia/Ujung_Pandang"
	ReportScheduleRestApiPutTimezoneAsiaUlaanbaatar                ReportScheduleRestApiPutTimezone = "Asia/Ulaanbaatar"
	ReportScheduleRestApiPutTimezoneAsiaUlanBator                  ReportScheduleRestApiPutTimezone = "Asia/Ulan_Bator"
	ReportScheduleRestApiPutTimezoneAsiaUrumqi                     ReportScheduleRestApiPutTimezone = "Asia/Urumqi"
	ReportScheduleRestApiPutTimezoneAsiaUstNera                    ReportScheduleRestApiPutTimezone = "Asia/Ust-Nera"
	ReportScheduleRestApiPutTimezoneAsiaVientiane                  ReportScheduleRestApiPutTimezone = "Asia/Vientiane"
	ReportScheduleRestApiPutTimezoneAsiaVladivostok                ReportScheduleRestApiPutTimezone = "Asia/Vladivostok"
	ReportScheduleRestApiPutTimezoneAsiaYakutsk                    ReportScheduleRestApiPutTimezone = "Asia/Yakutsk"
	ReportScheduleRestApiPutTimezoneAsiaYangon                     ReportScheduleRestApiPutTimezone = "Asia/Yangon"
	ReportScheduleRestApiPutTimezoneAsiaYekaterinburg              ReportScheduleRestApiPutTimezone = "Asia/Yekaterinburg"
	ReportScheduleRestApiPutTimezoneAsiaYerevan                    ReportScheduleRestApiPutTimezone = "Asia/Yerevan"
	ReportScheduleRestApiPutTimezoneAtlanticAzores                 ReportScheduleRestApiPutTimezone = "Atlantic/Azores"
	ReportScheduleRestApiPutTimezoneAtlanticBermuda                ReportScheduleRestApiPutTimezone = "Atlantic/Bermuda"
	ReportScheduleRestApiPutTimezoneAtlanticCanary                 ReportScheduleRestApiPutTimezone = "Atlantic/Canary"
	ReportScheduleRestApiPutTimezoneAtlanticCapeVerde              ReportScheduleRestApiPutTimezone = "Atlantic/Cape_Verde"
	ReportScheduleRestApiPutTimezoneAtlanticFaeroe                 ReportScheduleRestApiPutTimezone = "Atlantic/Faeroe"
	ReportScheduleRestApiPutTimezoneAtlanticFaroe                  ReportScheduleRestApiPutTimezone = "Atlantic/Faroe"
	ReportScheduleRestApiPutTimezoneAtlanticJanMayen               ReportScheduleRestApiPutTimezone = "Atlantic/Jan_Mayen"
	ReportScheduleRestApiPutTimezoneAtlanticMadeira                ReportScheduleRestApiPutTimezone = "Atlantic/Madeira"
	ReportScheduleRestApiPutTimezoneAtlanticReykjavik              ReportScheduleRestApiPutTimezone = "Atlantic/Reykjavik"
	ReportScheduleRestApiPutTimezoneAtlanticSouthGeorgia           ReportScheduleRestApiPutTimezone = "Atlantic/South_Georgia"
	ReportScheduleRestApiPutTimezoneAtlanticStHelena               ReportScheduleRestApiPutTimezone = "Atlantic/St_Helena"
	ReportScheduleRestApiPutTimezoneAtlanticStanley                ReportScheduleRestApiPutTimezone = "Atlantic/Stanley"
	ReportScheduleRestApiPutTimezoneAustraliaACT                   ReportScheduleRestApiPutTimezone = "Australia/ACT"
	ReportScheduleRestApiPutTimezoneAustraliaAdelaide              ReportScheduleRestApiPutTimezone = "Australia/Adelaide"
	ReportScheduleRestApiPutTimezoneAustraliaBrisbane              ReportScheduleRestApiPutTimezone = "Australia/Brisbane"
	ReportScheduleRestApiPutTimezoneAustraliaBrokenHill            ReportScheduleRestApiPutTimezone = "Australia/Broken_Hill"
	ReportScheduleRestApiPutTimezoneAustraliaCanberra              ReportScheduleRestApiPutTimezone = "Australia/Canberra"
	ReportScheduleRestApiPutTimezoneAustraliaCurrie                ReportScheduleRestApiPutTimezone = "Australia/Currie"
	ReportScheduleRestApiPutTimezoneAustraliaDarwin                ReportScheduleRestApiPutTimezone = "Australia/Darwin"
	ReportScheduleRestApiPutTimezoneAustraliaEucla                 ReportScheduleRestApiPutTimezone = "Australia/Eucla"
	ReportScheduleRestApiPutTimezoneAustraliaHobart                ReportScheduleRestApiPutTimezone = "Australia/Hobart"
	ReportScheduleRestApiPutTimezoneAustraliaLHI                   ReportScheduleRestApiPutTimezone = "Australia/LHI"
	ReportScheduleRestApiPutTimezoneAustraliaLindeman              ReportScheduleRestApiPutTimezone = "Australia/Lindeman"
	ReportScheduleRestApiPutTimezoneAustraliaLordHowe              ReportScheduleRestApiPutTimezone = "Australia/Lord_Howe"
	ReportScheduleRestApiPutTimezoneAustraliaMelbourne             ReportScheduleRestApiPutTimezone = "Australia/Melbourne"
	ReportScheduleRestApiPutTimezoneAustraliaNSW                   ReportScheduleRestApiPutTimezone = "Australia/NSW"
	ReportScheduleRestApiPutTimezoneAustraliaNorth                 ReportScheduleRestApiPutTimezone = "Australia/North"
	ReportScheduleRestApiPutTimezoneAustraliaPerth                 ReportScheduleRestApiPutTimezone = "Australia/Perth"
	ReportScheduleRestApiPutTimezoneAustraliaQueensland            ReportScheduleRestApiPutTimezone = "Australia/Queensland"
	ReportScheduleRestApiPutTimezoneAustraliaSouth                 ReportScheduleRestApiPutTimezone = "Australia/South"
	ReportScheduleRestApiPutTimezoneAustraliaSydney                ReportScheduleRestApiPutTimezone = "Australia/Sydney"
	ReportScheduleRestApiPutTimezoneAustraliaTasmania              ReportScheduleRestApiPutTimezone = "Australia/Tasmania"
	ReportScheduleRestApiPutTimezoneAustraliaVictoria              ReportScheduleRestApiPutTimezone = "Australia/Victoria"
	ReportScheduleRestApiPutTimezoneAustraliaWest                  ReportScheduleRestApiPutTimezone = "Australia/West"
	ReportScheduleRestApiPutTimezoneAustraliaYancowinna            ReportScheduleRestApiPutTimezone = "Australia/Yancowinna"
	ReportScheduleRestApiPutTimezoneBrazilAcre                     ReportScheduleRestApiPutTimezone = "Brazil/Acre"
	ReportScheduleRestApiPutTimezoneBrazilDeNoronha                ReportScheduleRestApiPutTimezone = "Brazil/DeNoronha"
	ReportScheduleRestApiPutTimezoneBrazilEast                     ReportScheduleRestApiPutTimezone = "Brazil/East"
	ReportScheduleRestApiPutTimezoneBrazilWest                     ReportScheduleRestApiPutTimezone = "Brazil/West"
	ReportScheduleRestApiPutTimezoneCET                            ReportScheduleRestApiPutTimezone = "CET"
	ReportScheduleRestApiPutTimezoneCST6CDT                        ReportScheduleRestApiPutTimezone = "CST6CDT"
	ReportScheduleRestApiPutTimezoneCanadaAtlantic                 ReportScheduleRestApiPutTimezone = "Canada/Atlantic"
	ReportScheduleRestApiPutTimezoneCanadaCentral                  ReportScheduleRestApiPutTimezone = "Canada/Central"
	ReportScheduleRestApiPutTimezoneCanadaEastern                  ReportScheduleRestApiPutTimezone = "Canada/Eastern"
	ReportScheduleRestApiPutTimezoneCanadaMountain                 ReportScheduleRestApiPutTimezone = "Canada/Mountain"
	ReportScheduleRestApiPutTimezoneCanadaNewfoundland             ReportScheduleRestApiPutTimezone = "Canada/Newfoundland"
	ReportScheduleRestApiPutTimezoneCanadaPacific                  ReportScheduleRestApiPutTimezone = "Canada/Pacific"
	ReportScheduleRestApiPutTimezoneCanadaSaskatchewan             ReportScheduleRestApiPutTimezone = "Canada/Saskatchewan"
	ReportScheduleRestApiPutTimezoneCanadaYukon                    ReportScheduleRestApiPutTimezone = "Canada/Yukon"
	ReportScheduleRestApiPutTimezoneChileContinental               ReportScheduleRestApiPutTimezone = "Chile/Continental"
	ReportScheduleRestApiPutTimezoneChileEasterIsland              ReportScheduleRestApiPutTimezone = "Chile/EasterIsland"
	ReportScheduleRestApiPutTimezoneCuba                           ReportScheduleRestApiPutTimezone = "Cuba"
	ReportScheduleRestApiPutTimezoneEET                            ReportScheduleRestApiPutTimezone = "EET"
	ReportScheduleRestApiPutTimezoneEST                            ReportScheduleRestApiPutTimezone = "EST"
	ReportScheduleRestApiPutTimezoneEST5EDT                        ReportScheduleRestApiPutTimezone = "EST5EDT"
	ReportScheduleRestApiPutTimezoneEgypt                          ReportScheduleRestApiPutTimezone = "Egypt"
	ReportScheduleRestApiPutTimezoneEire                           ReportScheduleRestApiPutTimezone = "Eire"
	ReportScheduleRestApiPutTimezoneEtcGMT                         ReportScheduleRestApiPutTimezone = "Etc/GMT"
	ReportScheduleRestApiPutTimezoneEtcGMT0                        ReportScheduleRestApiPutTimezone = "Etc/GMT+0"
	ReportScheduleRestApiPutTimezoneEtcGMT01                       ReportScheduleRestApiPutTimezone = "Etc/GMT-0"
	ReportScheduleRestApiPutTimezoneEtcGMT02                       ReportScheduleRestApiPutTimezone = "Etc/GMT0"
	ReportScheduleRestApiPutTimezoneEtcGMT1                        ReportScheduleRestApiPutTimezone = "Etc/GMT+1"
	ReportScheduleRestApiPutTimezoneEtcGMT10                       ReportScheduleRestApiPutTimezone = "Etc/GMT+10"
	ReportScheduleRestApiPutTimezoneEtcGMT101                      ReportScheduleRestApiPutTimezone = "Etc/GMT-10"
	ReportScheduleRestApiPutTimezoneEtcGMT11                       ReportScheduleRestApiPutTimezone = "Etc/GMT-1"
	ReportScheduleRestApiPutTimezoneEtcGMT111                      ReportScheduleRestApiPutTimezone = "Etc/GMT-11"
	ReportScheduleRestApiPutTimezoneEtcGMT12                       ReportScheduleRestApiPutTimezone = "Etc/GMT+12"
	ReportScheduleRestApiPutTimezoneEtcGMT121                      ReportScheduleRestApiPutTimezone = "Etc/GMT-12"
	ReportScheduleRestApiPutTimezoneEtcGMT13                       ReportScheduleRestApiPutTimezone = "Etc/GMT-13"
	ReportScheduleRestApiPutTimezoneEtcGMT14                       ReportScheduleRestApiPutTimezone = "Etc/GMT-14"
	ReportScheduleRestApiPutTimezoneEtcGMT2                        ReportScheduleRestApiPutTimezone = "Etc/GMT+2"
	ReportScheduleRestApiPutTimezoneEtcGMT21                       ReportScheduleRestApiPutTimezone = "Etc/GMT-2"
	ReportScheduleRestApiPutTimezoneEtcGMT3                        ReportScheduleRestApiPutTimezone = "Etc/GMT+3"
	ReportScheduleRestApiPutTimezoneEtcGMT31                       ReportScheduleRestApiPutTimezone = "Etc/GMT-3"
	ReportScheduleRestApiPutTimezoneEtcGMT4                        ReportScheduleRestApiPutTimezone = "Etc/GMT+4"
	ReportScheduleRestApiPutTimezoneEtcGMT41                       ReportScheduleRestApiPutTimezone = "Etc/GMT-4"
	ReportScheduleRestApiPutTimezoneEtcGMT5                        ReportScheduleRestApiPutTimezone = "Etc/GMT+5"
	ReportScheduleRestApiPutTimezoneEtcGMT51                       ReportScheduleRestApiPutTimezone = "Etc/GMT-5"
	ReportScheduleRestApiPutTimezoneEtcGMT6                        ReportScheduleRestApiPutTimezone = "Etc/GMT+6"
	ReportScheduleRestApiPutTimezoneEtcGMT61                       ReportScheduleRestApiPutTimezone = "Etc/GMT-6"
	ReportScheduleRestApiPutTimezoneEtcGMT7                        ReportScheduleRestApiPutTimezone = "Etc/GMT+7"
	ReportScheduleRestApiPutTimezoneEtcGMT71                       ReportScheduleRestApiPutTimezone = "Etc/GMT-7"
	ReportScheduleRestApiPutTimezoneEtcGMT8                        ReportScheduleRestApiPutTimezone = "Etc/GMT+8"
	ReportScheduleRestApiPutTimezoneEtcGMT81                       ReportScheduleRestApiPutTimezone = "Etc/GMT-8"
	ReportScheduleRestApiPutTimezoneEtcGMT9                        ReportScheduleRestApiPutTimezone = "Etc/GMT+9"
	ReportScheduleRestApiPutTimezoneEtcGMT91                       ReportScheduleRestApiPutTimezone = "Etc/GMT-9"
	ReportScheduleRestApiPutTimezoneEtcGreenwich                   ReportScheduleRestApiPutTimezone = "Etc/Greenwich"
	ReportScheduleRestApiPutTimezoneEtcUCT                         ReportScheduleRestApiPutTimezone = "Etc/UCT"
	ReportScheduleRestApiPutTimezoneEtcUTC                         ReportScheduleRestApiPutTimezone = "Etc/UTC"
	ReportScheduleRestApiPutTimezoneEtcUniversal                   ReportScheduleRestApiPutTimezone = "Etc/Universal"
	ReportScheduleRestApiPutTimezoneEtcZulu                        ReportScheduleRestApiPutTimezone = "Etc/Zulu"
	ReportScheduleRestApiPutTimezoneEuropeAmsterdam                ReportScheduleRestApiPutTimezone = "Europe/Amsterdam"
	ReportScheduleRestApiPutTimezoneEuropeAndorra                  ReportScheduleRestApiPutTimezone = "Europe/Andorra"
	ReportScheduleRestApiPutTimezoneEuropeAstrakhan                ReportScheduleRestApiPutTimezone = "Europe/Astrakhan"
	ReportScheduleRestApiPutTimezoneEuropeAthens                   ReportScheduleRestApiPutTimezone = "Europe/Athens"
	ReportScheduleRestApiPutTimezoneEuropeBelfast                  ReportScheduleRestApiPutTimezone = "Europe/Belfast"
	ReportScheduleRestApiPutTimezoneEuropeBelgrade                 ReportScheduleRestApiPutTimezone = "Europe/Belgrade"
	ReportScheduleRestApiPutTimezoneEuropeBerlin                   ReportScheduleRestApiPutTimezone = "Europe/Berlin"
	ReportScheduleRestApiPutTimezoneEuropeBratislava               ReportScheduleRestApiPutTimezone = "Europe/Bratislava"
	ReportScheduleRestApiPutTimezoneEuropeBrussels                 ReportScheduleRestApiPutTimezone = "Europe/Brussels"
	ReportScheduleRestApiPutTimezoneEuropeBucharest                ReportScheduleRestApiPutTimezone = "Europe/Bucharest"
	ReportScheduleRestApiPutTimezoneEuropeBudapest                 ReportScheduleRestApiPutTimezone = "Europe/Budapest"
	ReportScheduleRestApiPutTimezoneEuropeBusingen                 ReportScheduleRestApiPutTimezone = "Europe/Busingen"
	ReportScheduleRestApiPutTimezoneEuropeChisinau                 ReportScheduleRestApiPutTimezone = "Europe/Chisinau"
	ReportScheduleRestApiPutTimezoneEuropeCopenhagen               ReportScheduleRestApiPutTimezone = "Europe/Copenhagen"
	ReportScheduleRestApiPutTimezoneEuropeDublin                   ReportScheduleRestApiPutTimezone = "Europe/Dublin"
	ReportScheduleRestApiPutTimezoneEuropeGibraltar                ReportScheduleRestApiPutTimezone = "Europe/Gibraltar"
	ReportScheduleRestApiPutTimezoneEuropeGuernsey                 ReportScheduleRestApiPutTimezone = "Europe/Guernsey"
	ReportScheduleRestApiPutTimezoneEuropeHelsinki                 ReportScheduleRestApiPutTimezone = "Europe/Helsinki"
	ReportScheduleRestApiPutTimezoneEuropeIsleOfMan                ReportScheduleRestApiPutTimezone = "Europe/Isle_of_Man"
	ReportScheduleRestApiPutTimezoneEuropeIstanbul                 ReportScheduleRestApiPutTimezone = "Europe/Istanbul"
	ReportScheduleRestApiPutTimezoneEuropeJersey                   ReportScheduleRestApiPutTimezone = "Europe/Jersey"
	ReportScheduleRestApiPutTimezoneEuropeKaliningrad              ReportScheduleRestApiPutTimezone = "Europe/Kaliningrad"
	ReportScheduleRestApiPutTimezoneEuropeKiev                     ReportScheduleRestApiPutTimezone = "Europe/Kiev"
	ReportScheduleRestApiPutTimezoneEuropeKirov                    ReportScheduleRestApiPutTimezone = "Europe/Kirov"
	ReportScheduleRestApiPutTimezoneEuropeLisbon                   ReportScheduleRestApiPutTimezone = "Europe/Lisbon"
	ReportScheduleRestApiPutTimezoneEuropeLjubljana                ReportScheduleRestApiPutTimezone = "Europe/Ljubljana"
	ReportScheduleRestApiPutTimezoneEuropeLondon                   ReportScheduleRestApiPutTimezone = "Europe/London"
	ReportScheduleRestApiPutTimezoneEuropeLuxembourg               ReportScheduleRestApiPutTimezone = "Europe/Luxembourg"
	ReportScheduleRestApiPutTimezoneEuropeMadrid                   ReportScheduleRestApiPutTimezone = "Europe/Madrid"
	ReportScheduleRestApiPutTimezoneEuropeMalta                    ReportScheduleRestApiPutTimezone = "Europe/Malta"
	ReportScheduleRestApiPutTimezoneEuropeMariehamn                ReportScheduleRestApiPutTimezone = "Europe/Mariehamn"
	ReportScheduleRestApiPutTimezoneEuropeMinsk                    ReportScheduleRestApiPutTimezone = "Europe/Minsk"
	ReportScheduleRestApiPutTimezoneEuropeMonaco                   ReportScheduleRestApiPutTimezone = "Europe/Monaco"
	ReportScheduleRestApiPutTimezoneEuropeMoscow                   ReportScheduleRestApiPutTimezone = "Europe/Moscow"
	ReportScheduleRestApiPutTimezoneEuropeNicosia                  ReportScheduleRestApiPutTimezone = "Europe/Nicosia"
	ReportScheduleRestApiPutTimezoneEuropeOslo                     ReportScheduleRestApiPutTimezone = "Europe/Oslo"
	ReportScheduleRestApiPutTimezoneEuropeParis                    ReportScheduleRestApiPutTimezone = "Europe/Paris"
	ReportScheduleRestApiPutTimezoneEuropePodgorica                ReportScheduleRestApiPutTimezone = "Europe/Podgorica"
	ReportScheduleRestApiPutTimezoneEuropePrague                   ReportScheduleRestApiPutTimezone = "Europe/Prague"
	ReportScheduleRestApiPutTimezoneEuropeRiga                     ReportScheduleRestApiPutTimezone = "Europe/Riga"
	ReportScheduleRestApiPutTimezoneEuropeRome                     ReportScheduleRestApiPutTimezone = "Europe/Rome"
	ReportScheduleRestApiPutTimezoneEuropeSamara                   ReportScheduleRestApiPutTimezone = "Europe/Samara"
	ReportScheduleRestApiPutTimezoneEuropeSanMarino                ReportScheduleRestApiPutTimezone = "Europe/San_Marino"
	ReportScheduleRestApiPutTimezoneEuropeSarajevo                 ReportScheduleRestApiPutTimezone = "Europe/Sarajevo"
	ReportScheduleRestApiPutTimezoneEuropeSaratov                  ReportScheduleRestApiPutTimezone = "Europe/Saratov"
	ReportScheduleRestApiPutTimezoneEuropeSimferopol               ReportScheduleRestApiPutTimezone = "Europe/Simferopol"
	ReportScheduleRestApiPutTimezoneEuropeSkopje                   ReportScheduleRestApiPutTimezone = "Europe/Skopje"
	ReportScheduleRestApiPutTimezoneEuropeSofia                    ReportScheduleRestApiPutTimezone = "Europe/Sofia"
	ReportScheduleRestApiPutTimezoneEuropeStockholm                ReportScheduleRestApiPutTimezone = "Europe/Stockholm"
	ReportScheduleRestApiPutTimezoneEuropeTallinn                  ReportScheduleRestApiPutTimezone = "Europe/Tallinn"
	ReportScheduleRestApiPutTimezoneEuropeTirane                   ReportScheduleRestApiPutTimezone = "Europe/Tirane"
	ReportScheduleRestApiPutTimezoneEuropeTiraspol                 ReportScheduleRestApiPutTimezone = "Europe/Tiraspol"
	ReportScheduleRestApiPutTimezoneEuropeUlyanovsk                ReportScheduleRestApiPutTimezone = "Europe/Ulyanovsk"
	ReportScheduleRestApiPutTimezoneEuropeUzhgorod                 ReportScheduleRestApiPutTimezone = "Europe/Uzhgorod"
	ReportScheduleRestApiPutTimezoneEuropeVaduz                    ReportScheduleRestApiPutTimezone = "Europe/Vaduz"
	ReportScheduleRestApiPutTimezoneEuropeVatican                  ReportScheduleRestApiPutTimezone = "Europe/Vatican"
	ReportScheduleRestApiPutTimezoneEuropeVienna                   ReportScheduleRestApiPutTimezone = "Europe/Vienna"
	ReportScheduleRestApiPutTimezoneEuropeVilnius                  ReportScheduleRestApiPutTimezone = "Europe/Vilnius"
	ReportScheduleRestApiPutTimezoneEuropeVolgograd                ReportScheduleRestApiPutTimezone = "Europe/Volgograd"
	ReportScheduleRestApiPutTimezoneEuropeWarsaw                   ReportScheduleRestApiPutTimezone = "Europe/Warsaw"
	ReportScheduleRestApiPutTimezoneEuropeZagreb                   ReportScheduleRestApiPutTimezone = "Europe/Zagreb"
	ReportScheduleRestApiPutTimezoneEuropeZaporozhye               ReportScheduleRestApiPutTimezone = "Europe/Zaporozhye"
	ReportScheduleRestApiPutTimezoneEuropeZurich                   ReportScheduleRestApiPutTimezone = "Europe/Zurich"
	ReportScheduleRestApiPutTimezoneGB                             ReportScheduleRestApiPutTimezone = "GB"
	ReportScheduleRestApiPutTimezoneGBEire                         ReportScheduleRestApiPutTimezone = "GB-Eire"
	ReportScheduleRestApiPutTimezoneGMT                            ReportScheduleRestApiPutTimezone = "GMT"
	ReportScheduleRestApiPutTimezoneGMT0                           ReportScheduleRestApiPutTimezone = "GMT+0"
	ReportScheduleRestApiPutTimezoneGMT01                          ReportScheduleRestApiPutTimezone = "GMT-0"
	ReportScheduleRestApiPutTimezoneGMT02                          ReportScheduleRestApiPutTimezone = "GMT0"
	ReportScheduleRestApiPutTimezoneGreenwich                      ReportScheduleRestApiPutTimezone = "Greenwich"
	ReportScheduleRestApiPutTimezoneHST                            ReportScheduleRestApiPutTimezone = "HST"
	ReportScheduleRestApiPutTimezoneHongkong                       ReportScheduleRestApiPutTimezone = "Hongkong"
	ReportScheduleRestApiPutTimezoneIceland                        ReportScheduleRestApiPutTimezone = "Iceland"
	ReportScheduleRestApiPutTimezoneIndianAntananarivo             ReportScheduleRestApiPutTimezone = "Indian/Antananarivo"
	ReportScheduleRestApiPutTimezoneIndianChagos                   ReportScheduleRestApiPutTimezone = "Indian/Chagos"
	ReportScheduleRestApiPutTimezoneIndianChristmas                ReportScheduleRestApiPutTimezone = "Indian/Christmas"
	ReportScheduleRestApiPutTimezoneIndianCocos                    ReportScheduleRestApiPutTimezone = "Indian/Cocos"
	ReportScheduleRestApiPutTimezoneIndianComoro                   ReportScheduleRestApiPutTimezone = "Indian/Comoro"
	ReportScheduleRestApiPutTimezoneIndianKerguelen                ReportScheduleRestApiPutTimezone = "Indian/Kerguelen"
	ReportScheduleRestApiPutTimezoneIndianMahe                     ReportScheduleRestApiPutTimezone = "Indian/Mahe"
	ReportScheduleRestApiPutTimezoneIndianMaldives                 ReportScheduleRestApiPutTimezone = "Indian/Maldives"
	ReportScheduleRestApiPutTimezoneIndianMauritius                ReportScheduleRestApiPutTimezone = "Indian/Mauritius"
	ReportScheduleRestApiPutTimezoneIndianMayotte                  ReportScheduleRestApiPutTimezone = "Indian/Mayotte"
	ReportScheduleRestApiPutTimezoneIndianReunion                  ReportScheduleRestApiPutTimezone = "Indian/Reunion"
	ReportScheduleRestApiPutTimezoneIran                           ReportScheduleRestApiPutTimezone = "Iran"
	ReportScheduleRestApiPutTimezoneIsrael                         ReportScheduleRestApiPutTimezone = "Israel"
	ReportScheduleRestApiPutTimezoneJamaica                        ReportScheduleRestApiPutTimezone = "Jamaica"
	ReportScheduleRestApiPutTimezoneJapan                          ReportScheduleRestApiPutTimezone = "Japan"
	ReportScheduleRestApiPutTimezoneKwajalein                      ReportScheduleRestApiPutTimezone = "Kwajalein"
	ReportScheduleRestApiPutTimezoneLibya                          ReportScheduleRestApiPutTimezone = "Libya"
	ReportScheduleRestApiPutTimezoneMET                            ReportScheduleRestApiPutTimezone = "MET"
	ReportScheduleRestApiPutTimezoneMST                            ReportScheduleRestApiPutTimezone = "MST"
	ReportScheduleRestApiPutTimezoneMST7MDT                        ReportScheduleRestApiPutTimezone = "MST7MDT"
	ReportScheduleRestApiPutTimezoneMexicoBajaNorte                ReportScheduleRestApiPutTimezone = "Mexico/BajaNorte"
	ReportScheduleRestApiPutTimezoneMexicoBajaSur                  ReportScheduleRestApiPutTimezone = "Mexico/BajaSur"
	ReportScheduleRestApiPutTimezoneMexicoGeneral                  ReportScheduleRestApiPutTimezone = "Mexico/General"
	ReportScheduleRestApiPutTimezoneNZ                             ReportScheduleRestApiPutTimezone = "NZ"
	ReportScheduleRestApiPutTimezoneNZCHAT                         ReportScheduleRestApiPutTimezone = "NZ-CHAT"
	ReportScheduleRestApiPutTimezoneNavajo                         ReportScheduleRestApiPutTimezone = "Navajo"
	ReportScheduleRestApiPutTimezonePRC                            ReportScheduleRestApiPutTimezone = "PRC"
	ReportScheduleRestApiPutTimezonePST8PDT                        ReportScheduleRestApiPutTimezone = "PST8PDT"
	ReportScheduleRestApiPutTimezonePacificApia                    ReportScheduleRestApiPutTimezone = "Pacific/Apia"
	ReportScheduleRestApiPutTimezonePacificAuckland                ReportScheduleRestApiPutTimezone = "Pacific/Auckland"
	ReportScheduleRestApiPutTimezonePacificBougainville            ReportScheduleRestApiPutTimezone = "Pacific/Bougainville"
	ReportScheduleRestApiPutTimezonePacificChatham                 ReportScheduleRestApiPutTimezone = "Pacific/Chatham"
	ReportScheduleRestApiPutTimezonePacificChuuk                   ReportScheduleRestApiPutTimezone = "Pacific/Chuuk"
	ReportScheduleRestApiPutTimezonePacificEaster                  ReportScheduleRestApiPutTimezone = "Pacific/Easter"
	ReportScheduleRestApiPutTimezonePacificEfate                   ReportScheduleRestApiPutTimezone = "Pacific/Efate"
	ReportScheduleRestApiPutTimezonePacificEnderbury               ReportScheduleRestApiPutTimezone = "Pacific/Enderbury"
	ReportScheduleRestApiPutTimezonePacificFakaofo                 ReportScheduleRestApiPutTimezone = "Pacific/Fakaofo"
	ReportScheduleRestApiPutTimezonePacificFiji                    ReportScheduleRestApiPutTimezone = "Pacific/Fiji"
	ReportScheduleRestApiPutTimezonePacificFunafuti                ReportScheduleRestApiPutTimezone = "Pacific/Funafuti"
	ReportScheduleRestApiPutTimezonePacificGalapagos               ReportScheduleRestApiPutTimezone = "Pacific/Galapagos"
	ReportScheduleRestApiPutTimezonePacificGambier                 ReportScheduleRestApiPutTimezone = "Pacific/Gambier"
	ReportScheduleRestApiPutTimezonePacificGuadalcanal             ReportScheduleRestApiPutTimezone = "Pacific/Guadalcanal"
	ReportScheduleRestApiPutTimezonePacificGuam                    ReportScheduleRestApiPutTimezone = "Pacific/Guam"
	ReportScheduleRestApiPutTimezonePacificHonolulu                ReportScheduleRestApiPutTimezone = "Pacific/Honolulu"
	ReportScheduleRestApiPutTimezonePacificJohnston                ReportScheduleRestApiPutTimezone = "Pacific/Johnston"
	ReportScheduleRestApiPutTimezonePacificKanton                  ReportScheduleRestApiPutTimezone = "Pacific/Kanton"
	ReportScheduleRestApiPutTimezonePacificKiritimati              ReportScheduleRestApiPutTimezone = "Pacific/Kiritimati"
	ReportScheduleRestApiPutTimezonePacificKosrae                  ReportScheduleRestApiPutTimezone = "Pacific/Kosrae"
	ReportScheduleRestApiPutTimezonePacificKwajalein               ReportScheduleRestApiPutTimezone = "Pacific/Kwajalein"
	ReportScheduleRestApiPutTimezonePacificMajuro                  ReportScheduleRestApiPutTimezone = "Pacific/Majuro"
	ReportScheduleRestApiPutTimezonePacificMarquesas               ReportScheduleRestApiPutTimezone = "Pacific/Marquesas"
	ReportScheduleRestApiPutTimezonePacificMidway                  ReportScheduleRestApiPutTimezone = "Pacific/Midway"
	ReportScheduleRestApiPutTimezonePacificNauru                   ReportScheduleRestApiPutTimezone = "Pacific/Nauru"
	ReportScheduleRestApiPutTimezonePacificNiue                    ReportScheduleRestApiPutTimezone = "Pacific/Niue"
	ReportScheduleRestApiPutTimezonePacificNorfolk                 ReportScheduleRestApiPutTimezone = "Pacific/Norfolk"
	ReportScheduleRestApiPutTimezonePacificNoumea                  ReportScheduleRestApiPutTimezone = "Pacific/Noumea"
	ReportScheduleRestApiPutTimezonePacificPagoPago                ReportScheduleRestApiPutTimezone = "Pacific/Pago_Pago"
	ReportScheduleRestApiPutTimezonePacificPalau                   ReportScheduleRestApiPutTimezone = "Pacific/Palau"
	ReportScheduleRestApiPutTimezonePacificPitcairn                ReportScheduleRestApiPutTimezone = "Pacific/Pitcairn"
	ReportScheduleRestApiPutTimezonePacificPohnpei                 ReportScheduleRestApiPutTimezone = "Pacific/Pohnpei"
	ReportScheduleRestApiPutTimezonePacificPonape                  ReportScheduleRestApiPutTimezone = "Pacific/Ponape"
	ReportScheduleRestApiPutTimezonePacificPortMoresby             ReportScheduleRestApiPutTimezone = "Pacific/Port_Moresby"
	ReportScheduleRestApiPutTimezonePacificRarotonga               ReportScheduleRestApiPutTimezone = "Pacific/Rarotonga"
	ReportScheduleRestApiPutTimezonePacificSaipan                  ReportScheduleRestApiPutTimezone = "Pacific/Saipan"
	ReportScheduleRestApiPutTimezonePacificSamoa                   ReportScheduleRestApiPutTimezone = "Pacific/Samoa"
	ReportScheduleRestApiPutTimezonePacificTahiti                  ReportScheduleRestApiPutTimezone = "Pacific/Tahiti"
	ReportScheduleRestApiPutTimezonePacificTarawa                  ReportScheduleRestApiPutTimezone = "Pacific/Tarawa"
	ReportScheduleRestApiPutTimezonePacificTongatapu               ReportScheduleRestApiPutTimezone = "Pacific/Tongatapu"
	ReportScheduleRestApiPutTimezonePacificTruk                    ReportScheduleRestApiPutTimezone = "Pacific/Truk"
	ReportScheduleRestApiPutTimezonePacificWake                    ReportScheduleRestApiPutTimezone = "Pacific/Wake"
	ReportScheduleRestApiPutTimezonePacificWallis                  ReportScheduleRestApiPutTimezone = "Pacific/Wallis"
	ReportScheduleRestApiPutTimezonePacificYap                     ReportScheduleRestApiPutTimezone = "Pacific/Yap"
	ReportScheduleRestApiPutTimezonePoland                         ReportScheduleRestApiPutTimezone = "Poland"
	ReportScheduleRestApiPutTimezonePortugal                       ReportScheduleRestApiPutTimezone = "Portugal"
	ReportScheduleRestApiPutTimezoneROC                            ReportScheduleRestApiPutTimezone = "ROC"
	ReportScheduleRestApiPutTimezoneROK                            ReportScheduleRestApiPutTimezone = "ROK"
	ReportScheduleRestApiPutTimezoneSingapore                      ReportScheduleRestApiPutTimezone = "Singapore"
	ReportScheduleRestApiPutTimezoneTurkey                         ReportScheduleRestApiPutTimezone = "Turkey"
	ReportScheduleRestApiPutTimezoneUCT                            ReportScheduleRestApiPutTimezone = "UCT"
	ReportScheduleRestApiPutTimezoneUSAlaska                       ReportScheduleRestApiPutTimezone = "US/Alaska"
	ReportScheduleRestApiPutTimezoneUSAleutian                     ReportScheduleRestApiPutTimezone = "US/Aleutian"
	ReportScheduleRestApiPutTimezoneUSArizona                      ReportScheduleRestApiPutTimezone = "US/Arizona"
	ReportScheduleRestApiPutTimezoneUSCentral                      ReportScheduleRestApiPutTimezone = "US/Central"
	ReportScheduleRestApiPutTimezoneUSEastIndiana                  ReportScheduleRestApiPutTimezone = "US/East-Indiana"
	ReportScheduleRestApiPutTimezoneUSEastern                      ReportScheduleRestApiPutTimezone = "US/Eastern"
	ReportScheduleRestApiPutTimezoneUSHawaii                       ReportScheduleRestApiPutTimezone = "US/Hawaii"
	ReportScheduleRestApiPutTimezoneUSIndianaStarke                ReportScheduleRestApiPutTimezone = "US/Indiana-Starke"
	ReportScheduleRestApiPutTimezoneUSMichigan                     ReportScheduleRestApiPutTimezone = "US/Michigan"
	ReportScheduleRestApiPutTimezoneUSMountain                     ReportScheduleRestApiPutTimezone = "US/Mountain"
	ReportScheduleRestApiPutTimezoneUSPacific                      ReportScheduleRestApiPutTimezone = "US/Pacific"
	ReportScheduleRestApiPutTimezoneUSSamoa                        ReportScheduleRestApiPutTimezone = "US/Samoa"
	ReportScheduleRestApiPutTimezoneUTC                            ReportScheduleRestApiPutTimezone = "UTC"
	ReportScheduleRestApiPutTimezoneUniversal                      ReportScheduleRestApiPutTimezone = "Universal"
	ReportScheduleRestApiPutTimezoneWET                            ReportScheduleRestApiPutTimezone = "WET"
	ReportScheduleRestApiPutTimezoneWSU                            ReportScheduleRestApiPutTimezone = "W-SU"
	ReportScheduleRestApiPutTimezoneZulu                           ReportScheduleRestApiPutTimezone = "Zulu"
)

// Defines values for ReportScheduleRestApiPutType.
const (
	ReportScheduleRestApiPutTypeAlert  ReportScheduleRestApiPutType = "Alert"
	ReportScheduleRestApiPutTypeReport ReportScheduleRestApiPutType = "Report"
)

// Defines values for ReportScheduleRestApiPutValidatorType.
const (
	ReportScheduleRestApiPutValidatorTypeNotNull  ReportScheduleRestApiPutValidatorType = "not null"
	ReportScheduleRestApiPutValidatorTypeOperator ReportScheduleRestApiPutValidatorType = "operator"
)

// Defines values for GetInfoSchemaKeys.
const (
	GetInfoSchemaKeysAddColumns  GetInfoSchemaKeys = "add_columns"
	GetInfoSchemaKeysAddTitle    GetInfoSchemaKeys = "add_title"
	GetInfoSchemaKeysEditColumns GetInfoSchemaKeys = "edit_columns"
	GetInfoSchemaKeysEditTitle   GetInfoSchemaKeys = "edit_title"
	GetInfoSchemaKeysFilters     GetInfoSchemaKeys = "filters"
	GetInfoSchemaKeysNone        GetInfoSchemaKeys = "none"
	GetInfoSchemaKeysPermissions GetInfoSchemaKeys = "permissions"
)

// Defines values for GetItemSchemaKeys.
const (
	GetItemSchemaKeysDescriptionColumns GetItemSchemaKeys = "description_columns"
	GetItemSchemaKeysLabelColumns       GetItemSchemaKeys = "label_columns"
	GetItemSchemaKeysNone               GetItemSchemaKeys = "none"
	GetItemSchemaKeysShowColumns        GetItemSchemaKeys = "show_columns"
	GetItemSchemaKeysShowTitle          GetItemSchemaKeys = "show_title"
)

// Defines values for GetListSchemaKeys.
const (
	DescriptionColumns GetListSchemaKeys = "description_columns"
	LabelColumns       GetListSchemaKeys = "label_columns"
	ListColumns        GetListSchemaKeys = "list_columns"
	ListTitle          GetListSchemaKeys = "list_title"
	None               GetListSchemaKeys = "none"
	OrderColumns       GetListSchemaKeys = "order_columns"
)

// Defines values for GetListSchemaOrderDirection.
const (
	Asc  GetListSchemaOrderDirection = "asc"
	Desc GetListSchemaOrderDirection = "desc"
)

// AdvancedDataTypeSchema defines model for AdvancedDataTypeSchema.
type AdvancedDataTypeSchema struct {
	// The string representation of the parsed values
	DisplayValue         *string   `json:"display_value,omitempty"`
	ErrorMessage         *string   `json:"error_message,omitempty"`
	ValidFilterOperators *[]string `json:"valid_filter_operators,omitempty"`
	Values               *[]string `json:"values,omitempty"`
}

// AnnotationLayer defines model for AnnotationLayer.
type AnnotationLayer struct {
	// Type of annotation layer
	AnnotationType *AnnotationLayerAnnotationType `json:"annotationType,omitempty"`

	// Layer color
	Color *string `json:"color"`

	// Columns to use as the description. If none are provided, all will be shown.
	DescriptionColumns *[]string `json:"descriptionColumns,omitempty"`

	// Should line be hidden. Only applies to line annotations
	HideLine *bool `json:"hideLine"`

	// Column containing end of interval. Only applies to interval layers
	IntervalEndColumn *string `json:"intervalEndColumn"`

	// Name of layer
	Name string `json:"name"`

	// Opacity of layer
	Opacity *AnnotationLayerOpacity `json:"opacity"`

	// which properties should be overridable
	Overrides *AnnotationLayer_Overrides `json:"overrides"`

	// Should the layer be shown
	Show bool `json:"show"`

	// Should the label always be shown
	ShowLabel *bool `json:"showLabel"`

	// Should markers be shown. Only applies to line annotations.
	ShowMarkers bool `json:"showMarkers"`

	// Type of source for annotation data
	SourceType *AnnotationLayerSourceType `json:"sourceType,omitempty"`

	// Line style. Only applies to time-series annotations
	Style *AnnotationLayerStyle `json:"style,omitempty"`

	// Column with event date or interval start date
	TimeColumn *string `json:"timeColumn"`

	// Column with title
	TitleColumn *string `json:"titleColumn"`

	// For formula annotations, this contains the formula. For other types, this is the primary key of the source object.
	Value interface{} `json:"value"`

	// Width of annotation line
	Width *float32 `json:"width,omitempty"`
}

// Type of annotation layer
type AnnotationLayerAnnotationType string

// Opacity of layer
type AnnotationLayerOpacity string

// which properties should be overridable
type AnnotationLayer_Overrides struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Type of source for annotation data
type AnnotationLayerSourceType string

// Line style. Only applies to time-series annotations
type AnnotationLayerStyle string

// AnnotationLayerRestApiGet defines model for AnnotationLayerRestApi.get.
type AnnotationLayerRestApiGet struct {
	Descr *string `json:"descr"`
	Id    *int32  `json:"id,omitempty"`
	Name  *string `json:"name"`
}

// AnnotationLayerRestApiGetList defines model for AnnotationLayerRestApi.get_list.
type AnnotationLayerRestApiGetList struct {
	ChangedBy               *AnnotationLayerRestApiGetListUser1 `json:"changed_by,omitempty"`
	ChangedOn               *time.Time                          `json:"changed_on"`
	ChangedOnDeltaHumanized *interface{}                        `json:"changed_on_delta_humanized,omitempty"`
	CreatedBy               *AnnotationLayerRestApiGetListUser  `json:"created_by,omitempty"`
	CreatedOn               *time.Time                          `json:"created_on"`
	Descr                   *string                             `json:"descr"`
	Id                      *int32                              `json:"id,omitempty"`
	Name                    *string                             `json:"name"`
}

// AnnotationLayerRestApiGetListUser defines model for AnnotationLayerRestApi.get_list.User.
type AnnotationLayerRestApiGetListUser struct {
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
}

// AnnotationLayerRestApiGetListUser1 defines model for AnnotationLayerRestApi.get_list.User1.
type AnnotationLayerRestApiGetListUser1 struct {
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
}

// AnnotationLayerRestApiPost defines model for AnnotationLayerRestApi.post.
type AnnotationLayerRestApiPost struct {
	// Give a description for this annotation layer
	Descr *string `json:"descr"`

	// The annotation layer name
	Name string `json:"name"`
}

// AnnotationLayerRestApiPut defines model for AnnotationLayerRestApi.put.
type AnnotationLayerRestApiPut struct {
	// Give a description for this annotation layer
	Descr *string `json:"descr,omitempty"`

	// The annotation layer name
	Name *string `json:"name,omitempty"`
}

// AnnotationRestApiGet defines model for AnnotationRestApi.get.
type AnnotationRestApiGet struct {
	EndDttm      *time.Time                          `json:"end_dttm"`
	Id           *int32                              `json:"id,omitempty"`
	JsonMetadata *string                             `json:"json_metadata"`
	Layer        AnnotationRestApiGetAnnotationLayer `json:"layer"`
	LongDescr    *string                             `json:"long_descr"`
	ShortDescr   *string                             `json:"short_descr"`
	StartDttm    *time.Time                          `json:"start_dttm"`
}

// AnnotationRestApiGetAnnotationLayer defines model for AnnotationRestApi.get.AnnotationLayer.
type AnnotationRestApiGetAnnotationLayer struct {
	Id   *int32  `json:"id,omitempty"`
	Name *string `json:"name"`
}

// AnnotationRestApiGetList defines model for AnnotationRestApi.get_list.
type AnnotationRestApiGetList struct {
	ChangedBy               *AnnotationRestApiGetListUser  `json:"changed_by,omitempty"`
	ChangedOnDeltaHumanized *interface{}                   `json:"changed_on_delta_humanized,omitempty"`
	CreatedBy               *AnnotationRestApiGetListUser1 `json:"created_by,omitempty"`
	EndDttm                 *time.Time                     `json:"end_dttm"`
	Id                      *int32                         `json:"id,omitempty"`
	LongDescr               *string                        `json:"long_descr"`
	ShortDescr              *string                        `json:"short_descr"`
	StartDttm               *time.Time                     `json:"start_dttm"`
}

// AnnotationRestApiGetListUser defines model for AnnotationRestApi.get_list.User.
type AnnotationRestApiGetListUser struct {
	FirstName string `json:"first_name"`
	Id        *int32 `json:"id,omitempty"`
}

// AnnotationRestApiGetListUser1 defines model for AnnotationRestApi.get_list.User1.
type AnnotationRestApiGetListUser1 struct {
	FirstName string `json:"first_name"`
	Id        *int32 `json:"id,omitempty"`
}

// AnnotationRestApiPost defines model for AnnotationRestApi.post.
type AnnotationRestApiPost struct {
	// The annotation end date time
	EndDttm time.Time `json:"end_dttm"`

	// JSON metadata
	JsonMetadata *string `json:"json_metadata"`

	// A long description
	LongDescr *string `json:"long_descr"`

	// A short description
	ShortDescr string `json:"short_descr"`

	// The annotation start date time
	StartDttm time.Time `json:"start_dttm"`
}

// AnnotationRestApiPut defines model for AnnotationRestApi.put.
type AnnotationRestApiPut struct {
	// The annotation end date time
	EndDttm *time.Time `json:"end_dttm,omitempty"`

	// JSON metadata
	JsonMetadata *string `json:"json_metadata"`

	// A long description
	LongDescr *string `json:"long_descr"`

	// A short description
	ShortDescr *string `json:"short_descr,omitempty"`

	// The annotation start date time
	StartDttm *time.Time `json:"start_dttm,omitempty"`
}

// AvailableDomainsSchema defines model for AvailableDomainsSchema.
type AvailableDomainsSchema struct {
	Domains *[]string `json:"domains,omitempty"`
}

// CacheInvalidationRequestSchema defines model for CacheInvalidationRequestSchema.
type CacheInvalidationRequestSchema struct {
	// The uid of the dataset/datasource this new chart will use. A complete datasource identification needs `datasouce_uid`
	DatasourceUids *[]string `json:"datasource_uids,omitempty"`

	// A list of the data source and database names
	Datasources *[]Datasource `json:"datasources,omitempty"`
}

// ChartCacheScreenshotResponseSchema defines model for ChartCacheScreenshotResponseSchema.
type ChartCacheScreenshotResponseSchema struct {
	// The cache key
	CacheKey *string `json:"cache_key,omitempty"`

	// The url to render the chart
	ChartUrl *string `json:"chart_url,omitempty"`

	// The url to fetch the screenshot
	ImageUrl *string `json:"image_url,omitempty"`
}

// ChartDataAsyncResponseSchema defines model for ChartDataAsyncResponseSchema.
type ChartDataAsyncResponseSchema struct {
	// Unique session async channel ID
	ChannelId *string `json:"channel_id,omitempty"`

	// Unique async job ID
	JobId *string `json:"job_id,omitempty"`

	// Unique result URL for fetching async query data
	ResultUrl *string `json:"result_url,omitempty"`

	// Status value for async job
	Status *string `json:"status,omitempty"`

	// Requesting user ID
	UserId *string `json:"user_id"`
}

// ChartDataDatasource defines model for ChartDataDatasource.
type ChartDataDatasource struct {
	// Datasource id
	Id int32 `json:"id"`

	// Datasource type
	Type *ChartDataDatasourceType `json:"type,omitempty"`
}

// Datasource type
type ChartDataDatasourceType string

// ChartDataExtras defines model for ChartDataExtras.
type ChartDataExtras struct {
	// HAVING clause to be added to aggregate queries using AND operator.
	Having *string `json:"having,omitempty"`

	// HAVING filters to be added to legacy Druid datasource queries. This field is deprecated
	HavingDruid *[]ChartDataFilter `json:"having_druid,omitempty"`

	// End time for relative time deltas. Default: `config["DEFAULT_RELATIVE_START_TIME"]`
	RelativeEnd *ChartDataExtrasRelativeEnd `json:"relative_end,omitempty"`

	// Start time for relative time deltas. Default: `config["DEFAULT_RELATIVE_START_TIME"]`
	RelativeStart *ChartDataExtrasRelativeStart `json:"relative_start,omitempty"`

	// To what level of granularity should the temporal column be aggregated. Supports [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) durations.
	TimeGrainSqla *ChartDataExtrasTimeGrainSqla `json:"time_grain_sqla"`

	// WHERE clause to be added to queries using AND operator.
	Where *string `json:"where,omitempty"`
}

// End time for relative time deltas. Default: `config["DEFAULT_RELATIVE_START_TIME"]`
type ChartDataExtrasRelativeEnd string

// Start time for relative time deltas. Default: `config["DEFAULT_RELATIVE_START_TIME"]`
type ChartDataExtrasRelativeStart string

// To what level of granularity should the temporal column be aggregated. Supports [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) durations.
type ChartDataExtrasTimeGrainSqla string

// ChartDataFilter defines model for ChartDataFilter.
type ChartDataFilter struct {
	// The column to filter by. Can be either a string (physical or saved expression) or an object (adhoc column)
	Col interface{} `json:"col"`

	// Optional time grain for temporal filters
	Grain *string `json:"grain,omitempty"`

	// Indicates if the filter has been added by a filter component as opposed to being a part of the original query.
	IsExtra *bool `json:"isExtra,omitempty"`

	// The comparison operator.
	Op string `json:"op"`

	// The value or values to compare against. Can be a string, integer, decimal or list, depending on the operator.
	Val *interface{} `json:"val,omitempty"`
}

// ChartDataPostProcessingOperation defines model for ChartDataPostProcessingOperation.
type ChartDataPostProcessingOperation struct {
	// Post processing operation type
	Operation ChartDataPostProcessingOperationOperation `json:"operation"`

	// Options specifying how to perform the operation. Please refer to the respective post processing operation option schemas. For example, `ChartDataPostProcessingOperationOptions` specifies the required options for the pivot operation.
	Options *map[string]interface{} `json:"options,omitempty"`
}

// Post processing operation type
type ChartDataPostProcessingOperationOperation string

// ChartDataQueryContextSchema defines model for ChartDataQueryContextSchema.
type ChartDataQueryContextSchema struct {
	Datasource *ChartDataDatasource `json:"datasource,omitempty"`

	// Should the queries be forced to load from the source. Default: `false`
	Force        *bool                   `json:"force,omitempty"`
	FormData     *interface{}            `json:"form_data"`
	Queries      *[]ChartDataQueryObject `json:"queries,omitempty"`
	ResultFormat *interface{}            `json:"result_format,omitempty"`
	ResultType   *interface{}            `json:"result_type,omitempty"`
}

// ChartDataQueryObject defines model for ChartDataQueryObject.
type ChartDataQueryObject struct {
	// Annotation layers to apply to chart
	AnnotationLayers *[]AnnotationLayer `json:"annotation_layers"`

	// A mapping of temporal extras that have been applied to the query
	AppliedTimeExtras *map[string]interface{} `json:"applied_time_extras"`

	// Add fetch values predicate (where clause) to query if defined in datasource
	ApplyFetchValuesPredicate *bool `json:"apply_fetch_values_predicate"`

	// Columns which to select in the query.
	Columns    *[]interface{} `json:"columns"`
	Datasource *struct {
		// Datasource id
		Id int32 `json:"id"`

		// Datasource type
		Type *ChartDataQueryObjectDatasourceType `json:"type,omitempty"`
	} `json:"datasource"`

	// Starting point for time grain counting on legacy Druid datasources. Used to change e.g. Monday/Sunday first-day-of-week. This field is deprecated and should be passed to `extras` as `druid_time_origin`.
	DruidTimeOrigin *string `json:"druid_time_origin"`

	// Extra parameters to add to the query.
	Extras *struct {
		// HAVING clause to be added to aggregate queries using AND operator.
		Having *string `json:"having,omitempty"`

		// HAVING filters to be added to legacy Druid datasource queries. This field is deprecated
		HavingDruid *[]ChartDataFilter `json:"having_druid,omitempty"`

		// End time for relative time deltas. Default: `config["DEFAULT_RELATIVE_START_TIME"]`
		RelativeEnd *ChartDataQueryObjectExtrasRelativeEnd `json:"relative_end,omitempty"`

		// Start time for relative time deltas. Default: `config["DEFAULT_RELATIVE_START_TIME"]`
		RelativeStart *ChartDataQueryObjectExtrasRelativeStart `json:"relative_start,omitempty"`

		// To what level of granularity should the temporal column be aggregated. Supports [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) durations.
		TimeGrainSqla *ChartDataQueryObjectExtrasTimeGrainSqla `json:"time_grain_sqla"`

		// WHERE clause to be added to queries using AND operator.
		Where *string `json:"where,omitempty"`
	} `json:"extras"`
	Filters *[]ChartDataFilter `json:"filters"`

	// Name of temporal column used for time filtering. For legacy Druid datasources this defines the time grain.
	Granularity *string `json:"granularity"`

	// Name of temporal column used for time filtering for SQL datasources. This field is deprecated, use `granularity` instead.
	GranularitySqla *string `json:"granularity_sqla"`

	// Columns by which to group the query. This field is deprecated, use `columns` instead.
	Groupby *[]interface{} `json:"groupby"`

	// HAVING clause to be added to aggregate queries using AND operator. This field is deprecated and should be passed to `extras`.
	Having *string `json:"having"`

	// HAVING filters to be added to legacy Druid datasource queries. This field is deprecated and should be passed to `extras` as `having_druid`.
	HavingFilters *[]ChartDataFilter `json:"having_filters"`

	// Should the rowcount of the actual query be returned
	IsRowcount *bool `json:"is_rowcount"`

	// Is the `query_object` a timeseries.
	IsTimeseries *bool `json:"is_timeseries"`

	// Aggregate expressions. Metrics can be passed as both references to datasource metrics (strings), or ad-hoc metricswhich are defined only within the query object. See `ChartDataAdhocMetricSchema` for the structure of ad-hoc metrics.
	Metrics *[]interface{} `json:"metrics"`

	// Reverse order. Default: `false`
	OrderDesc *bool `json:"order_desc"`

	// Expects a list of lists where the first element is the column name which to sort by, and the second element is a boolean.
	Orderby *[]interface{} `json:"orderby"`

	// Post processing operations to be applied to the result set. Operations are applied to the result set in sequential order.
	PostProcessing *[]struct {
		// Post processing operation type
		Operation ChartDataQueryObjectPostProcessingOperation `json:"operation"`

		// Options specifying how to perform the operation. Please refer to the respective post processing operation option schemas. For example, `ChartDataPostProcessingOperationOptions` specifies the required options for the pivot operation.
		Options *map[string]interface{} `json:"options,omitempty"`
	} `json:"post_processing"`
	ResultType *interface{} `json:"result_type"`

	// Maximum row count (0=disabled). Default: `config["ROW_LIMIT"]`
	RowLimit *int32 `json:"row_limit"`

	// Number of rows to skip. Default: `0`
	RowOffset *int32 `json:"row_offset"`

	// Columns to use when limiting series count. All columns must be present in the `columns` property. Requires `series_limit` and `series_limit_metric` to be set.
	SeriesColumns *[]interface{} `json:"series_columns"`

	// Maximum number of series. Requires `series` and `series_limit_metric` to be set.
	SeriesLimit *int32 `json:"series_limit"`

	// Metric used to limit timeseries queries by. Requires `series` and `series_limit` to be set.
	SeriesLimitMetric *interface{} `json:"series_limit_metric"`
	TimeOffsets       *[]string    `json:"time_offsets"`

	// A time rage, either expressed as a colon separated string `since : until` or human readable freeform. Valid formats for `since` and `until` are:
	// - ISO 8601
	// - X days/years/hours/day/year/weeks
	// - X days/years/hours/day/year/weeks ago
	// - X days/years/hours/day/year/weeks from now
	//
	// Additionally, the following freeform can be used:
	//
	// - Last day
	// - Last week
	// - Last month
	// - Last quarter
	// - Last year
	// - No filter
	// - Last X seconds/minutes/hours/days/weeks/months/years
	// - Next X seconds/minutes/hours/days/weeks/months/years
	TimeRange *string `json:"time_range"`

	// A human-readable date/time string. Please refer to [parsdatetime](https://github.com/bear/parsedatetime) documentation for details on valid values.
	TimeShift *string `json:"time_shift"`

	// Maximum row count for timeseries queries. This field is deprecated, use `series_limit` instead.Default: `0`
	TimeseriesLimit *int32 `json:"timeseries_limit"`

	// Metric used to limit timeseries queries by. This field is deprecated, use `series_limit_metric` instead.
	TimeseriesLimitMetric *interface{} `json:"timeseries_limit_metric"`

	// Optional query parameters passed to a dashboard or Explore view
	UrlParams *ChartDataQueryObject_UrlParams `json:"url_params"`

	// WHERE clause to be added to queries using AND operator.This field is deprecated and should be passed to `extras`.
	Where *string `json:"where"`
}

// Datasource type
type ChartDataQueryObjectDatasourceType string

// End time for relative time deltas. Default: `config["DEFAULT_RELATIVE_START_TIME"]`
type ChartDataQueryObjectExtrasRelativeEnd string

// Start time for relative time deltas. Default: `config["DEFAULT_RELATIVE_START_TIME"]`
type ChartDataQueryObjectExtrasRelativeStart string

// To what level of granularity should the temporal column be aggregated. Supports [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) durations.
type ChartDataQueryObjectExtrasTimeGrainSqla string

// Post processing operation type
type ChartDataQueryObjectPostProcessingOperation string

// Optional query parameters passed to a dashboard or Explore view
type ChartDataQueryObject_UrlParams struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ChartDataResponseResult defines model for ChartDataResponseResult.
type ChartDataResponseResult struct {
	// All requested annotation data
	AnnotationData *[]struct {
		AdditionalProperties map[string]string `json:"-"`
	} `json:"annotation_data"`

	// A list with applied filters
	AppliedFilters *[]map[string]interface{} `json:"applied_filters,omitempty"`

	// Unique cache key for query object
	CacheKey *string `json:"cache_key"`

	// Cache timeout in following order: custom timeout, datasource timeout, default config timeout.
	CacheTimeout *int32 `json:"cache_timeout"`

	// Cache timestamp
	CachedDttm *string `json:"cached_dttm"`

	// A list of column names
	Colnames *[]string `json:"colnames,omitempty"`

	// A list of generic data types of each column
	Coltypes *[]int32 `json:"coltypes,omitempty"`

	// A list with results
	Data *[]map[string]interface{} `json:"data,omitempty"`

	// Error
	Error    *string `json:"error"`
	FromDttm *int32  `json:"from_dttm"`

	// Is the result cached
	IsCached bool `json:"is_cached"`

	// The executed query statement
	Query string `json:"query"`

	// A list with rejected filters
	RejectedFilters *[]map[string]interface{} `json:"rejected_filters,omitempty"`

	// Amount of rows in result set
	Rowcount   *int32  `json:"rowcount,omitempty"`
	Stacktrace *string `json:"stacktrace"`

	// Status of the query
	Status *ChartDataResponseResultStatus `json:"status,omitempty"`
	ToDttm *int32                         `json:"to_dttm"`
}

// Status of the query
type ChartDataResponseResultStatus string

// ChartDataResponseSchema defines model for ChartDataResponseSchema.
type ChartDataResponseSchema struct {
	// A list of results for each corresponding query in the request.
	Result *[]ChartDataResponseResult `json:"result,omitempty"`
}

// ChartEntityResponseSchema defines model for ChartEntityResponseSchema.
type ChartEntityResponseSchema struct {
	// Duration (in seconds) of the caching timeout for this chart. Note this defaults to the datasource/table timeout if undefined.
	CacheTimeout *int32 `json:"cache_timeout,omitempty"`

	// Details of the certification
	CertificationDetails *string `json:"certification_details,omitempty"`

	// Person or group that has certified this chart
	CertifiedBy *string `json:"certified_by,omitempty"`

	// The ISO date that the chart was last changed.
	ChangedOn *string `json:"changed_on,omitempty"`

	// A description of the chart propose.
	Description *string `json:"description,omitempty"`

	// Sanitized HTML version of the chart description.
	DescriptionMarkeddown *string `json:"description_markeddown,omitempty"`

	// Form data from the Explore controls used to form the chart's data query.
	FormData *map[string]interface{} `json:"form_data,omitempty"`
	SliceId  *int32                  `json:"slice_id,omitempty"`

	// The name of the chart.
	SliceName *string `json:"slice_name,omitempty"`

	// The URL of the chart.
	SliceUrl *string `json:"slice_url,omitempty"`
}

// ChartFavStarResponseResult defines model for ChartFavStarResponseResult.
type ChartFavStarResponseResult struct {
	// The Chart id
	Id *int32 `json:"id,omitempty"`

	// The FaveStar value
	Value *bool `json:"value,omitempty"`
}

// ChartRestApiGet defines model for ChartRestApi.get.
type ChartRestApiGet struct {
	CacheTimeout            *int32                      `json:"cache_timeout"`
	CertificationDetails    *string                     `json:"certification_details"`
	CertifiedBy             *string                     `json:"certified_by"`
	ChangedOnDeltaHumanized *interface{}                `json:"changed_on_delta_humanized,omitempty"`
	Dashboards              *[]ChartRestApiGetDashboard `json:"dashboards,omitempty"`
	Description             *string                     `json:"description"`
	Id                      *int32                      `json:"id,omitempty"`
	IsManagedExternally     *bool                       `json:"is_managed_externally,omitempty"`
	Owners                  *[]ChartRestApiGetUser      `json:"owners,omitempty"`
	Params                  *string                     `json:"params"`
	QueryContext            *string                     `json:"query_context"`
	SliceName               *string                     `json:"slice_name"`
	ThumbnailUrl            *interface{}                `json:"thumbnail_url,omitempty"`
	Url                     *interface{}                `json:"url,omitempty"`
	VizType                 *string                     `json:"viz_type"`
}

// ChartRestApiGetDashboard defines model for ChartRestApi.get.Dashboard.
type ChartRestApiGetDashboard struct {
	DashboardTitle *string `json:"dashboard_title"`
	Id             *int32  `json:"id,omitempty"`
	JsonMetadata   *string `json:"json_metadata"`
}

// ChartRestApiGetUser defines model for ChartRestApi.get.User.
type ChartRestApiGetUser struct {
	FirstName string `json:"first_name"`
	Id        *int32 `json:"id,omitempty"`
	LastName  string `json:"last_name"`
	Username  string `json:"username"`
}

// ChartRestApiGetList defines model for ChartRestApi.get_list.
type ChartRestApiGetList struct {
	CacheTimeout            *int32                        `json:"cache_timeout"`
	CertificationDetails    *string                       `json:"certification_details"`
	CertifiedBy             *string                       `json:"certified_by"`
	ChangedBy               *ChartRestApiGetListUser3     `json:"changed_by,omitempty"`
	ChangedByName           *interface{}                  `json:"changed_by_name,omitempty"`
	ChangedByUrl            *interface{}                  `json:"changed_by_url,omitempty"`
	ChangedOnDeltaHumanized *interface{}                  `json:"changed_on_delta_humanized,omitempty"`
	ChangedOnUtc            *interface{}                  `json:"changed_on_utc,omitempty"`
	CreatedBy               *ChartRestApiGetListUser2     `json:"created_by,omitempty"`
	DatasourceId            *int32                        `json:"datasource_id"`
	DatasourceNameText      *interface{}                  `json:"datasource_name_text,omitempty"`
	DatasourceType          *string                       `json:"datasource_type"`
	DatasourceUrl           *interface{}                  `json:"datasource_url,omitempty"`
	Description             *string                       `json:"description"`
	DescriptionMarkeddown   *interface{}                  `json:"description_markeddown,omitempty"`
	EditUrl                 *interface{}                  `json:"edit_url,omitempty"`
	Id                      *int32                        `json:"id,omitempty"`
	IsManagedExternally     *bool                         `json:"is_managed_externally,omitempty"`
	LastSavedAt             *time.Time                    `json:"last_saved_at"`
	LastSavedBy             *ChartRestApiGetListUser1     `json:"last_saved_by,omitempty"`
	Owners                  *ChartRestApiGetListUser      `json:"owners,omitempty"`
	Params                  *string                       `json:"params"`
	SliceName               *string                       `json:"slice_name"`
	Table                   *ChartRestApiGetListSqlaTable `json:"table,omitempty"`
	ThumbnailUrl            *interface{}                  `json:"thumbnail_url,omitempty"`
	Url                     *interface{}                  `json:"url,omitempty"`
	VizType                 *string                       `json:"viz_type"`
}

// ChartRestApiGetListSqlaTable defines model for ChartRestApi.get_list.SqlaTable.
type ChartRestApiGetListSqlaTable struct {
	DefaultEndpoint *string `json:"default_endpoint"`
	TableName       string  `json:"table_name"`
}

// ChartRestApiGetListUser defines model for ChartRestApi.get_list.User.
type ChartRestApiGetListUser struct {
	FirstName string `json:"first_name"`
	Id        *int32 `json:"id,omitempty"`
	LastName  string `json:"last_name"`
	Username  string `json:"username"`
}

// ChartRestApiGetListUser1 defines model for ChartRestApi.get_list.User1.
type ChartRestApiGetListUser1 struct {
	FirstName string `json:"first_name"`
	Id        *int32 `json:"id,omitempty"`
	LastName  string `json:"last_name"`
}

// ChartRestApiGetListUser2 defines model for ChartRestApi.get_list.User2.
type ChartRestApiGetListUser2 struct {
	FirstName string `json:"first_name"`
	Id        *int32 `json:"id,omitempty"`
	LastName  string `json:"last_name"`
}

// ChartRestApiGetListUser3 defines model for ChartRestApi.get_list.User3.
type ChartRestApiGetListUser3 struct {
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
}

// ChartRestApiPost defines model for ChartRestApi.post.
type ChartRestApiPost struct {
	// Duration (in seconds) of the caching timeout for this chart. Note this defaults to the datasource/table timeout if undefined.
	CacheTimeout *int32 `json:"cache_timeout"`

	// Details of the certification
	CertificationDetails *string `json:"certification_details"`

	// Person or group that has certified this chart
	CertifiedBy *string  `json:"certified_by"`
	Dashboards  *[]int32 `json:"dashboards,omitempty"`

	// The id of the dataset/datasource this new chart will use. A complete datasource identification needs `datasouce_id` and `datasource_type`.
	DatasourceId int32 `json:"datasource_id"`

	// The datasource name.
	DatasourceName *string `json:"datasource_name"`

	// The type of dataset/datasource identified on `datasource_id`.
	DatasourceType ChartRestApiPostDatasourceType `json:"datasource_type"`

	// A description of the chart propose.
	Description         *string  `json:"description"`
	ExternalUrl         *string  `json:"external_url"`
	IsManagedExternally *bool    `json:"is_managed_externally"`
	Owners              *[]int32 `json:"owners,omitempty"`

	// Parameters are generated dynamically when clicking the save or overwrite button in the explore view. This JSON object for power users who may want to alter specific parameters.
	Params *string `json:"params"`

	// The query context represents the queries that need to run in order to generate the data the visualization, and in what format the data should be returned.
	QueryContext *string `json:"query_context"`

	// The query context generation represents whether the query_contextis user generated or not so that it does not update user modfiedstate.
	QueryContextGeneration *bool `json:"query_context_generation"`

	// The name of the chart.
	SliceName string `json:"slice_name"`

	// The type of chart visualization used.
	VizType *string `json:"viz_type,omitempty"`
}

// The type of dataset/datasource identified on `datasource_id`.
type ChartRestApiPostDatasourceType string

// ChartRestApiPut defines model for ChartRestApi.put.
type ChartRestApiPut struct {
	// Duration (in seconds) of the caching timeout for this chart. Note this defaults to the datasource/table timeout if undefined.
	CacheTimeout *int32 `json:"cache_timeout,omitempty"`

	// Details of the certification
	CertificationDetails *string `json:"certification_details,omitempty"`

	// Person or group that has certified this chart
	CertifiedBy *string  `json:"certified_by,omitempty"`
	Dashboards  *[]int32 `json:"dashboards,omitempty"`

	// The id of the dataset/datasource this new chart will use. A complete datasource identification needs `datasouce_id` and `datasource_type`.
	DatasourceId *int32 `json:"datasource_id,omitempty"`

	// The type of dataset/datasource identified on `datasource_id`.
	DatasourceType *ChartRestApiPutDatasourceType `json:"datasource_type,omitempty"`

	// A description of the chart propose.
	Description         *string  `json:"description,omitempty"`
	ExternalUrl         *string  `json:"external_url,omitempty"`
	IsManagedExternally *bool    `json:"is_managed_externally,omitempty"`
	Owners              *[]int32 `json:"owners,omitempty"`

	// Parameters are generated dynamically when clicking the save or overwrite button in the explore view. This JSON object for power users who may want to alter specific parameters.
	Params *string `json:"params,omitempty"`

	// The query context represents the queries that need to run in order to generate the data the visualization, and in what format the data should be returned.
	QueryContext *string `json:"query_context,omitempty"`

	// The query context generation represents whether the query_contextis user generated or not so that it does not update user modfiedstate.
	QueryContextGeneration *bool `json:"query_context_generation,omitempty"`

	// The name of the chart.
	SliceName *string `json:"slice_name,omitempty"`

	// The type of chart visualization used.
	VizType *string `json:"viz_type,omitempty"`
}

// The type of dataset/datasource identified on `datasource_id`.
type ChartRestApiPutDatasourceType string

// CssTemplateRestApiGet defines model for CssTemplateRestApi.get.
type CssTemplateRestApiGet struct {
	CreatedBy    *CssTemplateRestApiGetUser `json:"created_by,omitempty"`
	Css          *string                    `json:"css"`
	Id           *int32                     `json:"id,omitempty"`
	TemplateName *string                    `json:"template_name"`
}

// CssTemplateRestApiGetUser defines model for CssTemplateRestApi.get.User.
type CssTemplateRestApiGetUser struct {
	FirstName string `json:"first_name"`
	Id        *int32 `json:"id,omitempty"`
	LastName  string `json:"last_name"`
}

// CssTemplateRestApiGetList defines model for CssTemplateRestApi.get_list.
type CssTemplateRestApiGetList struct {
	ChangedBy               *CssTemplateRestApiGetListUser  `json:"changed_by,omitempty"`
	ChangedOnDeltaHumanized *interface{}                    `json:"changed_on_delta_humanized,omitempty"`
	CreatedBy               *CssTemplateRestApiGetListUser1 `json:"created_by,omitempty"`
	CreatedOn               *time.Time                      `json:"created_on"`
	Css                     *string                         `json:"css"`
	Id                      *int32                          `json:"id,omitempty"`
	TemplateName            *string                         `json:"template_name"`
}

// CssTemplateRestApiGetListUser defines model for CssTemplateRestApi.get_list.User.
type CssTemplateRestApiGetListUser struct {
	FirstName string `json:"first_name"`
	Id        *int32 `json:"id,omitempty"`
	LastName  string `json:"last_name"`
}

// CssTemplateRestApiGetListUser1 defines model for CssTemplateRestApi.get_list.User1.
type CssTemplateRestApiGetListUser1 struct {
	FirstName string `json:"first_name"`
	Id        *int32 `json:"id,omitempty"`
	LastName  string `json:"last_name"`
}

// CssTemplateRestApiPost defines model for CssTemplateRestApi.post.
type CssTemplateRestApiPost struct {
	Css          *string `json:"css"`
	TemplateName *string `json:"template_name"`
}

// CssTemplateRestApiPut defines model for CssTemplateRestApi.put.
type CssTemplateRestApiPut struct {
	Css          *string `json:"css"`
	TemplateName *string `json:"template_name"`
}

// DashboardDatasetSchema defines model for DashboardDatasetSchema.
type DashboardDatasetSchema struct {
	CacheTimeout         *int32                             `json:"cache_timeout,omitempty"`
	ColumnFormats        *map[string]interface{}            `json:"column_formats,omitempty"`
	ColumnTypes          *[]int32                           `json:"column_types,omitempty"`
	Columns              *[]map[string]interface{}          `json:"columns,omitempty"`
	Database             *Database                          `json:"database,omitempty"`
	DatasourceName       *string                            `json:"datasource_name,omitempty"`
	DefaultEndpoint      *string                            `json:"default_endpoint,omitempty"`
	EditUrl              *string                            `json:"edit_url,omitempty"`
	FetchValuesPredicate *string                            `json:"fetch_values_predicate,omitempty"`
	FilterSelect         *bool                              `json:"filter_select,omitempty"`
	FilterSelectEnabled  *bool                              `json:"filter_select_enabled,omitempty"`
	GranularitySqla      *[][]string                        `json:"granularity_sqla,omitempty"`
	HealthCheckMessage   *string                            `json:"health_check_message,omitempty"`
	Id                   *int32                             `json:"id,omitempty"`
	IsSqllabView         *bool                              `json:"is_sqllab_view,omitempty"`
	MainDttmCol          *string                            `json:"main_dttm_col,omitempty"`
	Metrics              *[]map[string]interface{}          `json:"metrics,omitempty"`
	Name                 *string                            `json:"name,omitempty"`
	Offset               *int32                             `json:"offset,omitempty"`
	OrderByChoices       *[][]string                        `json:"order_by_choices,omitempty"`
	Owners               *[]map[string]interface{}          `json:"owners,omitempty"`
	Params               *string                            `json:"params,omitempty"`
	Perm                 *string                            `json:"perm,omitempty"`
	Schema               *string                            `json:"schema,omitempty"`
	SelectStar           *string                            `json:"select_star,omitempty"`
	Sql                  *string                            `json:"sql,omitempty"`
	TableName            *string                            `json:"table_name,omitempty"`
	TemplateParams       *string                            `json:"template_params,omitempty"`
	TimeGrainSqla        *[][]string                        `json:"time_grain_sqla,omitempty"`
	Type                 *string                            `json:"type,omitempty"`
	Uid                  *string                            `json:"uid,omitempty"`
	VerboseMap           *DashboardDatasetSchema_VerboseMap `json:"verbose_map,omitempty"`
}

// DashboardDatasetSchema_VerboseMap defines model for DashboardDatasetSchema.VerboseMap.
type DashboardDatasetSchema_VerboseMap struct {
	AdditionalProperties map[string]string `json:"-"`
}

// DashboardGetResponseSchema defines model for DashboardGetResponseSchema.
type DashboardGetResponseSchema struct {
	// Details of the certification
	CertificationDetails *string `json:"certification_details,omitempty"`

	// Person or group that has certified this dashboard
	CertifiedBy             *string       `json:"certified_by,omitempty"`
	ChangedBy               *User         `json:"changed_by,omitempty"`
	ChangedByName           *string       `json:"changed_by_name,omitempty"`
	ChangedByUrl            *string       `json:"changed_by_url,omitempty"`
	ChangedOn               *SupersetTime `json:"changed_on,omitempty"`
	ChangedOnDeltaHumanized *string       `json:"changed_on_delta_humanized,omitempty"`
	Charts                  *[]string     `json:"charts,omitempty"`

	// Override CSS for the dashboard.
	Css *string `json:"css,omitempty"`

	// A title for the dashboard.
	DashboardTitle      *string `json:"dashboard_title,omitempty"`
	Id                  *int32  `json:"id,omitempty"`
	IsManagedExternally *bool   `json:"is_managed_externally"`

	// This JSON object is generated dynamically when clicking the save or overwrite button in the dashboard view. It is exposed here for reference and for power users who may want to alter  specific parameters.
	JsonMetadata *string `json:"json_metadata,omitempty"`
	Owners       *[]User `json:"owners,omitempty"`

	// This json object describes the positioning of the widgets in the dashboard. It is dynamically generated when adjusting the widgets size and positions by using drag & drop in the dashboard view
	PositionJson *string  `json:"position_json,omitempty"`
	Published    *bool    `json:"published,omitempty"`
	Roles        *[]Roles `json:"roles,omitempty"`
	Slug         *string  `json:"slug,omitempty"`
	ThumbnailUrl *string  `json:"thumbnail_url,omitempty"`
	Url          *string  `json:"url,omitempty"`
}

// DashboardPermalinkPostSchema defines model for DashboardPermalinkPostSchema.
type DashboardPermalinkPostSchema struct {
	// Current active dashboard tabs
	ActiveTabs *[]string `json:"activeTabs"`

	// Optional anchor link added to url hash
	Anchor *string `json:"anchor"`

	// Data mask used for native filter state
	DataMask *map[string]interface{} `json:"dataMask"`

	// URL Parameters
	UrlParams *[]interface{} `json:"urlParams"`
}

// DashboardRestApiGetList defines model for DashboardRestApi.get_list.
type DashboardRestApiGetList struct {
	CertificationDetails    *string                       `json:"certification_details"`
	CertifiedBy             *string                       `json:"certified_by"`
	ChangedBy               *DashboardRestApiGetListUser2 `json:"changed_by,omitempty"`
	ChangedByName           *interface{}                  `json:"changed_by_name,omitempty"`
	ChangedByUrl            *interface{}                  `json:"changed_by_url,omitempty"`
	ChangedOnDeltaHumanized *interface{}                  `json:"changed_on_delta_humanized,omitempty"`
	ChangedOnUtc            *interface{}                  `json:"changed_on_utc,omitempty"`
	CreatedBy               *DashboardRestApiGetListUser1 `json:"created_by,omitempty"`
	CreatedOnDeltaHumanized *interface{}                  `json:"created_on_delta_humanized,omitempty"`
	Css                     *string                       `json:"css"`
	DashboardTitle          *string                       `json:"dashboard_title"`
	Id                      *int32                        `json:"id,omitempty"`
	IsManagedExternally     *bool                         `json:"is_managed_externally,omitempty"`
	JsonMetadata            *string                       `json:"json_metadata"`
	Owners                  *DashboardRestApiGetListUser  `json:"owners,omitempty"`
	PositionJson            *string                       `json:"position_json"`
	Published               *bool                         `json:"published"`
	Roles                   *DashboardRestApiGetListRole  `json:"roles,omitempty"`
	Slug                    *string                       `json:"slug"`
	Status                  *interface{}                  `json:"status,omitempty"`
	ThumbnailUrl            *interface{}                  `json:"thumbnail_url,omitempty"`
	Url                     *interface{}                  `json:"url,omitempty"`
}

// DashboardRestApiGetListRole defines model for DashboardRestApi.get_list.Role.
type DashboardRestApiGetListRole struct {
	Id   *int32 `json:"id,omitempty"`
	Name string `json:"name"`
}

// DashboardRestApiGetListUser defines model for DashboardRestApi.get_list.User.
type DashboardRestApiGetListUser struct {
	Email     string `json:"email"`
	FirstName string `json:"first_name"`
	Id        *int32 `json:"id,omitempty"`
	LastName  string `json:"last_name"`
	Username  string `json:"username"`
}

// DashboardRestApiGetListUser1 defines model for DashboardRestApi.get_list.User1.
type DashboardRestApiGetListUser1 struct {
	FirstName string `json:"first_name"`
	Id        *int32 `json:"id,omitempty"`
	LastName  string `json:"last_name"`
}

// DashboardRestApiGetListUser2 defines model for DashboardRestApi.get_list.User2.
type DashboardRestApiGetListUser2 struct {
	FirstName string `json:"first_name"`
	Id        *int32 `json:"id,omitempty"`
	LastName  string `json:"last_name"`
	Username  string `json:"username"`
}

// DashboardRestApiPost defines model for DashboardRestApi.post.
type DashboardRestApiPost struct {
	// Details of the certification
	CertificationDetails *string `json:"certification_details"`

	// Person or group that has certified this dashboard
	CertifiedBy *string `json:"certified_by"`
	Css         *string `json:"css,omitempty"`

	// A title for the dashboard.
	DashboardTitle      *string `json:"dashboard_title"`
	ExternalUrl         *string `json:"external_url"`
	IsManagedExternally *bool   `json:"is_managed_externally"`

	// This JSON object is generated dynamically when clicking the save or overwrite button in the dashboard view. It is exposed here for reference and for power users who may want to alter  specific parameters.
	JsonMetadata *string  `json:"json_metadata,omitempty"`
	Owners       *[]int32 `json:"owners,omitempty"`

	// This json object describes the positioning of the widgets in the dashboard. It is dynamically generated when adjusting the widgets size and positions by using drag & drop in the dashboard view
	PositionJson *string `json:"position_json,omitempty"`

	// Determines whether or not this dashboard is visible in the list of all dashboards.
	Published *bool    `json:"published,omitempty"`
	Roles     *[]int32 `json:"roles,omitempty"`

	// Unique identifying part for the web address of the dashboard.
	Slug *string `json:"slug"`
}

// DashboardRestApiPut defines model for DashboardRestApi.put.
type DashboardRestApiPut struct {
	// Details of the certification
	CertificationDetails *string `json:"certification_details,omitempty"`

	// Person or group that has certified this dashboard
	CertifiedBy *string `json:"certified_by,omitempty"`

	// Override CSS for the dashboard.
	Css *string `json:"css,omitempty"`

	// A title for the dashboard.
	DashboardTitle      *string `json:"dashboard_title,omitempty"`
	ExternalUrl         *string `json:"external_url,omitempty"`
	IsManagedExternally *bool   `json:"is_managed_externally,omitempty"`

	// This JSON object is generated dynamically when clicking the save or overwrite button in the dashboard view. It is exposed here for reference and for power users who may want to alter  specific parameters.
	JsonMetadata *string  `json:"json_metadata,omitempty"`
	Owners       *[]int32 `json:"owners,omitempty"`

	// This json object describes the positioning of the widgets in the dashboard. It is dynamically generated when adjusting the widgets size and positions by using drag & drop in the dashboard view
	PositionJson *string `json:"position_json,omitempty"`

	// Determines whether or not this dashboard is visible in the list of all dashboards.
	Published *bool    `json:"published,omitempty"`
	Roles     *[]int32 `json:"roles,omitempty"`

	// Unique identifying part for the web address of the dashboard.
	Slug *string `json:"slug,omitempty"`
}

// Database defines model for Database.
type Database struct {
	AllowMultiSchemaMetadataFetch *bool   `json:"allow_multi_schema_metadata_fetch,omitempty"`
	AllowsCostEstimate            *bool   `json:"allows_cost_estimate,omitempty"`
	AllowsSubquery                *bool   `json:"allows_subquery,omitempty"`
	AllowsVirtualTableExplore     *bool   `json:"allows_virtual_table_explore,omitempty"`
	Backend                       *string `json:"backend,omitempty"`
	DisableDataPreview            *bool   `json:"disable_data_preview,omitempty"`
	ExploreDatabaseId             *int32  `json:"explore_database_id,omitempty"`
	Id                            *int32  `json:"id,omitempty"`
	Name                          *string `json:"name,omitempty"`
}

// Database1 defines model for Database1.
type Database1 struct {
	DatabaseName *string `json:"database_name,omitempty"`
}

// DatabaseFunctionNamesResponse defines model for DatabaseFunctionNamesResponse.
type DatabaseFunctionNamesResponse struct {
	FunctionNames *[]string `json:"function_names,omitempty"`
}

// DatabaseRelatedChart defines model for DatabaseRelatedChart.
type DatabaseRelatedChart struct {
	Id        *int32  `json:"id,omitempty"`
	SliceName *string `json:"slice_name,omitempty"`
	VizType   *string `json:"viz_type,omitempty"`
}

// DatabaseRelatedCharts defines model for DatabaseRelatedCharts.
type DatabaseRelatedCharts struct {
	// Chart count
	Count *int32 `json:"count,omitempty"`

	// A list of dashboards
	Result *[]DatabaseRelatedChart `json:"result,omitempty"`
}

// DatabaseRelatedDashboard defines model for DatabaseRelatedDashboard.
type DatabaseRelatedDashboard struct {
	Id           *int32                  `json:"id,omitempty"`
	JsonMetadata *map[string]interface{} `json:"json_metadata,omitempty"`
	Slug         *string                 `json:"slug,omitempty"`
	Title        *string                 `json:"title,omitempty"`
}

// DatabaseRelatedDashboards defines model for DatabaseRelatedDashboards.
type DatabaseRelatedDashboards struct {
	// Dashboard count
	Count *int32 `json:"count,omitempty"`

	// A list of dashboards
	Result *[]DatabaseRelatedDashboard `json:"result,omitempty"`
}

// DatabaseRelatedObjectsResponse defines model for DatabaseRelatedObjectsResponse.
type DatabaseRelatedObjectsResponse struct {
	Charts     *DatabaseRelatedCharts     `json:"charts,omitempty"`
	Dashboards *DatabaseRelatedDashboards `json:"dashboards,omitempty"`
}

// DatabaseRestApiGet defines model for DatabaseRestApi.get.
type DatabaseRestApiGet struct {
	AllowCtas                     *bool        `json:"allow_ctas"`
	AllowCvas                     *bool        `json:"allow_cvas"`
	AllowDml                      *bool        `json:"allow_dml"`
	AllowFileUpload               *bool        `json:"allow_file_upload"`
	AllowMultiSchemaMetadataFetch *bool        `json:"allow_multi_schema_metadata_fetch"`
	AllowRunAsync                 *bool        `json:"allow_run_async"`
	Backend                       *interface{} `json:"backend,omitempty"`
	CacheTimeout                  *int32       `json:"cache_timeout"`
	ConfigurationMethod           *string      `json:"configuration_method"`
	DatabaseName                  string       `json:"database_name"`
	EncryptedExtra                *string      `json:"encrypted_extra"`
	ExposeInSqllab                *bool        `json:"expose_in_sqllab"`
	Extra                         *string      `json:"extra"`
	ForceCtasSchema               *string      `json:"force_ctas_schema"`
	Id                            *int32       `json:"id,omitempty"`
	ImpersonateUser               *bool        `json:"impersonate_user"`
	IsManagedExternally           *bool        `json:"is_managed_externally,omitempty"`
	Parameters                    *interface{} `json:"parameters,omitempty"`
	ParametersSchema              *interface{} `json:"parameters_schema,omitempty"`
	ServerCert                    *string      `json:"server_cert"`
	SqlalchemyUri                 string       `json:"sqlalchemy_uri"`
}

// DatabaseRestApiGetList defines model for DatabaseRestApi.get_list.
type DatabaseRestApiGetList struct {
	AllowCtas                     *bool                       `json:"allow_ctas"`
	AllowCvas                     *bool                       `json:"allow_cvas"`
	AllowDml                      *bool                       `json:"allow_dml"`
	AllowFileUpload               *bool                       `json:"allow_file_upload"`
	AllowMultiSchemaMetadataFetch *bool                       `json:"allow_multi_schema_metadata_fetch"`
	AllowRunAsync                 *bool                       `json:"allow_run_async"`
	AllowsCostEstimate            *interface{}                `json:"allows_cost_estimate,omitempty"`
	AllowsSubquery                *interface{}                `json:"allows_subquery,omitempty"`
	AllowsVirtualTableExplore     *interface{}                `json:"allows_virtual_table_explore,omitempty"`
	Backend                       *interface{}                `json:"backend,omitempty"`
	ChangedOn                     *SupersetTime               `json:"changed_on"`
	ChangedOnDeltaHumanized       *interface{}                `json:"changed_on_delta_humanized,omitempty"`
	CreatedBy                     *DatabaseRestApiGetListUser `json:"created_by,omitempty"`
	DatabaseName                  string                      `json:"database_name"`
	DisableDataPreview            *interface{}                `json:"disable_data_preview,omitempty"`
	ExploreDatabaseId             *interface{}                `json:"explore_database_id,omitempty"`
	ExposeInSqllab                *bool                       `json:"expose_in_sqllab"`
	Extra                         *string                     `json:"extra"`
	ForceCtasSchema               *string                     `json:"force_ctas_schema"`
	Id                            *int32                      `json:"id,omitempty"`
}

// DatabaseRestApiGetListUser defines model for DatabaseRestApi.get_list.User.
type DatabaseRestApiGetListUser struct {
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
}

// DatabaseRestApiPost defines model for DatabaseRestApi.post.
type DatabaseRestApiPost struct {
	// Allow CREATE TABLE AS option in SQL Lab
	AllowCtas *bool `json:"allow_ctas,omitempty"`

	// Allow CREATE VIEW AS option in SQL Lab
	AllowCvas *bool `json:"allow_cvas,omitempty"`

	// Allow users to run non-SELECT statements (UPDATE, DELETE, CREATE, ...) in SQL Lab
	AllowDml *bool `json:"allow_dml,omitempty"`

	// Allow to upload CSV file data into this databaseIf selected, please set the schemas allowed for csv upload in Extra.
	AllowFileUpload *bool `json:"allow_file_upload,omitempty"`

	// Allow SQL Lab to fetch a list of all tables and all views across all database schemas. For large data warehouse with thousands of tables, this can be expensive and put strain on the system.
	AllowMultiSchemaMetadataFetch *bool `json:"allow_multi_schema_metadata_fetch,omitempty"`

	// Operate the database in asynchronous mode, meaning  that the queries are executed on remote workers as opposed to on the web server itself. This assumes that you have a Celery worker setup as well as a results backend. Refer to the installation docs for more information.
	AllowRunAsync *bool `json:"allow_run_async,omitempty"`

	// Duration (in seconds) of the caching timeout for charts of this database. A timeout of 0 indicates that the cache never expires. Note this defaults to the global timeout if undefined.
	CacheTimeout *int32 `json:"cache_timeout"`

	// Configuration_method is used on the frontend to inform the backend whether to explode parameters or to provide only a sqlalchemy_uri.
	ConfigurationMethod *interface{} `json:"configuration_method,omitempty"`

	// A database name to identify this connection.
	DatabaseName string `json:"database_name"`

	// SQLAlchemy driver to use
	Driver *string `json:"driver"`

	// <p>JSON string containing additional connection configuration.<br>This is used to provide connection information for systems like Hive, Presto, and BigQuery, which do not conform to the username:password syntax normally used by SQLAlchemy.</p>
	EncryptedExtra *string `json:"encrypted_extra"`

	// SQLAlchemy engine to use
	Engine *string `json:"engine"`

	// Expose this database to SQLLab
	ExposeInSqllab *bool   `json:"expose_in_sqllab,omitempty"`
	ExternalUrl    *string `json:"external_url"`

	// <p>JSON string containing extra configuration elements.<br>1. The <code>engine_params</code> object gets unpacked into the <a href="https://docs.sqlalchemy.org/en/latest/core/engines.html#sqlalchemy.create_engine">sqlalchemy.create_engine</a> call, while the <code>metadata_params</code> gets unpacked into the <a href="https://docs.sqlalchemy.org/en/rel_1_0/core/metadata.html#sqlalchemy.schema.MetaData">sqlalchemy.MetaData</a> call.<br>2. The <code>metadata_cache_timeout</code> is a cache timeout setting in seconds for metadata fetch of this database. Specify it as <strong>"metadata_cache_timeout": {"schema_cache_timeout": 600, "table_cache_timeout": 600}</strong>. If unset, cache will not be enabled for the functionality. A timeout of 0 indicates that the cache never expires.<br>3. The <code>schemas_allowed_for_file_upload</code> is a comma separated list of schemas that CSVs are allowed to upload to. Specify it as <strong>"schemas_allowed_for_file_upload": ["public", "csv_upload"]</strong>. If database flavor does not support schema or any schema is allowed to be accessed, just leave the list empty<br>4. The <code>version</code> field is a string specifying the this db's version. This should be used with Presto DBs so that the syntax is correct<br>5. The <code>allows_virtual_table_explore</code> field is a boolean specifying whether or not the Explore button in SQL Lab results is shown.<br>6. The <code>disable_data_preview</code> field is a boolean specifying whether or not data preview queries will be run when fetching table metadata in SQL Lab.</p>
	Extra *string `json:"extra,omitempty"`

	// When allowing CREATE TABLE AS option in SQL Lab, this option forces the table to be created in this schema
	ForceCtasSchema *string `json:"force_ctas_schema"`

	// If Presto, all the queries in SQL Lab are going to be executed as the currently logged on user who must have permission to run them.<br/>If Hive and hive.server2.enable.doAs is enabled, will run the queries as service account, but impersonate the currently logged on user via hive.server2.proxy.user property.
	ImpersonateUser     *bool `json:"impersonate_user,omitempty"`
	IsManagedExternally *bool `json:"is_managed_externally"`

	// DB-specific parameters for configuration
	Parameters *DatabaseRestApiPost_Parameters `json:"parameters,omitempty"`

	// <p>Optional CA_BUNDLE contents to validate HTTPS requests. Only available on certain database engines.</p>
	ServerCert *string `json:"server_cert"`

	// <p>Refer to the <a href="https://docs.sqlalchemy.org/en/rel_1_2/core/engines.html#database-urls">SqlAlchemy docs</a> for more information on how to structure your URI.</p>
	SqlalchemyUri *string `json:"sqlalchemy_uri,omitempty"`
	Uuid          *string `json:"uuid,omitempty"`
}

// DB-specific parameters for configuration
type DatabaseRestApiPost_Parameters struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// DatabaseRestApiPut defines model for DatabaseRestApi.put.
type DatabaseRestApiPut struct {
	// Allow CREATE TABLE AS option in SQL Lab
	AllowCtas *bool `json:"allow_ctas,omitempty"`

	// Allow CREATE VIEW AS option in SQL Lab
	AllowCvas *bool `json:"allow_cvas,omitempty"`

	// Allow users to run non-SELECT statements (UPDATE, DELETE, CREATE, ...) in SQL Lab
	AllowDml *bool `json:"allow_dml,omitempty"`

	// Allow to upload CSV file data into this databaseIf selected, please set the schemas allowed for csv upload in Extra.
	AllowFileUpload *bool `json:"allow_file_upload,omitempty"`

	// Allow SQL Lab to fetch a list of all tables and all views across all database schemas. For large data warehouse with thousands of tables, this can be expensive and put strain on the system.
	AllowMultiSchemaMetadataFetch *bool `json:"allow_multi_schema_metadata_fetch,omitempty"`

	// Operate the database in asynchronous mode, meaning  that the queries are executed on remote workers as opposed to on the web server itself. This assumes that you have a Celery worker setup as well as a results backend. Refer to the installation docs for more information.
	AllowRunAsync *bool `json:"allow_run_async,omitempty"`

	// Duration (in seconds) of the caching timeout for charts of this database. A timeout of 0 indicates that the cache never expires. Note this defaults to the global timeout if undefined.
	CacheTimeout *int32 `json:"cache_timeout"`

	// Configuration_method is used on the frontend to inform the backend whether to explode parameters or to provide only a sqlalchemy_uri.
	ConfigurationMethod *interface{} `json:"configuration_method,omitempty"`

	// A database name to identify this connection.
	DatabaseName *string `json:"database_name"`

	// SQLAlchemy driver to use
	Driver *string `json:"driver"`

	// <p>JSON string containing additional connection configuration.<br>This is used to provide connection information for systems like Hive, Presto, and BigQuery, which do not conform to the username:password syntax normally used by SQLAlchemy.</p>
	EncryptedExtra *string `json:"encrypted_extra"`

	// SQLAlchemy engine to use
	Engine *string `json:"engine"`

	// Expose this database to SQLLab
	ExposeInSqllab *bool   `json:"expose_in_sqllab,omitempty"`
	ExternalUrl    *string `json:"external_url"`

	// <p>JSON string containing extra configuration elements.<br>1. The <code>engine_params</code> object gets unpacked into the <a href="https://docs.sqlalchemy.org/en/latest/core/engines.html#sqlalchemy.create_engine">sqlalchemy.create_engine</a> call, while the <code>metadata_params</code> gets unpacked into the <a href="https://docs.sqlalchemy.org/en/rel_1_0/core/metadata.html#sqlalchemy.schema.MetaData">sqlalchemy.MetaData</a> call.<br>2. The <code>metadata_cache_timeout</code> is a cache timeout setting in seconds for metadata fetch of this database. Specify it as <strong>"metadata_cache_timeout": {"schema_cache_timeout": 600, "table_cache_timeout": 600}</strong>. If unset, cache will not be enabled for the functionality. A timeout of 0 indicates that the cache never expires.<br>3. The <code>schemas_allowed_for_file_upload</code> is a comma separated list of schemas that CSVs are allowed to upload to. Specify it as <strong>"schemas_allowed_for_file_upload": ["public", "csv_upload"]</strong>. If database flavor does not support schema or any schema is allowed to be accessed, just leave the list empty<br>4. The <code>version</code> field is a string specifying the this db's version. This should be used with Presto DBs so that the syntax is correct<br>5. The <code>allows_virtual_table_explore</code> field is a boolean specifying whether or not the Explore button in SQL Lab results is shown.<br>6. The <code>disable_data_preview</code> field is a boolean specifying whether or not data preview queries will be run when fetching table metadata in SQL Lab.</p>
	Extra *string `json:"extra,omitempty"`

	// When allowing CREATE TABLE AS option in SQL Lab, this option forces the table to be created in this schema
	ForceCtasSchema *string `json:"force_ctas_schema"`

	// If Presto, all the queries in SQL Lab are going to be executed as the currently logged on user who must have permission to run them.<br/>If Hive and hive.server2.enable.doAs is enabled, will run the queries as service account, but impersonate the currently logged on user via hive.server2.proxy.user property.
	ImpersonateUser     *bool `json:"impersonate_user,omitempty"`
	IsManagedExternally *bool `json:"is_managed_externally"`

	// DB-specific parameters for configuration
	Parameters *DatabaseRestApiPut_Parameters `json:"parameters,omitempty"`

	// <p>Optional CA_BUNDLE contents to validate HTTPS requests. Only available on certain database engines.</p>
	ServerCert *string `json:"server_cert"`

	// <p>Refer to the <a href="https://docs.sqlalchemy.org/en/rel_1_2/core/engines.html#database-urls">SqlAlchemy docs</a> for more information on how to structure your URI.</p>
	SqlalchemyUri *string `json:"sqlalchemy_uri,omitempty"`
}

// DB-specific parameters for configuration
type DatabaseRestApiPut_Parameters struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// DatabaseTestConnectionSchema defines model for DatabaseTestConnectionSchema.
type DatabaseTestConnectionSchema struct {
	// Configuration_method is used on the frontend to inform the backend whether to explode parameters or to provide only a sqlalchemy_uri.
	ConfigurationMethod *interface{} `json:"configuration_method,omitempty"`

	// A database name to identify this connection.
	DatabaseName *string `json:"database_name"`

	// SQLAlchemy driver to use
	Driver *string `json:"driver"`

	// <p>JSON string containing additional connection configuration.<br>This is used to provide connection information for systems like Hive, Presto, and BigQuery, which do not conform to the username:password syntax normally used by SQLAlchemy.</p>
	EncryptedExtra *string `json:"encrypted_extra"`

	// SQLAlchemy engine to use
	Engine *string `json:"engine"`

	// <p>JSON string containing extra configuration elements.<br>1. The <code>engine_params</code> object gets unpacked into the <a href="https://docs.sqlalchemy.org/en/latest/core/engines.html#sqlalchemy.create_engine">sqlalchemy.create_engine</a> call, while the <code>metadata_params</code> gets unpacked into the <a href="https://docs.sqlalchemy.org/en/rel_1_0/core/metadata.html#sqlalchemy.schema.MetaData">sqlalchemy.MetaData</a> call.<br>2. The <code>metadata_cache_timeout</code> is a cache timeout setting in seconds for metadata fetch of this database. Specify it as <strong>"metadata_cache_timeout": {"schema_cache_timeout": 600, "table_cache_timeout": 600}</strong>. If unset, cache will not be enabled for the functionality. A timeout of 0 indicates that the cache never expires.<br>3. The <code>schemas_allowed_for_file_upload</code> is a comma separated list of schemas that CSVs are allowed to upload to. Specify it as <strong>"schemas_allowed_for_file_upload": ["public", "csv_upload"]</strong>. If database flavor does not support schema or any schema is allowed to be accessed, just leave the list empty<br>4. The <code>version</code> field is a string specifying the this db's version. This should be used with Presto DBs so that the syntax is correct<br>5. The <code>allows_virtual_table_explore</code> field is a boolean specifying whether or not the Explore button in SQL Lab results is shown.<br>6. The <code>disable_data_preview</code> field is a boolean specifying whether or not data preview queries will be run when fetching table metadata in SQL Lab.</p>
	Extra *string `json:"extra,omitempty"`

	// If Presto, all the queries in SQL Lab are going to be executed as the currently logged on user who must have permission to run them.<br/>If Hive and hive.server2.enable.doAs is enabled, will run the queries as service account, but impersonate the currently logged on user via hive.server2.proxy.user property.
	ImpersonateUser *bool `json:"impersonate_user,omitempty"`

	// DB-specific parameters for configuration
	Parameters *DatabaseTestConnectionSchema_Parameters `json:"parameters,omitempty"`

	// <p>Optional CA_BUNDLE contents to validate HTTPS requests. Only available on certain database engines.</p>
	ServerCert *string `json:"server_cert"`

	// <p>Refer to the <a href="https://docs.sqlalchemy.org/en/rel_1_2/core/engines.html#database-urls">SqlAlchemy docs</a> for more information on how to structure your URI.</p>
	SqlalchemyUri *string `json:"sqlalchemy_uri,omitempty"`
}

// DB-specific parameters for configuration
type DatabaseTestConnectionSchema_Parameters struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// DatabaseValidateParametersSchema defines model for DatabaseValidateParametersSchema.
type DatabaseValidateParametersSchema struct {
	// Configuration_method is used on the frontend to inform the backend whether to explode parameters or to provide only a sqlalchemy_uri.
	ConfigurationMethod interface{} `json:"configuration_method"`

	// A database name to identify this connection.
	DatabaseName *string `json:"database_name"`

	// SQLAlchemy driver to use
	Driver *string `json:"driver"`

	// <p>JSON string containing additional connection configuration.<br>This is used to provide connection information for systems like Hive, Presto, and BigQuery, which do not conform to the username:password syntax normally used by SQLAlchemy.</p>
	EncryptedExtra *string `json:"encrypted_extra"`

	// SQLAlchemy engine to use
	Engine string `json:"engine"`

	// <p>JSON string containing extra configuration elements.<br>1. The <code>engine_params</code> object gets unpacked into the <a href="https://docs.sqlalchemy.org/en/latest/core/engines.html#sqlalchemy.create_engine">sqlalchemy.create_engine</a> call, while the <code>metadata_params</code> gets unpacked into the <a href="https://docs.sqlalchemy.org/en/rel_1_0/core/metadata.html#sqlalchemy.schema.MetaData">sqlalchemy.MetaData</a> call.<br>2. The <code>metadata_cache_timeout</code> is a cache timeout setting in seconds for metadata fetch of this database. Specify it as <strong>"metadata_cache_timeout": {"schema_cache_timeout": 600, "table_cache_timeout": 600}</strong>. If unset, cache will not be enabled for the functionality. A timeout of 0 indicates that the cache never expires.<br>3. The <code>schemas_allowed_for_file_upload</code> is a comma separated list of schemas that CSVs are allowed to upload to. Specify it as <strong>"schemas_allowed_for_file_upload": ["public", "csv_upload"]</strong>. If database flavor does not support schema or any schema is allowed to be accessed, just leave the list empty<br>4. The <code>version</code> field is a string specifying the this db's version. This should be used with Presto DBs so that the syntax is correct<br>5. The <code>allows_virtual_table_explore</code> field is a boolean specifying whether or not the Explore button in SQL Lab results is shown.<br>6. The <code>disable_data_preview</code> field is a boolean specifying whether or not data preview queries will be run when fetching table metadata in SQL Lab.</p>
	Extra *string `json:"extra,omitempty"`

	// If Presto, all the queries in SQL Lab are going to be executed as the currently logged on user who must have permission to run them.<br/>If Hive and hive.server2.enable.doAs is enabled, will run the queries as service account, but impersonate the currently logged on user via hive.server2.proxy.user property.
	ImpersonateUser *bool `json:"impersonate_user,omitempty"`

	// DB-specific parameters for configuration
	Parameters *DatabaseValidateParametersSchema_Parameters `json:"parameters,omitempty"`

	// <p>Optional CA_BUNDLE contents to validate HTTPS requests. Only available on certain database engines.</p>
	ServerCert *string `json:"server_cert"`
}

// DB-specific parameters for configuration
type DatabaseValidateParametersSchema_Parameters struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Dataset defines model for Dataset.
type Dataset struct {
	// Duration (in seconds) of the caching timeout for this dataset.
	CacheTimeout *int32 `json:"cache_timeout,omitempty"`

	// Column formats.
	ColumnFormats *map[string]interface{} `json:"column_formats,omitempty"`

	// Columns metadata.
	Columns *[]map[string]interface{} `json:"columns,omitempty"`

	// Database associated with the dataset.
	Database *map[string]interface{} `json:"database,omitempty"`

	// Dataset name.
	DatasourceName *string `json:"datasource_name,omitempty"`

	// Default endpoint for the dataset.
	DefaultEndpoint *string `json:"default_endpoint,omitempty"`

	// Dataset description.
	Description *string `json:"description,omitempty"`

	// The URL for editing the dataset.
	EditUrl *string `json:"edit_url,omitempty"`

	// JSON string containing extra configuration elements.
	Extra *map[string]interface{} `json:"extra,omitempty"`

	// Predicate used when fetching values from the dataset.
	FetchValuesPredicate *string `json:"fetch_values_predicate,omitempty"`

	// SELECT filter applied to the dataset.
	FilterSelect *bool `json:"filter_select,omitempty"`

	// If the SELECT filter is enabled.
	FilterSelectEnabled *bool `json:"filter_select_enabled,omitempty"`

	// Name of temporal column used for time filtering for SQL datasources. This field is deprecated, use `granularity` instead.
	GranularitySqla *[][]map[string]interface{} `json:"granularity_sqla,omitempty"`

	// Health check message.
	HealthCheckMessage *string `json:"health_check_message,omitempty"`

	// Dataset ID.
	Id *int32 `json:"id,omitempty"`

	// If the dataset is a SQL Lab view.
	IsSqllabView *bool `json:"is_sqllab_view,omitempty"`

	// The main temporal column.
	MainDttmCol *string `json:"main_dttm_col,omitempty"`

	// Dataset metrics.
	Metrics *[]map[string]interface{} `json:"metrics,omitempty"`

	// Dataset name.
	Name *string `json:"name,omitempty"`

	// Dataset offset.
	Offset *int32 `json:"offset,omitempty"`

	// List of order by columns.
	OrderByChoices *[][]string `json:"order_by_choices,omitempty"`

	// List of owners identifiers
	Owners *[]int32 `json:"owners,omitempty"`

	// Extra params for the dataset.
	Params *map[string]interface{} `json:"params,omitempty"`

	// Permission expression.
	Perm *string `json:"perm,omitempty"`

	// Dataset schema.
	Schema *string `json:"schema,omitempty"`

	// Select all clause.
	SelectStar *string `json:"select_star,omitempty"`

	// A SQL statement that defines the dataset.
	Sql *string `json:"sql,omitempty"`

	// The name of the table associated with the dataset.
	TableName *string `json:"table_name,omitempty"`

	// Table template params.
	TemplateParams *map[string]interface{} `json:"template_params,omitempty"`

	// List of temporal granularities supported by the dataset.
	TimeGrainSqla *[][]string `json:"time_grain_sqla,omitempty"`

	// Dataset type.
	Type *string `json:"type,omitempty"`

	// Dataset unique identifier.
	Uid *string `json:"uid,omitempty"`

	// Mapping from raw name to verbose name.
	VerboseMap *map[string]interface{} `json:"verbose_map,omitempty"`
}

// DatasetColumnsPut defines model for DatasetColumnsPut.
type DatasetColumnsPut struct {
	AdvancedDataType *string             `json:"advanced_data_type"`
	ColumnName       string              `json:"column_name"`
	Description      *string             `json:"description"`
	Expression       *string             `json:"expression"`
	Extra            *string             `json:"extra"`
	Filterable       *bool               `json:"filterable,omitempty"`
	Groupby          *bool               `json:"groupby,omitempty"`
	Id               *int32              `json:"id,omitempty"`
	IsActive         *bool               `json:"is_active,omitempty"`
	IsDttm           *bool               `json:"is_dttm,omitempty"`
	PythonDateFormat *string             `json:"python_date_format"`
	Type             *string             `json:"type"`
	Uuid             *openapi_types.UUID `json:"uuid"`
	VerboseName      *string             `json:"verbose_name"`
}

// DatasetDuplicateSchema defines model for DatasetDuplicateSchema.
type DatasetDuplicateSchema struct {
	BaseModelId int32  `json:"base_model_id"`
	TableName   string `json:"table_name"`
}

// DatasetMetricsPut defines model for DatasetMetricsPut.
type DatasetMetricsPut struct {
	D3format    *string             `json:"d3format"`
	Description *string             `json:"description"`
	Expression  string              `json:"expression"`
	Extra       *string             `json:"extra"`
	Id          *int32              `json:"id,omitempty"`
	MetricName  string              `json:"metric_name"`
	MetricType  *string             `json:"metric_type"`
	Uuid        *openapi_types.UUID `json:"uuid"`
	VerboseName *string             `json:"verbose_name"`
	WarningText *string             `json:"warning_text"`
}

// DatasetRelatedChart defines model for DatasetRelatedChart.
type DatasetRelatedChart struct {
	Id        *int32  `json:"id,omitempty"`
	SliceName *string `json:"slice_name,omitempty"`
	VizType   *string `json:"viz_type,omitempty"`
}

// DatasetRelatedCharts defines model for DatasetRelatedCharts.
type DatasetRelatedCharts struct {
	// Chart count
	Count *int32 `json:"count,omitempty"`

	// A list of dashboards
	Result *[]DatasetRelatedChart `json:"result,omitempty"`
}

// DatasetRelatedDashboard defines model for DatasetRelatedDashboard.
type DatasetRelatedDashboard struct {
	Id           *int32                  `json:"id,omitempty"`
	JsonMetadata *map[string]interface{} `json:"json_metadata,omitempty"`
	Slug         *string                 `json:"slug,omitempty"`
	Title        *string                 `json:"title,omitempty"`
}

// DatasetRelatedDashboards defines model for DatasetRelatedDashboards.
type DatasetRelatedDashboards struct {
	// Dashboard count
	Count *int32 `json:"count,omitempty"`

	// A list of dashboards
	Result *[]DatasetRelatedDashboard `json:"result,omitempty"`
}

// DatasetRelatedObjectsResponse defines model for DatasetRelatedObjectsResponse.
type DatasetRelatedObjectsResponse struct {
	Charts     *DatasetRelatedCharts     `json:"charts,omitempty"`
	Dashboards *DatasetRelatedDashboards `json:"dashboards,omitempty"`
}

// DatasetRestApiGet defines model for DatasetRestApi.get.
type DatasetRestApiGet struct {
	CacheTimeout         *int32                         `json:"cache_timeout"`
	Columns              []DatasetRestApiGetTableColumn `json:"columns"`
	Database             DatasetRestApiGetDatabase      `json:"database"`
	DatasourceType       *interface{}                   `json:"datasource_type,omitempty"`
	DefaultEndpoint      *string                        `json:"default_endpoint"`
	Description          *string                        `json:"description"`
	Extra                *string                        `json:"extra"`
	FetchValuesPredicate *string                        `json:"fetch_values_predicate"`
	FilterSelectEnabled  *bool                          `json:"filter_select_enabled"`
	Id                   *int32                         `json:"id,omitempty"`
	IsManagedExternally  *bool                          `json:"is_managed_externally,omitempty"`
	IsSqllabView         *bool                          `json:"is_sqllab_view"`
	Kind                 *interface{}                   `json:"kind,omitempty"`
	MainDttmCol          *string                        `json:"main_dttm_col"`
	Metrics              []DatasetRestApiGetSqlMetric   `json:"metrics"`
	Offset               *int32                         `json:"offset"`
	Owners               *[]DatasetRestApiGetUser       `json:"owners,omitempty"`
	Schema               *string                        `json:"schema"`
	Sql                  *string                        `json:"sql"`
	TableName            string                         `json:"table_name"`
	TemplateParams       *string                        `json:"template_params"`
	Url                  *interface{}                   `json:"url,omitempty"`
}

// DatasetRestApiGetDatabase defines model for DatasetRestApi.get.Database.
type DatasetRestApiGetDatabase struct {
	Backend      *interface{} `json:"backend,omitempty"`
	DatabaseName string       `json:"database_name"`
	Id           *int32       `json:"id,omitempty"`
}

// DatasetRestApiGetSqlMetric defines model for DatasetRestApi.get.SqlMetric.
type DatasetRestApiGetSqlMetric struct {
	ChangedOn   *SupersetTime `json:"changed_on"`
	CreatedOn   *SupersetTime `json:"created_on"`
	D3format    *string       `json:"d3format"`
	Description *string       `json:"description"`
	Expression  string        `json:"expression"`
	Extra       *string       `json:"extra"`
	Id          *int32        `json:"id,omitempty"`
	MetricName  string        `json:"metric_name"`
	MetricType  *string       `json:"metric_type"`
	VerboseName *string       `json:"verbose_name"`
	WarningText *string       `json:"warning_text"`
}

// DatasetRestApiGetTableColumn defines model for DatasetRestApi.get.TableColumn.
type DatasetRestApiGetTableColumn struct {
	AdvancedDataType *string             `json:"advanced_data_type"`
	ChangedOn        *SupersetTime       `json:"changed_on"`
	ColumnName       string              `json:"column_name"`
	CreatedOn        *SupersetTime       `json:"created_on"`
	Description      *string             `json:"description"`
	Expression       *string             `json:"expression"`
	Extra            *string             `json:"extra"`
	Filterable       *bool               `json:"filterable"`
	Groupby          *bool               `json:"groupby"`
	Id               *int32              `json:"id,omitempty"`
	IsActive         *bool               `json:"is_active"`
	IsDttm           *bool               `json:"is_dttm"`
	PythonDateFormat *string             `json:"python_date_format"`
	Type             *string             `json:"type"`
	TypeGeneric      *interface{}        `json:"type_generic,omitempty"`
	Uuid             *openapi_types.UUID `json:"uuid"`
	VerboseName      *string             `json:"verbose_name"`
}

// DatasetRestApiGetUser defines model for DatasetRestApi.get.User.
type DatasetRestApiGetUser struct {
	FirstName string `json:"first_name"`
	Id        *int32 `json:"id,omitempty"`
	LastName  string `json:"last_name"`
	Username  string `json:"username"`
}

// DatasetRestApiGetList defines model for DatasetRestApi.get_list.
type DatasetRestApiGetList struct {
	ChangedBy               *DatasetRestApiGetListUser1   `json:"changed_by,omitempty"`
	ChangedByName           *interface{}                  `json:"changed_by_name,omitempty"`
	ChangedByUrl            *interface{}                  `json:"changed_by_url,omitempty"`
	ChangedOnDeltaHumanized *interface{}                  `json:"changed_on_delta_humanized,omitempty"`
	ChangedOnUtc            *interface{}                  `json:"changed_on_utc,omitempty"`
	Database                DatasetRestApiGetListDatabase `json:"database"`
	DatasourceType          *interface{}                  `json:"datasource_type,omitempty"`
	DefaultEndpoint         *string                       `json:"default_endpoint"`
	Description             *string                       `json:"description"`
	ExploreUrl              *interface{}                  `json:"explore_url,omitempty"`
	Extra                   *string                       `json:"extra"`
	Id                      *int32                        `json:"id,omitempty"`
	Kind                    *interface{}                  `json:"kind,omitempty"`
	Owners                  *DatasetRestApiGetListUser    `json:"owners,omitempty"`
	Schema                  *string                       `json:"schema"`
	Sql                     *string                       `json:"sql"`
	TableName               string                        `json:"table_name"`
}

// DatasetRestApiGetListDatabase defines model for DatasetRestApi.get_list.Database.
type DatasetRestApiGetListDatabase struct {
	DatabaseName string `json:"database_name"`
	Id           *int32 `json:"id,omitempty"`
}

// DatasetRestApiGetListUser defines model for DatasetRestApi.get_list.User.
type DatasetRestApiGetListUser struct {
	FirstName string `json:"first_name"`
	Id        *int32 `json:"id,omitempty"`
	LastName  string `json:"last_name"`
	Username  string `json:"username"`
}

// DatasetRestApiGetListUser1 defines model for DatasetRestApi.get_list.User1.
type DatasetRestApiGetListUser1 struct {
	FirstName string `json:"first_name"`
	Username  string `json:"username"`
}

// DatasetRestApiPost defines model for DatasetRestApi.post.
type DatasetRestApiPost struct {
	Database            int32    `json:"database"`
	ExternalUrl         *string  `json:"external_url"`
	IsManagedExternally *bool    `json:"is_managed_externally"`
	Owners              *[]int32 `json:"owners,omitempty"`
	Schema              *string  `json:"schema,omitempty"`
	TableName           string   `json:"table_name"`
}

// DatasetRestApiPut defines model for DatasetRestApi.put.
type DatasetRestApiPut struct {
	CacheTimeout         *int32               `json:"cache_timeout,omitempty"`
	Columns              *[]DatasetColumnsPut `json:"columns,omitempty"`
	DatabaseId           *int32               `json:"database_id,omitempty"`
	DefaultEndpoint      *string              `json:"default_endpoint,omitempty"`
	Description          *string              `json:"description,omitempty"`
	ExternalUrl          *string              `json:"external_url,omitempty"`
	Extra                *string              `json:"extra,omitempty"`
	FetchValuesPredicate *string              `json:"fetch_values_predicate,omitempty"`
	FilterSelectEnabled  *bool                `json:"filter_select_enabled,omitempty"`
	IsManagedExternally  *bool                `json:"is_managed_externally,omitempty"`
	IsSqllabView         *bool                `json:"is_sqllab_view,omitempty"`
	MainDttmCol          *string              `json:"main_dttm_col,omitempty"`
	Metrics              *[]DatasetMetricsPut `json:"metrics,omitempty"`
	Offset               *int32               `json:"offset,omitempty"`
	Owners               *[]int32             `json:"owners,omitempty"`
	Schema               *string              `json:"schema,omitempty"`
	Sql                  *string              `json:"sql,omitempty"`
	TableName            *string              `json:"table_name,omitempty"`
	TemplateParams       *string              `json:"template_params,omitempty"`
}

// Datasource defines model for Datasource.
type Datasource struct {
	// Datasource name
	DatabaseName *string `json:"database_name,omitempty"`

	// The datasource name.
	DatasourceName *string `json:"datasource_name,omitempty"`

	// The type of dataset/datasource identified on `datasource_id`.
	DatasourceType DatasourceDatasourceType `json:"datasource_type"`

	// Datasource schema
	Schema *string `json:"schema,omitempty"`
}

// The type of dataset/datasource identified on `datasource_id`.
type DatasourceDatasourceType string

// DistincResponseSchema defines model for DistincResponseSchema.
type DistincResponseSchema struct {
	// The total number of distinct values
	Count  *int32                    `json:"count,omitempty"`
	Result *[]DistinctResultResponse `json:"result,omitempty"`
}

// DistinctResultResponse defines model for DistinctResultResponse.
type DistinctResultResponse struct {
	// The distinct item
	Text *string `json:"text,omitempty"`
}

// EmbeddedDashboardConfig defines model for EmbeddedDashboardConfig.
type EmbeddedDashboardConfig struct {
	AllowedDomains []string `json:"allowed_domains"`
}

// EmbeddedDashboardResponseSchema defines model for EmbeddedDashboardResponseSchema.
type EmbeddedDashboardResponseSchema struct {
	AllowedDomains *[]string  `json:"allowed_domains,omitempty"`
	ChangedBy      *User      `json:"changed_by,omitempty"`
	ChangedOn      *time.Time `json:"changed_on,omitempty"`
	DashboardId    *string    `json:"dashboard_id,omitempty"`
	Uuid           *string    `json:"uuid,omitempty"`
}

// ExploreContextSchema defines model for ExploreContextSchema.
type ExploreContextSchema struct {
	Dataset *Dataset `json:"dataset,omitempty"`

	// Form data from the Explore controls used to form the chart's data query.
	FormData *map[string]interface{} `json:"form_data,omitempty"`

	// Any message related to the processed request.
	Message *string `json:"message,omitempty"`
	Slice   *Slice  `json:"slice,omitempty"`
}

// ExplorePermalinkPostSchema defines model for ExplorePermalinkPostSchema.
type ExplorePermalinkPostSchema struct {
	// Chart form data
	FormData map[string]interface{} `json:"formData"`

	// URL Parameters
	UrlParams *[]interface{} `json:"urlParams"`
}

// FilterSetRestApiPost defines model for FilterSetRestApi.post.
type FilterSetRestApiPost struct {
	Description  *string                       `json:"description"`
	JsonMetadata string                        `json:"json_metadata"`
	Name         string                        `json:"name"`
	OwnerId      *int32                        `json:"owner_id,omitempty"`
	OwnerType    FilterSetRestApiPostOwnerType `json:"owner_type"`
}

// FilterSetRestApiPostOwnerType defines model for FilterSetRestApiPost.OwnerType.
type FilterSetRestApiPostOwnerType string

// FilterSetRestApiPut defines model for FilterSetRestApi.put.
type FilterSetRestApiPut struct {
	Description  *string                       `json:"description,omitempty"`
	JsonMetadata *string                       `json:"json_metadata,omitempty"`
	Name         *string                       `json:"name,omitempty"`
	OwnerType    *FilterSetRestApiPutOwnerType `json:"owner_type,omitempty"`
}

// FilterSetRestApiPutOwnerType defines model for FilterSetRestApiPut.OwnerType.
type FilterSetRestApiPutOwnerType string

// FormDataPostSchema defines model for FormDataPostSchema.
type FormDataPostSchema struct {
	// The chart ID
	ChartId *int32 `json:"chart_id,omitempty"`

	// The datasource ID
	DatasourceId int32 `json:"datasource_id"`

	// The datasource type
	DatasourceType FormDataPostSchemaDatasourceType `json:"datasource_type"`

	// Any type of JSON supported text.
	FormData string `json:"form_data"`
}

// The datasource type
type FormDataPostSchemaDatasourceType string

// FormDataPutSchema defines model for FormDataPutSchema.
type FormDataPutSchema struct {
	// The chart ID
	ChartId *int32 `json:"chart_id,omitempty"`

	// The datasource ID
	DatasourceId int32 `json:"datasource_id"`

	// The datasource type
	DatasourceType FormDataPutSchemaDatasourceType `json:"datasource_type"`

	// Any type of JSON supported text.
	FormData string `json:"form_data"`
}

// The datasource type
type FormDataPutSchemaDatasourceType string

// GetFavStarIdsSchema defines model for GetFavStarIdsSchema.
type GetFavStarIdsSchema struct {
	// A list of results for each corresponding chart in the request
	Result *[]ChartFavStarResponseResult `json:"result,omitempty"`
}

// GuestTokenCreate defines model for GuestTokenCreate.
type GuestTokenCreate struct {
	Resources []Resource `json:"resources"`
	Rls       []RlsRule  `json:"rls"`
	User      *User1     `json:"user,omitempty"`
}

// LogRestApiGet defines model for LogRestApi.get.
type LogRestApiGet struct {
	Action      *string            `json:"action"`
	DashboardId *int32             `json:"dashboard_id"`
	Dttm        *time.Time         `json:"dttm"`
	DurationMs  *int32             `json:"duration_ms"`
	Json        *string            `json:"json"`
	Referrer    *string            `json:"referrer"`
	SliceId     *int32             `json:"slice_id"`
	User        *LogRestApiGetUser `json:"user,omitempty"`
	UserId      *int32             `json:"user_id"`
}

// LogRestApiGetUser defines model for LogRestApi.get.User.
type LogRestApiGetUser struct {
	Username string `json:"username"`
}

// LogRestApiGetList defines model for LogRestApi.get_list.
type LogRestApiGetList struct {
	Action      *string                `json:"action"`
	DashboardId *int32                 `json:"dashboard_id"`
	Dttm        *time.Time             `json:"dttm"`
	DurationMs  *int32                 `json:"duration_ms"`
	Json        *string                `json:"json"`
	Referrer    *string                `json:"referrer"`
	SliceId     *int32                 `json:"slice_id"`
	User        *LogRestApiGetListUser `json:"user,omitempty"`
	UserId      *int32                 `json:"user_id"`
}

// LogRestApiGetListUser defines model for LogRestApi.get_list.User.
type LogRestApiGetListUser struct {
	Username string `json:"username"`
}

// LogRestApiPost defines model for LogRestApi.post.
type LogRestApiPost struct {
	Id *int32 `json:"id,omitempty"`
}

// QueryRestApiGet defines model for QueryRestApi.get.
type QueryRestApiGet struct {
	ChangedOn            *time.Time              `json:"changed_on"`
	ClientId             string                  `json:"client_id"`
	Database             QueryRestApiGetDatabase `json:"database"`
	EndResultBackendTime *float32                `json:"end_result_backend_time"`
	EndTime              *float32                `json:"end_time"`
	ErrorMessage         *string                 `json:"error_message"`
	ExecutedSql          *string                 `json:"executed_sql"`
	Id                   *int32                  `json:"id,omitempty"`
	Limit                *int32                  `json:"limit"`
	Progress             *int32                  `json:"progress"`
	ResultsKey           *string                 `json:"results_key"`
	Rows                 *int32                  `json:"rows"`
	Schema               *string                 `json:"schema"`
	SelectAsCta          *bool                   `json:"select_as_cta"`
	SelectAsCtaUsed      *bool                   `json:"select_as_cta_used"`
	SelectSql            *string                 `json:"select_sql"`
	Sql                  *string                 `json:"sql"`
	SqlEditorId          *string                 `json:"sql_editor_id"`
	StartRunningTime     *float32                `json:"start_running_time"`
	StartTime            *float32                `json:"start_time"`
	Status               *string                 `json:"status"`
	TabName              *string                 `json:"tab_name"`
	TmpSchemaName        *string                 `json:"tmp_schema_name"`
	TmpTableName         *string                 `json:"tmp_table_name"`
	TrackingUrl          *interface{}            `json:"tracking_url,omitempty"`
}

// QueryRestApiGetDatabase defines model for QueryRestApi.get.Database.
type QueryRestApiGetDatabase struct {
	Id *int32 `json:"id,omitempty"`
}

// QueryRestApiGetList defines model for QueryRestApi.get_list.
type QueryRestApiGetList struct {
	ChangedOn    *time.Time   `json:"changed_on,omitempty"`
	Database     *Database1   `json:"database,omitempty"`
	EndTime      *float32     `json:"end_time,omitempty"`
	ExecutedSql  *string      `json:"executed_sql,omitempty"`
	Id           *int32       `json:"id,omitempty"`
	Rows         *int32       `json:"rows,omitempty"`
	Schema       *string      `json:"schema,omitempty"`
	Sql          *string      `json:"sql,omitempty"`
	SqlTables    *interface{} `json:"sql_tables,omitempty"`
	StartTime    *float32     `json:"start_time,omitempty"`
	Status       *string      `json:"status,omitempty"`
	TabName      *string      `json:"tab_name,omitempty"`
	TmpTableName *string      `json:"tmp_table_name,omitempty"`
	TrackingUrl  *string      `json:"tracking_url,omitempty"`
	User         *User        `json:"user,omitempty"`
}

// RelatedResponseSchema defines model for RelatedResponseSchema.
type RelatedResponseSchema struct {
	// The total number of related values
	Count  *int32                   `json:"count,omitempty"`
	Result *[]RelatedResultResponse `json:"result,omitempty"`
}

// RelatedResultResponse defines model for RelatedResultResponse.
type RelatedResultResponse struct {
	// The related item string representation
	Text *string `json:"text,omitempty"`

	// The related item identifier
	Value *int32 `json:"value,omitempty"`
}

// ReportExecutionLogRestApiGet defines model for ReportExecutionLogRestApi.get.
type ReportExecutionLogRestApiGet struct {
	EndDttm       *time.Time          `json:"end_dttm"`
	ErrorMessage  *string             `json:"error_message"`
	Id            *int32              `json:"id,omitempty"`
	ScheduledDttm time.Time           `json:"scheduled_dttm"`
	StartDttm     *time.Time          `json:"start_dttm"`
	State         string              `json:"state"`
	Uuid          *openapi_types.UUID `json:"uuid"`
	Value         *float32            `json:"value"`
	ValueRowJson  *string             `json:"value_row_json"`
}

// ReportExecutionLogRestApiGetList defines model for ReportExecutionLogRestApi.get_list.
type ReportExecutionLogRestApiGetList struct {
	EndDttm       *time.Time          `json:"end_dttm"`
	ErrorMessage  *string             `json:"error_message"`
	Id            *int32              `json:"id,omitempty"`
	ScheduledDttm time.Time           `json:"scheduled_dttm"`
	StartDttm     *time.Time          `json:"start_dttm"`
	State         string              `json:"state"`
	Uuid          *openapi_types.UUID `json:"uuid"`
	Value         *float32            `json:"value"`
	ValueRowJson  *string             `json:"value_row_json"`
}

// ReportRecipient defines model for ReportRecipient.
type ReportRecipient struct {
	RecipientConfigJson *ReportRecipientConfigJSON `json:"recipient_config_json,omitempty"`

	// The recipient type, check spec for valid options
	Type ReportRecipientType `json:"type"`
}

// The recipient type, check spec for valid options
type ReportRecipientType string

// ReportRecipientConfigJSON defines model for ReportRecipientConfigJSON.
type ReportRecipientConfigJSON struct {
	Target *string `json:"target,omitempty"`
}

// ReportScheduleRestApiGet defines model for ReportScheduleRestApi.get.
type ReportScheduleRestApiGet struct {
	Active              *bool                                    `json:"active"`
	Chart               *ReportScheduleRestApiGetSlice           `json:"chart,omitempty"`
	ContextMarkdown     *string                                  `json:"context_markdown"`
	CreationMethod      *string                                  `json:"creation_method"`
	Crontab             string                                   `json:"crontab"`
	Dashboard           *ReportScheduleRestApiGetDashboard       `json:"dashboard,omitempty"`
	Database            *ReportScheduleRestApiGetDatabase        `json:"database,omitempty"`
	Description         *string                                  `json:"description"`
	Extra               *interface{}                             `json:"extra,omitempty"`
	ForceScreenshot     *bool                                    `json:"force_screenshot"`
	GracePeriod         *int32                                   `json:"grace_period"`
	Id                  *int32                                   `json:"id,omitempty"`
	LastEvalDttm        *time.Time                               `json:"last_eval_dttm"`
	LastState           *string                                  `json:"last_state"`
	LastValue           *float32                                 `json:"last_value"`
	LastValueRowJson    *string                                  `json:"last_value_row_json"`
	LogRetention        *int32                                   `json:"log_retention"`
	Name                string                                   `json:"name"`
	Owners              *ReportScheduleRestApiGetUser            `json:"owners,omitempty"`
	Recipients          ReportScheduleRestApiGetReportRecipients `json:"recipients"`
	ReportFormat        *string                                  `json:"report_format"`
	Sql                 *string                                  `json:"sql"`
	Timezone            *string                                  `json:"timezone,omitempty"`
	Type                string                                   `json:"type"`
	ValidatorConfigJson *string                                  `json:"validator_config_json"`
	ValidatorType       *string                                  `json:"validator_type"`
	WorkingTimeout      *int32                                   `json:"working_timeout"`
}

// ReportScheduleRestApiGetDashboard defines model for ReportScheduleRestApi.get.Dashboard.
type ReportScheduleRestApiGetDashboard struct {
	DashboardTitle *string `json:"dashboard_title"`
	Id             *int32  `json:"id,omitempty"`
}

// ReportScheduleRestApiGetDatabase defines model for ReportScheduleRestApi.get.Database.
type ReportScheduleRestApiGetDatabase struct {
	DatabaseName string `json:"database_name"`
	Id           *int32 `json:"id,omitempty"`
}

// ReportScheduleRestApiGetReportRecipients defines model for ReportScheduleRestApi.get.ReportRecipients.
type ReportScheduleRestApiGetReportRecipients struct {
	Id                  *int32  `json:"id,omitempty"`
	RecipientConfigJson *string `json:"recipient_config_json"`
	Type                string  `json:"type"`
}

// ReportScheduleRestApiGetSlice defines model for ReportScheduleRestApi.get.Slice.
type ReportScheduleRestApiGetSlice struct {
	Id        *int32  `json:"id,omitempty"`
	SliceName *string `json:"slice_name"`
	VizType   *string `json:"viz_type"`
}

// ReportScheduleRestApiGetUser defines model for ReportScheduleRestApi.get.User.
type ReportScheduleRestApiGetUser struct {
	FirstName string `json:"first_name"`
	Id        *int32 `json:"id,omitempty"`
	LastName  string `json:"last_name"`
}

// ReportScheduleRestApiGetList defines model for ReportScheduleRestApi.get_list.
type ReportScheduleRestApiGetList struct {
	Active                  *bool                                        `json:"active"`
	ChangedBy               *ReportScheduleRestApiGetListUser2           `json:"changed_by,omitempty"`
	ChangedOn               *time.Time                                   `json:"changed_on"`
	ChangedOnDeltaHumanized *interface{}                                 `json:"changed_on_delta_humanized,omitempty"`
	ChartId                 *int32                                       `json:"chart_id"`
	CreatedBy               *ReportScheduleRestApiGetListUser1           `json:"created_by,omitempty"`
	CreatedOn               *time.Time                                   `json:"created_on"`
	CreationMethod          *string                                      `json:"creation_method"`
	Crontab                 string                                       `json:"crontab"`
	CrontabHumanized        *interface{}                                 `json:"crontab_humanized,omitempty"`
	DashboardId             *int32                                       `json:"dashboard_id"`
	Description             *string                                      `json:"description"`
	Extra                   *interface{}                                 `json:"extra,omitempty"`
	Id                      *int32                                       `json:"id,omitempty"`
	LastEvalDttm            *time.Time                                   `json:"last_eval_dttm"`
	LastState               *string                                      `json:"last_state"`
	Name                    string                                       `json:"name"`
	Owners                  *ReportScheduleRestApiGetListUser            `json:"owners,omitempty"`
	Recipients              ReportScheduleRestApiGetListReportRecipients `json:"recipients"`
	Timezone                *string                                      `json:"timezone,omitempty"`
	Type                    string                                       `json:"type"`
}

// ReportScheduleRestApiGetListReportRecipients defines model for ReportScheduleRestApi.get_list.ReportRecipients.
type ReportScheduleRestApiGetListReportRecipients struct {
	Id   *int32 `json:"id,omitempty"`
	Type string `json:"type"`
}

// ReportScheduleRestApiGetListUser defines model for ReportScheduleRestApi.get_list.User.
type ReportScheduleRestApiGetListUser struct {
	FirstName string `json:"first_name"`
	Id        *int32 `json:"id,omitempty"`
	LastName  string `json:"last_name"`
}

// ReportScheduleRestApiGetListUser1 defines model for ReportScheduleRestApi.get_list.User1.
type ReportScheduleRestApiGetListUser1 struct {
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
}

// ReportScheduleRestApiGetListUser2 defines model for ReportScheduleRestApi.get_list.User2.
type ReportScheduleRestApiGetListUser2 struct {
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
}

// ReportScheduleRestApiPost defines model for ReportScheduleRestApi.post.
type ReportScheduleRestApiPost struct {
	Active *bool  `json:"active,omitempty"`
	Chart  *int32 `json:"chart"`

	// Markdown description
	ContextMarkdown *string `json:"context_markdown"`

	// Creation method is used to inform the frontend whether the report/alert was created in the dashboard, chart, or alerts and reports UI.
	CreationMethod *interface{} `json:"creation_method,omitempty"`

	// A CRON expression.[Crontab Guru](https://crontab.guru/) is a helpful resource that can help you craft a CRON expression.
	Crontab   string `json:"crontab"`
	Dashboard *int32 `json:"dashboard"`
	Database  *int32 `json:"database,omitempty"`

	// Use a nice description to give context to this Alert/Report
	Description     *string                 `json:"description"`
	Extra           *map[string]interface{} `json:"extra,omitempty"`
	ForceScreenshot *bool                   `json:"force_screenshot,omitempty"`

	// Once an alert is triggered, how long, in seconds, before Superset nags you again. (in seconds)
	GracePeriod *int32 `json:"grace_period,omitempty"`

	// How long to keep the logs around for this report (in days)
	LogRetention *int32 `json:"log_retention,omitempty"`

	// The report schedule name.
	Name         string                                 `json:"name"`
	Owners       *[]int32                               `json:"owners,omitempty"`
	Recipients   *[]ReportRecipient                     `json:"recipients,omitempty"`
	ReportFormat *ReportScheduleRestApiPostReportFormat `json:"report_format,omitempty"`
	SelectedTabs *[]int32                               `json:"selected_tabs"`

	// A SQL statement that defines whether the alert should get triggered or not. The query is expected to return either NULL or a number value.
	Sql *string `json:"sql,omitempty"`

	// A timezone string that represents the location of the timezone.
	Timezone *ReportScheduleRestApiPostTimezone `json:"timezone,omitempty"`

	// The report schedule type
	Type                ReportScheduleRestApiPostType `json:"type"`
	ValidatorConfigJson *ValidatorConfigJSON          `json:"validator_config_json,omitempty"`

	// Determines when to trigger alert based off value from alert query. Alerts will be triggered with these validator types:
	// - Not Null - When the return value is Not NULL, Empty, or 0
	// - Operator - When `sql_return_value comparison_operator threshold` is True e.g. `50 <= 75`<br>Supports the comparison operators <, <=, >, >=, ==, and !=
	ValidatorType *ReportScheduleRestApiPostValidatorType `json:"validator_type,omitempty"`

	// If an alert is staled at a working state, how long until it's state is reseted to error
	WorkingTimeout *int32 `json:"working_timeout,omitempty"`
}

// ReportScheduleRestApiPostReportFormat defines model for ReportScheduleRestApiPost.ReportFormat.
type ReportScheduleRestApiPostReportFormat string

// A timezone string that represents the location of the timezone.
type ReportScheduleRestApiPostTimezone string

// The report schedule type
type ReportScheduleRestApiPostType string

// Determines when to trigger alert based off value from alert query. Alerts will be triggered with these validator types:
// - Not Null - When the return value is Not NULL, Empty, or 0
// - Operator - When `sql_return_value comparison_operator threshold` is True e.g. `50 <= 75`<br>Supports the comparison operators <, <=, >, >=, ==, and !=
type ReportScheduleRestApiPostValidatorType string

// ReportScheduleRestApiPut defines model for ReportScheduleRestApi.put.
type ReportScheduleRestApiPut struct {
	Active *bool  `json:"active,omitempty"`
	Chart  *int32 `json:"chart"`

	// Markdown description
	ContextMarkdown *string `json:"context_markdown"`

	// Creation method is used to inform the frontend whether the report/alert was created in the dashboard, chart, or alerts and reports UI.
	CreationMethod *interface{} `json:"creation_method"`

	// A CRON expression.[Crontab Guru](https://crontab.guru/) is a helpful resource that can help you craft a CRON expression.
	Crontab   *string `json:"crontab,omitempty"`
	Dashboard *int32  `json:"dashboard"`
	Database  *int32  `json:"database,omitempty"`

	// Use a nice description to give context to this Alert/Report
	Description     *string                 `json:"description"`
	Extra           *map[string]interface{} `json:"extra,omitempty"`
	ForceScreenshot *bool                   `json:"force_screenshot,omitempty"`

	// Once an alert is triggered, how long, in seconds, before Superset nags you again. (in seconds)
	GracePeriod *int32 `json:"grace_period,omitempty"`

	// How long to keep the logs around for this report (in days)
	LogRetention *int32 `json:"log_retention,omitempty"`

	// The report schedule name.
	Name         *string                               `json:"name,omitempty"`
	Owners       *[]int32                              `json:"owners,omitempty"`
	Recipients   *[]ReportRecipient                    `json:"recipients,omitempty"`
	ReportFormat *ReportScheduleRestApiPutReportFormat `json:"report_format,omitempty"`

	// A SQL statement that defines whether the alert should get triggered or not. The query is expected to return either NULL or a number value.
	Sql *string `json:"sql"`

	// A timezone string that represents the location of the timezone.
	Timezone *ReportScheduleRestApiPutTimezone `json:"timezone,omitempty"`

	// The report schedule type
	Type                *ReportScheduleRestApiPutType `json:"type,omitempty"`
	ValidatorConfigJson *ValidatorConfigJSON          `json:"validator_config_json,omitempty"`

	// Determines when to trigger alert based off value from alert query. Alerts will be triggered with these validator types:
	// - Not Null - When the return value is Not NULL, Empty, or 0
	// - Operator - When `sql_return_value comparison_operator threshold` is True e.g. `50 <= 75`<br>Supports the comparison operators <, <=, >, >=, ==, and !=
	ValidatorType *ReportScheduleRestApiPutValidatorType `json:"validator_type"`

	// If an alert is staled at a working state, how long until it's state is reseted to error
	WorkingTimeout *int32 `json:"working_timeout"`
}

// ReportScheduleRestApiPutReportFormat defines model for ReportScheduleRestApiPut.ReportFormat.
type ReportScheduleRestApiPutReportFormat string

// A timezone string that represents the location of the timezone.
type ReportScheduleRestApiPutTimezone string

// The report schedule type
type ReportScheduleRestApiPutType string

// Determines when to trigger alert based off value from alert query. Alerts will be triggered with these validator types:
// - Not Null - When the return value is Not NULL, Empty, or 0
// - Operator - When `sql_return_value comparison_operator threshold` is True e.g. `50 <= 75`<br>Supports the comparison operators <, <=, >, >=, ==, and !=
type ReportScheduleRestApiPutValidatorType string

// Resource defines model for Resource.
type Resource struct {
	Id   string      `json:"id"`
	Type interface{} `json:"type"`
}

// RlsRule defines model for RlsRule.
type RlsRule struct {
	Clause  string `json:"clause"`
	Dataset *int32 `json:"dataset,omitempty"`
}

// Roles defines model for Roles.
type Roles struct {
	Id   *int32  `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// SavedQueryRestApiGet defines model for SavedQueryRestApi.get.
type SavedQueryRestApiGet struct {
	ChangedOnDeltaHumanized *interface{}                  `json:"changed_on_delta_humanized,omitempty"`
	CreatedBy               *SavedQueryRestApiGetUser     `json:"created_by,omitempty"`
	Database                *SavedQueryRestApiGetDatabase `json:"database,omitempty"`
	Description             *string                       `json:"description"`
	Id                      *int32                        `json:"id,omitempty"`
	Label                   *string                       `json:"label"`
	Schema                  *string                       `json:"schema"`
	Sql                     *string                       `json:"sql"`
	SqlTables               *interface{}                  `json:"sql_tables,omitempty"`
}

// SavedQueryRestApiGetDatabase defines model for SavedQueryRestApi.get.Database.
type SavedQueryRestApiGetDatabase struct {
	DatabaseName string `json:"database_name"`
	Id           *int32 `json:"id,omitempty"`
}

// SavedQueryRestApiGetUser defines model for SavedQueryRestApi.get.User.
type SavedQueryRestApiGetUser struct {
	FirstName string `json:"first_name"`
	Id        *int32 `json:"id,omitempty"`
	LastName  string `json:"last_name"`
}

// SavedQueryRestApiGetList defines model for SavedQueryRestApi.get_list.
type SavedQueryRestApiGetList struct {
	ChangedOnDeltaHumanized *interface{}                      `json:"changed_on_delta_humanized,omitempty"`
	CreatedBy               *SavedQueryRestApiGetListUser     `json:"created_by,omitempty"`
	CreatedOn               *time.Time                        `json:"created_on"`
	Database                *SavedQueryRestApiGetListDatabase `json:"database,omitempty"`
	DbId                    *int32                            `json:"db_id"`
	Description             *string                           `json:"description"`
	Extra                   *interface{}                      `json:"extra,omitempty"`
	Id                      *int32                            `json:"id,omitempty"`
	Label                   *string                           `json:"label"`
	LastRunDeltaHumanized   *interface{}                      `json:"last_run_delta_humanized,omitempty"`
	Rows                    *int32                            `json:"rows"`
	Schema                  *string                           `json:"schema"`
	Sql                     *string                           `json:"sql"`
	SqlTables               *interface{}                      `json:"sql_tables,omitempty"`
}

// SavedQueryRestApiGetListDatabase defines model for SavedQueryRestApi.get_list.Database.
type SavedQueryRestApiGetListDatabase struct {
	DatabaseName string `json:"database_name"`
	Id           *int32 `json:"id,omitempty"`
}

// SavedQueryRestApiGetListUser defines model for SavedQueryRestApi.get_list.User.
type SavedQueryRestApiGetListUser struct {
	FirstName string `json:"first_name"`
	Id        *int32 `json:"id,omitempty"`
	LastName  string `json:"last_name"`
}

// SavedQueryRestApiPost defines model for SavedQueryRestApi.post.
type SavedQueryRestApiPost struct {
	DbId        *int32  `json:"db_id"`
	Description *string `json:"description"`
	Label       *string `json:"label"`
	Schema      *string `json:"schema"`
	Sql         *string `json:"sql"`
}

// SavedQueryRestApiPut defines model for SavedQueryRestApi.put.
type SavedQueryRestApiPut struct {
	DbId        *int32  `json:"db_id"`
	Description *string `json:"description"`
	Label       *string `json:"label"`
	Schema      *string `json:"schema"`
	Sql         *string `json:"sql"`
}

// SchemasResponseSchema defines model for SchemasResponseSchema.
type SchemasResponseSchema struct {
	Result *[]string `json:"result,omitempty"`
}

// SelectStarResponseSchema defines model for SelectStarResponseSchema.
type SelectStarResponseSchema struct {
	// SQL select star
	Result *string `json:"result,omitempty"`
}

// Slice defines model for Slice.
type Slice struct {
	// Duration (in seconds) of the caching timeout for this chart.
	CacheTimeout *int32 `json:"cache_timeout,omitempty"`

	// Details of the certification.
	CertificationDetails *string `json:"certification_details,omitempty"`

	// Person or group that has certified this dashboard.
	CertifiedBy *string `json:"certified_by,omitempty"`

	// Timestamp of the last modification.
	ChangedOn *string `json:"changed_on,omitempty"`

	// Timestamp of the last modification in human readable form.
	ChangedOnHumanized *string `json:"changed_on_humanized,omitempty"`

	// Datasource identifier.
	Datasource *string `json:"datasource,omitempty"`

	// Slice description.
	Description *string `json:"description,omitempty"`

	// Sanitized HTML version of the chart description.
	DescriptionMarkeddown *string `json:"description_markeddown,omitempty"`

	// The URL for editing the slice.
	EditUrl *string `json:"edit_url,omitempty"`

	// Form data associated with the slice.
	FormData *map[string]interface{} `json:"form_data,omitempty"`

	// If the chart is managed outside externally.
	IsManagedExternally *bool `json:"is_managed_externally,omitempty"`

	// Last modification in human readable form.
	Modified *string `json:"modified,omitempty"`

	// Owners identifiers.
	Owners *[]int32 `json:"owners,omitempty"`

	// The context associated with the query.
	QueryContext *map[string]interface{} `json:"query_context,omitempty"`

	// The slice ID.
	SliceId *int32 `json:"slice_id,omitempty"`

	// The slice name.
	SliceName *string `json:"slice_name,omitempty"`

	// The slice URL.
	SliceUrl *string `json:"slice_url,omitempty"`
}

// TableExtraMetadataResponseSchema defines model for TableExtraMetadataResponseSchema.
type TableExtraMetadataResponseSchema struct {
	Clustering *map[string]interface{} `json:"clustering,omitempty"`
	Metadata   *map[string]interface{} `json:"metadata,omitempty"`
	Partitions *map[string]interface{} `json:"partitions,omitempty"`
}

// TableMetadataColumnsResponse defines model for TableMetadataColumnsResponse.
type TableMetadataColumnsResponse struct {
	DuplicatesConstraint *string   `json:"duplicates_constraint,omitempty"`
	Keys                 *[]string `json:"keys,omitempty"`

	// The actual backend long type for the column
	LongType *string `json:"longType,omitempty"`

	// The column name
	Name *string `json:"name,omitempty"`

	// The column type
	Type *string `json:"type,omitempty"`
}

// TableMetadataForeignKeysIndexesResponse defines model for TableMetadataForeignKeysIndexesResponse.
type TableMetadataForeignKeysIndexesResponse struct {
	ColumnNames *[]string `json:"column_names,omitempty"`

	// The name of the foreign key or index
	Name            *string                       `json:"name,omitempty"`
	Options         *TableMetadataOptionsResponse `json:"options,omitempty"`
	ReferredColumns *[]string                     `json:"referred_columns,omitempty"`
	ReferredSchema  *string                       `json:"referred_schema,omitempty"`
	ReferredTable   *string                       `json:"referred_table,omitempty"`
	Type            *string                       `json:"type,omitempty"`
}

// TableMetadataOptionsResponse defines model for TableMetadataOptionsResponse.
type TableMetadataOptionsResponse struct {
	Deferrable *bool `json:"deferrable,omitempty"`
	Initially  *bool `json:"initially,omitempty"`
	Match      *bool `json:"match,omitempty"`
	Ondelete   *bool `json:"ondelete,omitempty"`
	Onupdate   *bool `json:"onupdate,omitempty"`
}

// TableMetadataPrimaryKeyResponse defines model for TableMetadataPrimaryKeyResponse.
type TableMetadataPrimaryKeyResponse struct {
	ColumnNames *[]string `json:"column_names,omitempty"`

	// The primary key index name
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
}

// TableMetadataResponseSchema defines model for TableMetadataResponseSchema.
type TableMetadataResponseSchema struct {
	// A list of columns and their metadata
	Columns *[]TableMetadataColumnsResponse `json:"columns,omitempty"`

	// A list of foreign keys and their metadata
	ForeignKeys *[]TableMetadataForeignKeysIndexesResponse `json:"foreignKeys,omitempty"`

	// A list of indexes and their metadata
	Indexes *[]TableMetadataForeignKeysIndexesResponse `json:"indexes,omitempty"`

	// The name of the table
	Name *string `json:"name,omitempty"`

	// Primary keys metadata
	PrimaryKey *struct {
		ColumnNames *[]string `json:"column_names,omitempty"`

		// The primary key index name
		Name *string `json:"name,omitempty"`
		Type *string `json:"type,omitempty"`
	} `json:"primaryKey,omitempty"`

	// SQL select star
	SelectStar *string `json:"selectStar,omitempty"`
}

// TemporaryCachePostSchema defines model for TemporaryCachePostSchema.
type TemporaryCachePostSchema struct {
	// Any type of JSON supported text.
	Value string `json:"value"`
}

// TemporaryCachePutSchema defines model for TemporaryCachePutSchema.
type TemporaryCachePutSchema struct {
	// Any type of JSON supported text.
	Value string `json:"value"`
}

// User defines model for User.
type User struct {
	FirstName *string `json:"first_name,omitempty"`
	Id        *int32  `json:"id,omitempty"`
	LastName  *string `json:"last_name,omitempty"`
	Username  *string `json:"username,omitempty"`
}

// User1 defines model for User1.
type User1 struct {
	FirstName *string `json:"first_name,omitempty"`
	LastName  *string `json:"last_name,omitempty"`
	Username  *string `json:"username,omitempty"`
}

// UserResponseSchema defines model for UserResponseSchema.
type UserResponseSchema struct {
	Email       *string `json:"email,omitempty"`
	FirstName   *string `json:"first_name,omitempty"`
	Id          *int32  `json:"id,omitempty"`
	IsActive    *bool   `json:"is_active,omitempty"`
	IsAnonymous *bool   `json:"is_anonymous,omitempty"`
	LastName    *string `json:"last_name,omitempty"`
	Username    *string `json:"username,omitempty"`
}

// ValidateSQLRequest defines model for ValidateSQLRequest.
type ValidateSQLRequest struct {
	Schema *string `json:"schema"`

	// SQL statement to validate
	Sql            string                  `json:"sql"`
	TemplateParams *map[string]interface{} `json:"template_params"`
}

// ValidateSQLResponse defines model for ValidateSQLResponse.
type ValidateSQLResponse struct {
	EndColumn   *int32  `json:"end_column,omitempty"`
	LineNumber  *int32  `json:"line_number,omitempty"`
	Message     *string `json:"message,omitempty"`
	StartColumn *int32  `json:"start_column,omitempty"`
}

// ValidatorConfigJSON defines model for ValidatorConfigJSON.
type ValidatorConfigJSON struct {
	// The operation to compare with a threshold to apply to the SQL output
	Op        *string  `json:"op,omitempty"`
	Threshold *float32 `json:"threshold,omitempty"`
}

// AdvancedDataTypeConvertSchema defines model for advanced_data_type_convert_schema.
type AdvancedDataTypeConvertSchema struct {
	Type   string        `json:"type"`
	Values []interface{} `json:"values"`
}

// DatabaseSchemasQuerySchema defines model for database_schemas_query_schema.
type DatabaseSchemasQuerySchema struct {
	Force *bool `json:"force,omitempty"`
}

// GetDeleteIdsSchema defines model for get_delete_ids_schema.
type GetDeleteIdsSchema = []int

// GetExportIdsSchema defines model for get_export_ids_schema.
type GetExportIdsSchema = []int

// GetInfoSchema defines model for get_info_schema.
type GetInfoSchema struct {
	AddColumns  *GetInfoSchema_AddColumns  `json:"add_columns,omitempty"`
	EditColumns *GetInfoSchema_EditColumns `json:"edit_columns,omitempty"`
	Keys        *[]GetInfoSchemaKeys       `json:"keys,omitempty"`
}

// GetInfoSchema_AddColumns defines model for GetInfoSchema.AddColumns.
type GetInfoSchema_AddColumns struct {
	AdditionalProperties map[string]struct {
		Page     *int `json:"page,omitempty"`
		PageSize *int `json:"page_size,omitempty"`
	} `json:"-"`
}

// GetInfoSchema_EditColumns defines model for GetInfoSchema.EditColumns.
type GetInfoSchema_EditColumns struct {
	AdditionalProperties map[string]struct {
		Page     *int `json:"page,omitempty"`
		PageSize *int `json:"page_size,omitempty"`
	} `json:"-"`
}

// GetInfoSchemaKeys defines model for GetInfoSchema.Keys.
type GetInfoSchemaKeys string

// GetItemSchema defines model for get_item_schema.
type GetItemSchema struct {
	Columns *[]string            `json:"columns,omitempty"`
	Keys    *[]GetItemSchemaKeys `json:"keys,omitempty"`
}

// GetItemSchemaKeys defines model for GetItemSchema.Keys.
type GetItemSchemaKeys string

// GetListSchema defines model for get_list_schema.
type GetListSchema struct {
	Columns *[]string `json:"columns,omitempty"`
	Filters *[]struct {
		Col   string      `json:"col"`
		Opr   string      `json:"opr"`
		Value interface{} `json:"value"`
	} `json:"filters,omitempty"`
	Keys           *[]GetListSchemaKeys         `json:"keys,omitempty"`
	OrderColumn    *string                      `json:"order_column,omitempty"`
	OrderDirection *GetListSchemaOrderDirection `json:"order_direction,omitempty"`
	Page           *int                         `json:"page,omitempty"`
	PageSize       *int                         `json:"page_size,omitempty"`
}

// GetListSchemaKeys defines model for GetListSchema.Keys.
type GetListSchemaKeys string

// GetListSchemaOrderDirection defines model for GetListSchema.OrderDirection.
type GetListSchemaOrderDirection string

// GetRelatedSchema defines model for get_related_schema.
type GetRelatedSchema struct {
	Filter     *string `json:"filter,omitempty"`
	IncludeIds *[]int  `json:"include_ids,omitempty"`
	Page       *int    `json:"page,omitempty"`
	PageSize   *int    `json:"page_size,omitempty"`
}

// ScreenshotQuerySchema defines model for screenshot_query_schema.
type ScreenshotQuerySchema struct {
	Force      *bool  `json:"force,omitempty"`
	ThumbSize  *[]int `json:"thumb_size,omitempty"`
	WindowSize *[]int `json:"window_size,omitempty"`
}

// ThumbnailQuerySchema defines model for thumbnail_query_schema.
type ThumbnailQuerySchema struct {
	Force *bool `json:"force,omitempty"`
}

// N400 defines model for 400.
type N400 struct {
	Message *string `json:"message,omitempty"`
}

// N401 defines model for 401.
type N401 struct {
	Message *string `json:"message,omitempty"`
}

// N403 defines model for 403.
type N403 struct {
	Message *string `json:"message,omitempty"`
}

// N404 defines model for 404.
type N404 struct {
	Message *string `json:"message,omitempty"`
}

// N422 defines model for 422.
type N422 struct {
	Message *string `json:"message,omitempty"`
}

// N500 defines model for 500.
type N500 struct {
	Message *string `json:"message,omitempty"`
}

// GetApiV1AdvancedDataTypeConvertParams defines parameters for GetApiV1AdvancedDataTypeConvert.
type GetApiV1AdvancedDataTypeConvertParams struct {
	Q *AdvancedDataTypeConvertSchema `form:"q,omitempty" json:"q,omitempty"`
}

// DeleteApiV1AnnotationLayerParams defines parameters for DeleteApiV1AnnotationLayer.
type DeleteApiV1AnnotationLayerParams struct {
	Q *GetDeleteIdsSchema `form:"q,omitempty" json:"q,omitempty"`
}

// GetApiV1AnnotationLayerParams defines parameters for GetApiV1AnnotationLayer.
type GetApiV1AnnotationLayerParams struct {
	Q *GetListSchema `form:"q,omitempty" json:"q,omitempty"`
}

// PostApiV1AnnotationLayerJSONBody defines parameters for PostApiV1AnnotationLayer.
type PostApiV1AnnotationLayerJSONBody = AnnotationLayerRestApiPost

// GetApiV1AnnotationLayerInfoParams defines parameters for GetApiV1AnnotationLayerInfo.
type GetApiV1AnnotationLayerInfoParams struct {
	Q *GetInfoSchema `form:"q,omitempty" json:"q,omitempty"`
}

// GetApiV1AnnotationLayerRelatedColumnNameParams defines parameters for GetApiV1AnnotationLayerRelatedColumnName.
type GetApiV1AnnotationLayerRelatedColumnNameParams struct {
	Q *GetRelatedSchema `form:"q,omitempty" json:"q,omitempty"`
}

// GetApiV1AnnotationLayerPkParams defines parameters for GetApiV1AnnotationLayerPk.
type GetApiV1AnnotationLayerPkParams struct {
	Q *GetItemSchema `form:"q,omitempty" json:"q,omitempty"`
}

// PutApiV1AnnotationLayerPkJSONBody defines parameters for PutApiV1AnnotationLayerPk.
type PutApiV1AnnotationLayerPkJSONBody = AnnotationLayerRestApiPut

// DeleteApiV1AnnotationLayerPkAnnotationParams defines parameters for DeleteApiV1AnnotationLayerPkAnnotation.
type DeleteApiV1AnnotationLayerPkAnnotationParams struct {
	Q *GetDeleteIdsSchema `form:"q,omitempty" json:"q,omitempty"`
}

// GetApiV1AnnotationLayerPkAnnotationParams defines parameters for GetApiV1AnnotationLayerPkAnnotation.
type GetApiV1AnnotationLayerPkAnnotationParams struct {
	Q *GetListSchema `form:"q,omitempty" json:"q,omitempty"`
}

// PostApiV1AnnotationLayerPkAnnotationJSONBody defines parameters for PostApiV1AnnotationLayerPkAnnotation.
type PostApiV1AnnotationLayerPkAnnotationJSONBody = AnnotationRestApiPost

// GetApiV1AnnotationLayerPkAnnotationAnnotationIdParams defines parameters for GetApiV1AnnotationLayerPkAnnotationAnnotationId.
type GetApiV1AnnotationLayerPkAnnotationAnnotationIdParams struct {
	Q *GetItemSchema `form:"q,omitempty" json:"q,omitempty"`
}

// PutApiV1AnnotationLayerPkAnnotationAnnotationIdJSONBody defines parameters for PutApiV1AnnotationLayerPkAnnotationAnnotationId.
type PutApiV1AnnotationLayerPkAnnotationAnnotationIdJSONBody = AnnotationRestApiPut

// GetApiV1AsyncEventParams defines parameters for GetApiV1AsyncEvent.
type GetApiV1AsyncEventParams struct {
	// Last ID received by the client
	LastId *string `form:"last_id,omitempty" json:"last_id,omitempty"`
}

// PostApiV1CachekeyInvalidateJSONBody defines parameters for PostApiV1CachekeyInvalidate.
type PostApiV1CachekeyInvalidateJSONBody = CacheInvalidationRequestSchema

// DeleteApiV1ChartParams defines parameters for DeleteApiV1Chart.
type DeleteApiV1ChartParams struct {
	Q *GetDeleteIdsSchema `form:"q,omitempty" json:"q,omitempty"`
}

// GetApiV1ChartParams defines parameters for GetApiV1Chart.
type GetApiV1ChartParams struct {
	Q *GetListSchema `form:"q,omitempty" json:"q,omitempty"`
}

// PostApiV1ChartJSONBody defines parameters for PostApiV1Chart.
type PostApiV1ChartJSONBody = ChartRestApiPost

// GetApiV1ChartInfoParams defines parameters for GetApiV1ChartInfo.
type GetApiV1ChartInfoParams struct {
	Q *GetInfoSchema `form:"q,omitempty" json:"q,omitempty"`
}

// PostApiV1ChartDataJSONBody defines parameters for PostApiV1ChartData.
type PostApiV1ChartDataJSONBody = ChartDataQueryContextSchema

// GetApiV1ChartExportParams defines parameters for GetApiV1ChartExport.
type GetApiV1ChartExportParams struct {
	Q *GetExportIdsSchema `form:"q,omitempty" json:"q,omitempty"`
}

// GetApiV1ChartFavoriteStatusParams defines parameters for GetApiV1ChartFavoriteStatus.
type GetApiV1ChartFavoriteStatusParams struct {
	Q *GetFavStarIdsSchema `form:"q,omitempty" json:"q,omitempty"`
}

// GetApiV1ChartRelatedColumnNameParams defines parameters for GetApiV1ChartRelatedColumnName.
type GetApiV1ChartRelatedColumnNameParams struct {
	Q *GetRelatedSchema `form:"q,omitempty" json:"q,omitempty"`
}

// GetApiV1ChartPkParams defines parameters for GetApiV1ChartPk.
type GetApiV1ChartPkParams struct {
	Q *GetItemSchema `form:"q,omitempty" json:"q,omitempty"`
}

// PutApiV1ChartPkJSONBody defines parameters for PutApiV1ChartPk.
type PutApiV1ChartPkJSONBody = ChartRestApiPut

// GetApiV1ChartPkCacheScreenshotParams defines parameters for GetApiV1ChartPkCacheScreenshot.
type GetApiV1ChartPkCacheScreenshotParams struct {
	Q *ScreenshotQuerySchema `form:"q,omitempty" json:"q,omitempty"`
}

// GetApiV1ChartPkDataParams defines parameters for GetApiV1ChartPkData.
type GetApiV1ChartPkDataParams struct {
	// The format in which the data should be returned
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// The type in which the data should be returned
	Type *string `form:"type,omitempty" json:"type,omitempty"`
}

// DeleteApiV1CssTemplateParams defines parameters for DeleteApiV1CssTemplate.
type DeleteApiV1CssTemplateParams struct {
	Q *GetDeleteIdsSchema `form:"q,omitempty" json:"q,omitempty"`
}

// GetApiV1CssTemplateParams defines parameters for GetApiV1CssTemplate.
type GetApiV1CssTemplateParams struct {
	Q *GetListSchema `form:"q,omitempty" json:"q,omitempty"`
}

// PostApiV1CssTemplateJSONBody defines parameters for PostApiV1CssTemplate.
type PostApiV1CssTemplateJSONBody = CssTemplateRestApiPost

// GetApiV1CssTemplateInfoParams defines parameters for GetApiV1CssTemplateInfo.
type GetApiV1CssTemplateInfoParams struct {
	Q *GetInfoSchema `form:"q,omitempty" json:"q,omitempty"`
}

// GetApiV1CssTemplateRelatedColumnNameParams defines parameters for GetApiV1CssTemplateRelatedColumnName.
type GetApiV1CssTemplateRelatedColumnNameParams struct {
	Q *GetRelatedSchema `form:"q,omitempty" json:"q,omitempty"`
}

// GetApiV1CssTemplatePkParams defines parameters for GetApiV1CssTemplatePk.
type GetApiV1CssTemplatePkParams struct {
	Q *GetItemSchema `form:"q,omitempty" json:"q,omitempty"`
}

// PutApiV1CssTemplatePkJSONBody defines parameters for PutApiV1CssTemplatePk.
type PutApiV1CssTemplatePkJSONBody = CssTemplateRestApiPut

// DeleteApiV1DashboardParams defines parameters for DeleteApiV1Dashboard.
type DeleteApiV1DashboardParams struct {
	Q *GetDeleteIdsSchema `form:"q,omitempty" json:"q,omitempty"`
}

// GetApiV1DashboardParams defines parameters for GetApiV1Dashboard.
type GetApiV1DashboardParams struct {
	Q *GetListSchema `form:"q,omitempty" json:"q,omitempty"`
}

// PostApiV1DashboardJSONBody defines parameters for PostApiV1Dashboard.
type PostApiV1DashboardJSONBody = DashboardRestApiPost

// GetApiV1DashboardInfoParams defines parameters for GetApiV1DashboardInfo.
type GetApiV1DashboardInfoParams struct {
	Q *GetInfoSchema `form:"q,omitempty" json:"q,omitempty"`
}

// GetApiV1DashboardExportParams defines parameters for GetApiV1DashboardExport.
type GetApiV1DashboardExportParams struct {
	Q *GetExportIdsSchema `form:"q,omitempty" json:"q,omitempty"`
}

// GetApiV1DashboardFavoriteStatusParams defines parameters for GetApiV1DashboardFavoriteStatus.
type GetApiV1DashboardFavoriteStatusParams struct {
	Q *GetFavStarIdsSchema `form:"q,omitempty" json:"q,omitempty"`
}

// GetApiV1DashboardRelatedColumnNameParams defines parameters for GetApiV1DashboardRelatedColumnName.
type GetApiV1DashboardRelatedColumnNameParams struct {
	Q *GetRelatedSchema `form:"q,omitempty" json:"q,omitempty"`
}

// PostApiV1DashboardDashboardIdFiltersetsJSONBody defines parameters for PostApiV1DashboardDashboardIdFiltersets.
type PostApiV1DashboardDashboardIdFiltersetsJSONBody = FilterSetRestApiPost

// PutApiV1DashboardDashboardIdFiltersetsPkJSONBody defines parameters for PutApiV1DashboardDashboardIdFiltersetsPk.
type PutApiV1DashboardDashboardIdFiltersetsPkJSONBody = FilterSetRestApiPut

// PostApiV1DashboardIdOrSlugEmbeddedJSONBody defines parameters for PostApiV1DashboardIdOrSlugEmbedded.
type PostApiV1DashboardIdOrSlugEmbeddedJSONBody = EmbeddedDashboardConfig

// PutApiV1DashboardIdOrSlugEmbeddedJSONBody defines parameters for PutApiV1DashboardIdOrSlugEmbedded.
type PutApiV1DashboardIdOrSlugEmbeddedJSONBody = EmbeddedDashboardConfig

// PutApiV1DashboardPkJSONBody defines parameters for PutApiV1DashboardPk.
type PutApiV1DashboardPkJSONBody = DashboardRestApiPut

// PostApiV1DashboardPkFilterStateJSONBody defines parameters for PostApiV1DashboardPkFilterState.
type PostApiV1DashboardPkFilterStateJSONBody = TemporaryCachePostSchema

// PostApiV1DashboardPkFilterStateParams defines parameters for PostApiV1DashboardPkFilterState.
type PostApiV1DashboardPkFilterStateParams struct {
	TabId *int `form:"tab_id,omitempty" json:"tab_id,omitempty"`
}

// PutApiV1DashboardPkFilterStateKeyJSONBody defines parameters for PutApiV1DashboardPkFilterStateKey.
type PutApiV1DashboardPkFilterStateKeyJSONBody = TemporaryCachePutSchema

// PutApiV1DashboardPkFilterStateKeyParams defines parameters for PutApiV1DashboardPkFilterStateKey.
type PutApiV1DashboardPkFilterStateKeyParams struct {
	TabId *int `form:"tab_id,omitempty" json:"tab_id,omitempty"`
}

// PostApiV1DashboardPkPermalinkJSONBody defines parameters for PostApiV1DashboardPkPermalink.
type PostApiV1DashboardPkPermalinkJSONBody = DashboardPermalinkPostSchema

// GetApiV1DashboardPkThumbnailDigestParams defines parameters for GetApiV1DashboardPkThumbnailDigest.
type GetApiV1DashboardPkThumbnailDigestParams struct {
	Q *ThumbnailQuerySchema `form:"q,omitempty" json:"q,omitempty"`
}

// GetApiV1DatabaseParams defines parameters for GetApiV1Database.
type GetApiV1DatabaseParams struct {
	Q *GetListSchema `form:"q,omitempty" json:"q,omitempty"`
}

// PostApiV1DatabaseJSONBody defines parameters for PostApiV1Database.
type PostApiV1DatabaseJSONBody = DatabaseRestApiPost

// GetApiV1DatabaseInfoParams defines parameters for GetApiV1DatabaseInfo.
type GetApiV1DatabaseInfoParams struct {
	Q *GetInfoSchema `form:"q,omitempty" json:"q,omitempty"`
}

// GetApiV1DatabaseExportParams defines parameters for GetApiV1DatabaseExport.
type GetApiV1DatabaseExportParams struct {
	Q *GetExportIdsSchema `form:"q,omitempty" json:"q,omitempty"`
}

// PostApiV1DatabaseTestConnectionJSONBody defines parameters for PostApiV1DatabaseTestConnection.
type PostApiV1DatabaseTestConnectionJSONBody = DatabaseTestConnectionSchema

// PostApiV1DatabaseValidateParametersJSONBody defines parameters for PostApiV1DatabaseValidateParameters.
type PostApiV1DatabaseValidateParametersJSONBody = DatabaseValidateParametersSchema

// GetApiV1DatabasePkParams defines parameters for GetApiV1DatabasePk.
type GetApiV1DatabasePkParams struct {
	Q *GetItemSchema `form:"q,omitempty" json:"q,omitempty"`
}

// PutApiV1DatabasePkJSONBody defines parameters for PutApiV1DatabasePk.
type PutApiV1DatabasePkJSONBody = DatabaseRestApiPut

// GetApiV1DatabasePkSchemasParams defines parameters for GetApiV1DatabasePkSchemas.
type GetApiV1DatabasePkSchemasParams struct {
	Q *DatabaseSchemasQuerySchema `form:"q,omitempty" json:"q,omitempty"`
}

// PostApiV1DatabasePkValidateSqlJSONBody defines parameters for PostApiV1DatabasePkValidateSql.
type PostApiV1DatabasePkValidateSqlJSONBody = ValidateSQLRequest

// DeleteApiV1DatasetParams defines parameters for DeleteApiV1Dataset.
type DeleteApiV1DatasetParams struct {
	Q *GetDeleteIdsSchema `form:"q,omitempty" json:"q,omitempty"`
}

// GetApiV1DatasetParams defines parameters for GetApiV1Dataset.
type GetApiV1DatasetParams struct {
	Q *GetListSchema `form:"q,omitempty" json:"q,omitempty"`
}

// PostApiV1DatasetJSONBody defines parameters for PostApiV1Dataset.
type PostApiV1DatasetJSONBody = DatasetRestApiPost

// GetApiV1DatasetInfoParams defines parameters for GetApiV1DatasetInfo.
type GetApiV1DatasetInfoParams struct {
	Q *GetInfoSchema `form:"q,omitempty" json:"q,omitempty"`
}

// GetApiV1DatasetDistinctColumnNameParams defines parameters for GetApiV1DatasetDistinctColumnName.
type GetApiV1DatasetDistinctColumnNameParams struct {
	Q *GetRelatedSchema `form:"q,omitempty" json:"q,omitempty"`
}

// PostApiV1DatasetDuplicateJSONBody defines parameters for PostApiV1DatasetDuplicate.
type PostApiV1DatasetDuplicateJSONBody = DatasetDuplicateSchema

// GetApiV1DatasetExportParams defines parameters for GetApiV1DatasetExport.
type GetApiV1DatasetExportParams struct {
	Q *GetExportIdsSchema `form:"q,omitempty" json:"q,omitempty"`
}

// GetApiV1DatasetRelatedColumnNameParams defines parameters for GetApiV1DatasetRelatedColumnName.
type GetApiV1DatasetRelatedColumnNameParams struct {
	Q *GetRelatedSchema `form:"q,omitempty" json:"q,omitempty"`
}

// GetApiV1DatasetPkParams defines parameters for GetApiV1DatasetPk.
type GetApiV1DatasetPkParams struct {
	Q *GetItemSchema `form:"q,omitempty" json:"q,omitempty"`
}

// PutApiV1DatasetPkJSONBody defines parameters for PutApiV1DatasetPk.
type PutApiV1DatasetPkJSONBody = DatasetRestApiPut

// PutApiV1DatasetPkParams defines parameters for PutApiV1DatasetPk.
type PutApiV1DatasetPkParams struct {
	OverrideColumns *bool `form:"override_columns,omitempty" json:"override_columns,omitempty"`
}

// GetApiV1ExploreParams defines parameters for GetApiV1Explore.
type GetApiV1ExploreParams struct {
	FormDataKey  *string `form:"form_data_key,omitempty" json:"form_data_key,omitempty"`
	PermalinkKey *string `form:"permalink_key,omitempty" json:"permalink_key,omitempty"`
	SliceId      *int    `form:"slice_id,omitempty" json:"slice_id,omitempty"`
	DatasetId    *int    `form:"dataset_id,omitempty" json:"dataset_id,omitempty"`
	DatasetType  *string `form:"dataset_type,omitempty" json:"dataset_type,omitempty"`
}

// PostApiV1ExploreFormDataJSONBody defines parameters for PostApiV1ExploreFormData.
type PostApiV1ExploreFormDataJSONBody = FormDataPostSchema

// PostApiV1ExploreFormDataParams defines parameters for PostApiV1ExploreFormData.
type PostApiV1ExploreFormDataParams struct {
	TabId *int `form:"tab_id,omitempty" json:"tab_id,omitempty"`
}

// PutApiV1ExploreFormDataKeyJSONBody defines parameters for PutApiV1ExploreFormDataKey.
type PutApiV1ExploreFormDataKeyJSONBody = FormDataPutSchema

// PutApiV1ExploreFormDataKeyParams defines parameters for PutApiV1ExploreFormDataKey.
type PutApiV1ExploreFormDataKeyParams struct {
	TabId *int `form:"tab_id,omitempty" json:"tab_id,omitempty"`
}

// PostApiV1ExplorePermalinkJSONBody defines parameters for PostApiV1ExplorePermalink.
type PostApiV1ExplorePermalinkJSONBody = ExplorePermalinkPostSchema

// GetApiV1LogParams defines parameters for GetApiV1Log.
type GetApiV1LogParams struct {
	Q *GetListSchema `form:"q,omitempty" json:"q,omitempty"`
}

// PostApiV1LogJSONBody defines parameters for PostApiV1Log.
type PostApiV1LogJSONBody = LogRestApiPost

// GetApiV1LogPkParams defines parameters for GetApiV1LogPk.
type GetApiV1LogPkParams struct {
	Q *GetItemSchema `form:"q,omitempty" json:"q,omitempty"`
}

// GetApiV1QueryParams defines parameters for GetApiV1Query.
type GetApiV1QueryParams struct {
	Q *GetListSchema `form:"q,omitempty" json:"q,omitempty"`
}

// GetApiV1QueryDistinctColumnNameParams defines parameters for GetApiV1QueryDistinctColumnName.
type GetApiV1QueryDistinctColumnNameParams struct {
	Q *GetRelatedSchema `form:"q,omitempty" json:"q,omitempty"`
}

// GetApiV1QueryRelatedColumnNameParams defines parameters for GetApiV1QueryRelatedColumnName.
type GetApiV1QueryRelatedColumnNameParams struct {
	Q *GetRelatedSchema `form:"q,omitempty" json:"q,omitempty"`
}

// GetApiV1QueryPkParams defines parameters for GetApiV1QueryPk.
type GetApiV1QueryPkParams struct {
	Q *GetItemSchema `form:"q,omitempty" json:"q,omitempty"`
}

// DeleteApiV1ReportParams defines parameters for DeleteApiV1Report.
type DeleteApiV1ReportParams struct {
	Q *GetDeleteIdsSchema `form:"q,omitempty" json:"q,omitempty"`
}

// GetApiV1ReportParams defines parameters for GetApiV1Report.
type GetApiV1ReportParams struct {
	Q *GetListSchema `form:"q,omitempty" json:"q,omitempty"`
}

// PostApiV1ReportJSONBody defines parameters for PostApiV1Report.
type PostApiV1ReportJSONBody = ReportScheduleRestApiPost

// GetApiV1ReportInfoParams defines parameters for GetApiV1ReportInfo.
type GetApiV1ReportInfoParams struct {
	Q *GetInfoSchema `form:"q,omitempty" json:"q,omitempty"`
}

// GetApiV1ReportRelatedColumnNameParams defines parameters for GetApiV1ReportRelatedColumnName.
type GetApiV1ReportRelatedColumnNameParams struct {
	Q *GetRelatedSchema `form:"q,omitempty" json:"q,omitempty"`
}

// GetApiV1ReportPkParams defines parameters for GetApiV1ReportPk.
type GetApiV1ReportPkParams struct {
	Q *GetItemSchema `form:"q,omitempty" json:"q,omitempty"`
}

// PutApiV1ReportPkJSONBody defines parameters for PutApiV1ReportPk.
type PutApiV1ReportPkJSONBody = ReportScheduleRestApiPut

// GetApiV1ReportPkLogParams defines parameters for GetApiV1ReportPkLog.
type GetApiV1ReportPkLogParams struct {
	Q *GetListSchema `form:"q,omitempty" json:"q,omitempty"`
}

// GetApiV1ReportPkLogLogIdParams defines parameters for GetApiV1ReportPkLogLogId.
type GetApiV1ReportPkLogLogIdParams struct {
	Q *GetItemSchema `form:"q,omitempty" json:"q,omitempty"`
}

// DeleteApiV1SavedQueryParams defines parameters for DeleteApiV1SavedQuery.
type DeleteApiV1SavedQueryParams struct {
	Q *GetDeleteIdsSchema `form:"q,omitempty" json:"q,omitempty"`
}

// GetApiV1SavedQueryParams defines parameters for GetApiV1SavedQuery.
type GetApiV1SavedQueryParams struct {
	Q *GetListSchema `form:"q,omitempty" json:"q,omitempty"`
}

// PostApiV1SavedQueryJSONBody defines parameters for PostApiV1SavedQuery.
type PostApiV1SavedQueryJSONBody = SavedQueryRestApiPost

// GetApiV1SavedQueryInfoParams defines parameters for GetApiV1SavedQueryInfo.
type GetApiV1SavedQueryInfoParams struct {
	Q *GetInfoSchema `form:"q,omitempty" json:"q,omitempty"`
}

// GetApiV1SavedQueryDistinctColumnNameParams defines parameters for GetApiV1SavedQueryDistinctColumnName.
type GetApiV1SavedQueryDistinctColumnNameParams struct {
	Q *GetRelatedSchema `form:"q,omitempty" json:"q,omitempty"`
}

// GetApiV1SavedQueryExportParams defines parameters for GetApiV1SavedQueryExport.
type GetApiV1SavedQueryExportParams struct {
	Q *GetExportIdsSchema `form:"q,omitempty" json:"q,omitempty"`
}

// GetApiV1SavedQueryRelatedColumnNameParams defines parameters for GetApiV1SavedQueryRelatedColumnName.
type GetApiV1SavedQueryRelatedColumnNameParams struct {
	Q *GetRelatedSchema `form:"q,omitempty" json:"q,omitempty"`
}

// GetApiV1SavedQueryPkParams defines parameters for GetApiV1SavedQueryPk.
type GetApiV1SavedQueryPkParams struct {
	Q *GetItemSchema `form:"q,omitempty" json:"q,omitempty"`
}

// PutApiV1SavedQueryPkJSONBody defines parameters for PutApiV1SavedQueryPk.
type PutApiV1SavedQueryPkJSONBody = SavedQueryRestApiPut

// PostApiV1SecurityGuestTokenJSONBody defines parameters for PostApiV1SecurityGuestToken.
type PostApiV1SecurityGuestTokenJSONBody = GuestTokenCreate

// PostApiV1SecurityLoginJSONBody defines parameters for PostApiV1SecurityLogin.
type PostApiV1SecurityLoginJSONBody struct {
	// The password for authentication
	Password *string `json:"password,omitempty"`

	// Choose an authentication provider
	Provider *PostApiV1SecurityLoginJSONBodyProvider `json:"provider,omitempty"`

	// If true a refresh token is provided also
	Refresh *bool `json:"refresh,omitempty"`

	// The username for authentication
	Username *string `json:"username,omitempty"`
}

// PostApiV1SecurityLoginJSONBodyProvider defines parameters for PostApiV1SecurityLogin.
type PostApiV1SecurityLoginJSONBodyProvider string

// PostApiV1AnnotationLayerJSONRequestBody defines body for PostApiV1AnnotationLayer for application/json ContentType.
type PostApiV1AnnotationLayerJSONRequestBody = PostApiV1AnnotationLayerJSONBody

// PutApiV1AnnotationLayerPkJSONRequestBody defines body for PutApiV1AnnotationLayerPk for application/json ContentType.
type PutApiV1AnnotationLayerPkJSONRequestBody = PutApiV1AnnotationLayerPkJSONBody

// PostApiV1AnnotationLayerPkAnnotationJSONRequestBody defines body for PostApiV1AnnotationLayerPkAnnotation for application/json ContentType.
type PostApiV1AnnotationLayerPkAnnotationJSONRequestBody = PostApiV1AnnotationLayerPkAnnotationJSONBody

// PutApiV1AnnotationLayerPkAnnotationAnnotationIdJSONRequestBody defines body for PutApiV1AnnotationLayerPkAnnotationAnnotationId for application/json ContentType.
type PutApiV1AnnotationLayerPkAnnotationAnnotationIdJSONRequestBody = PutApiV1AnnotationLayerPkAnnotationAnnotationIdJSONBody

// PostApiV1CachekeyInvalidateJSONRequestBody defines body for PostApiV1CachekeyInvalidate for application/json ContentType.
type PostApiV1CachekeyInvalidateJSONRequestBody = PostApiV1CachekeyInvalidateJSONBody

// PostApiV1ChartJSONRequestBody defines body for PostApiV1Chart for application/json ContentType.
type PostApiV1ChartJSONRequestBody = PostApiV1ChartJSONBody

// PostApiV1ChartDataJSONRequestBody defines body for PostApiV1ChartData for application/json ContentType.
type PostApiV1ChartDataJSONRequestBody = PostApiV1ChartDataJSONBody

// PutApiV1ChartPkJSONRequestBody defines body for PutApiV1ChartPk for application/json ContentType.
type PutApiV1ChartPkJSONRequestBody = PutApiV1ChartPkJSONBody

// PostApiV1CssTemplateJSONRequestBody defines body for PostApiV1CssTemplate for application/json ContentType.
type PostApiV1CssTemplateJSONRequestBody = PostApiV1CssTemplateJSONBody

// PutApiV1CssTemplatePkJSONRequestBody defines body for PutApiV1CssTemplatePk for application/json ContentType.
type PutApiV1CssTemplatePkJSONRequestBody = PutApiV1CssTemplatePkJSONBody

// PostApiV1DashboardJSONRequestBody defines body for PostApiV1Dashboard for application/json ContentType.
type PostApiV1DashboardJSONRequestBody = PostApiV1DashboardJSONBody

// PostApiV1DashboardDashboardIdFiltersetsJSONRequestBody defines body for PostApiV1DashboardDashboardIdFiltersets for application/json ContentType.
type PostApiV1DashboardDashboardIdFiltersetsJSONRequestBody = PostApiV1DashboardDashboardIdFiltersetsJSONBody

// PutApiV1DashboardDashboardIdFiltersetsPkJSONRequestBody defines body for PutApiV1DashboardDashboardIdFiltersetsPk for application/json ContentType.
type PutApiV1DashboardDashboardIdFiltersetsPkJSONRequestBody = PutApiV1DashboardDashboardIdFiltersetsPkJSONBody

// PostApiV1DashboardIdOrSlugEmbeddedJSONRequestBody defines body for PostApiV1DashboardIdOrSlugEmbedded for application/json ContentType.
type PostApiV1DashboardIdOrSlugEmbeddedJSONRequestBody = PostApiV1DashboardIdOrSlugEmbeddedJSONBody

// PutApiV1DashboardIdOrSlugEmbeddedJSONRequestBody defines body for PutApiV1DashboardIdOrSlugEmbedded for application/json ContentType.
type PutApiV1DashboardIdOrSlugEmbeddedJSONRequestBody = PutApiV1DashboardIdOrSlugEmbeddedJSONBody

// PutApiV1DashboardPkJSONRequestBody defines body for PutApiV1DashboardPk for application/json ContentType.
type PutApiV1DashboardPkJSONRequestBody = PutApiV1DashboardPkJSONBody

// PostApiV1DashboardPkFilterStateJSONRequestBody defines body for PostApiV1DashboardPkFilterState for application/json ContentType.
type PostApiV1DashboardPkFilterStateJSONRequestBody = PostApiV1DashboardPkFilterStateJSONBody

// PutApiV1DashboardPkFilterStateKeyJSONRequestBody defines body for PutApiV1DashboardPkFilterStateKey for application/json ContentType.
type PutApiV1DashboardPkFilterStateKeyJSONRequestBody = PutApiV1DashboardPkFilterStateKeyJSONBody

// PostApiV1DashboardPkPermalinkJSONRequestBody defines body for PostApiV1DashboardPkPermalink for application/json ContentType.
type PostApiV1DashboardPkPermalinkJSONRequestBody = PostApiV1DashboardPkPermalinkJSONBody

// PostApiV1DatabaseJSONRequestBody defines body for PostApiV1Database for application/json ContentType.
type PostApiV1DatabaseJSONRequestBody = PostApiV1DatabaseJSONBody

// PostApiV1DatabaseTestConnectionJSONRequestBody defines body for PostApiV1DatabaseTestConnection for application/json ContentType.
type PostApiV1DatabaseTestConnectionJSONRequestBody = PostApiV1DatabaseTestConnectionJSONBody

// PostApiV1DatabaseValidateParametersJSONRequestBody defines body for PostApiV1DatabaseValidateParameters for application/json ContentType.
type PostApiV1DatabaseValidateParametersJSONRequestBody = PostApiV1DatabaseValidateParametersJSONBody

// PutApiV1DatabasePkJSONRequestBody defines body for PutApiV1DatabasePk for application/json ContentType.
type PutApiV1DatabasePkJSONRequestBody = PutApiV1DatabasePkJSONBody

// PostApiV1DatabasePkValidateSqlJSONRequestBody defines body for PostApiV1DatabasePkValidateSql for application/json ContentType.
type PostApiV1DatabasePkValidateSqlJSONRequestBody = PostApiV1DatabasePkValidateSqlJSONBody

// PostApiV1DatasetJSONRequestBody defines body for PostApiV1Dataset for application/json ContentType.
type PostApiV1DatasetJSONRequestBody = PostApiV1DatasetJSONBody

// PostApiV1DatasetDuplicateJSONRequestBody defines body for PostApiV1DatasetDuplicate for application/json ContentType.
type PostApiV1DatasetDuplicateJSONRequestBody = PostApiV1DatasetDuplicateJSONBody

// PutApiV1DatasetPkJSONRequestBody defines body for PutApiV1DatasetPk for application/json ContentType.
type PutApiV1DatasetPkJSONRequestBody = PutApiV1DatasetPkJSONBody

// PostApiV1ExploreFormDataJSONRequestBody defines body for PostApiV1ExploreFormData for application/json ContentType.
type PostApiV1ExploreFormDataJSONRequestBody = PostApiV1ExploreFormDataJSONBody

// PutApiV1ExploreFormDataKeyJSONRequestBody defines body for PutApiV1ExploreFormDataKey for application/json ContentType.
type PutApiV1ExploreFormDataKeyJSONRequestBody = PutApiV1ExploreFormDataKeyJSONBody

// PostApiV1ExplorePermalinkJSONRequestBody defines body for PostApiV1ExplorePermalink for application/json ContentType.
type PostApiV1ExplorePermalinkJSONRequestBody = PostApiV1ExplorePermalinkJSONBody

// PostApiV1LogJSONRequestBody defines body for PostApiV1Log for application/json ContentType.
type PostApiV1LogJSONRequestBody = PostApiV1LogJSONBody

// PostApiV1ReportJSONRequestBody defines body for PostApiV1Report for application/json ContentType.
type PostApiV1ReportJSONRequestBody = PostApiV1ReportJSONBody

// PutApiV1ReportPkJSONRequestBody defines body for PutApiV1ReportPk for application/json ContentType.
type PutApiV1ReportPkJSONRequestBody = PutApiV1ReportPkJSONBody

// PostApiV1SavedQueryJSONRequestBody defines body for PostApiV1SavedQuery for application/json ContentType.
type PostApiV1SavedQueryJSONRequestBody = PostApiV1SavedQueryJSONBody

// PutApiV1SavedQueryPkJSONRequestBody defines body for PutApiV1SavedQueryPk for application/json ContentType.
type PutApiV1SavedQueryPkJSONRequestBody = PutApiV1SavedQueryPkJSONBody

// PostApiV1SecurityGuestTokenJSONRequestBody defines body for PostApiV1SecurityGuestToken for application/json ContentType.
type PostApiV1SecurityGuestTokenJSONRequestBody = PostApiV1SecurityGuestTokenJSONBody

// PostApiV1SecurityLoginJSONRequestBody defines body for PostApiV1SecurityLogin for application/json ContentType.
type PostApiV1SecurityLoginJSONRequestBody PostApiV1SecurityLoginJSONBody

// Getter for additional properties for AnnotationLayer_Overrides. Returns the specified
// element and whether it was found
func (a AnnotationLayer_Overrides) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AnnotationLayer_Overrides
func (a *AnnotationLayer_Overrides) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AnnotationLayer_Overrides to handle AdditionalProperties
func (a *AnnotationLayer_Overrides) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AnnotationLayer_Overrides to handle AdditionalProperties
func (a AnnotationLayer_Overrides) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ChartDataQueryObject_UrlParams. Returns the specified
// element and whether it was found
func (a ChartDataQueryObject_UrlParams) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ChartDataQueryObject_UrlParams
func (a *ChartDataQueryObject_UrlParams) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ChartDataQueryObject_UrlParams to handle AdditionalProperties
func (a *ChartDataQueryObject_UrlParams) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ChartDataQueryObject_UrlParams to handle AdditionalProperties
func (a ChartDataQueryObject_UrlParams) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DashboardDatasetSchema_VerboseMap. Returns the specified
// element and whether it was found
func (a DashboardDatasetSchema_VerboseMap) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DashboardDatasetSchema_VerboseMap
func (a *DashboardDatasetSchema_VerboseMap) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DashboardDatasetSchema_VerboseMap to handle AdditionalProperties
func (a *DashboardDatasetSchema_VerboseMap) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DashboardDatasetSchema_VerboseMap to handle AdditionalProperties
func (a DashboardDatasetSchema_VerboseMap) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DatabaseRestApiPost_Parameters. Returns the specified
// element and whether it was found
func (a DatabaseRestApiPost_Parameters) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DatabaseRestApiPost_Parameters
func (a *DatabaseRestApiPost_Parameters) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DatabaseRestApiPost_Parameters to handle AdditionalProperties
func (a *DatabaseRestApiPost_Parameters) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DatabaseRestApiPost_Parameters to handle AdditionalProperties
func (a DatabaseRestApiPost_Parameters) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DatabaseRestApiPut_Parameters. Returns the specified
// element and whether it was found
func (a DatabaseRestApiPut_Parameters) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DatabaseRestApiPut_Parameters
func (a *DatabaseRestApiPut_Parameters) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DatabaseRestApiPut_Parameters to handle AdditionalProperties
func (a *DatabaseRestApiPut_Parameters) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DatabaseRestApiPut_Parameters to handle AdditionalProperties
func (a DatabaseRestApiPut_Parameters) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DatabaseTestConnectionSchema_Parameters. Returns the specified
// element and whether it was found
func (a DatabaseTestConnectionSchema_Parameters) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DatabaseTestConnectionSchema_Parameters
func (a *DatabaseTestConnectionSchema_Parameters) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DatabaseTestConnectionSchema_Parameters to handle AdditionalProperties
func (a *DatabaseTestConnectionSchema_Parameters) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DatabaseTestConnectionSchema_Parameters to handle AdditionalProperties
func (a DatabaseTestConnectionSchema_Parameters) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DatabaseValidateParametersSchema_Parameters. Returns the specified
// element and whether it was found
func (a DatabaseValidateParametersSchema_Parameters) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DatabaseValidateParametersSchema_Parameters
func (a *DatabaseValidateParametersSchema_Parameters) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DatabaseValidateParametersSchema_Parameters to handle AdditionalProperties
func (a *DatabaseValidateParametersSchema_Parameters) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DatabaseValidateParametersSchema_Parameters to handle AdditionalProperties
func (a DatabaseValidateParametersSchema_Parameters) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for GetInfoSchema_AddColumns. Returns the specified
// element and whether it was found
func (a GetInfoSchema_AddColumns) Get(fieldName string) (value struct {
	Page     *int `json:"page,omitempty"`
	PageSize *int `json:"page_size,omitempty"`
}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for GetInfoSchema_AddColumns
func (a *GetInfoSchema_AddColumns) Set(fieldName string, value struct {
	Page     *int `json:"page,omitempty"`
	PageSize *int `json:"page_size,omitempty"`
}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]struct {
			Page     *int `json:"page,omitempty"`
			PageSize *int `json:"page_size,omitempty"`
		})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for GetInfoSchema_AddColumns to handle AdditionalProperties
func (a *GetInfoSchema_AddColumns) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]struct {
			Page     *int `json:"page,omitempty"`
			PageSize *int `json:"page_size,omitempty"`
		})
		for fieldName, fieldBuf := range object {
			var fieldVal struct {
				Page     *int `json:"page,omitempty"`
				PageSize *int `json:"page_size,omitempty"`
			}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for GetInfoSchema_AddColumns to handle AdditionalProperties
func (a GetInfoSchema_AddColumns) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for GetInfoSchema_EditColumns. Returns the specified
// element and whether it was found
func (a GetInfoSchema_EditColumns) Get(fieldName string) (value struct {
	Page     *int `json:"page,omitempty"`
	PageSize *int `json:"page_size,omitempty"`
}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for GetInfoSchema_EditColumns
func (a *GetInfoSchema_EditColumns) Set(fieldName string, value struct {
	Page     *int `json:"page,omitempty"`
	PageSize *int `json:"page_size,omitempty"`
}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]struct {
			Page     *int `json:"page,omitempty"`
			PageSize *int `json:"page_size,omitempty"`
		})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for GetInfoSchema_EditColumns to handle AdditionalProperties
func (a *GetInfoSchema_EditColumns) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]struct {
			Page     *int `json:"page,omitempty"`
			PageSize *int `json:"page_size,omitempty"`
		})
		for fieldName, fieldBuf := range object {
			var fieldVal struct {
				Page     *int `json:"page,omitempty"`
				PageSize *int `json:"page_size,omitempty"`
			}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for GetInfoSchema_EditColumns to handle AdditionalProperties
func (a GetInfoSchema_EditColumns) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApiV1AdvancedDataTypeConvert request
	GetApiV1AdvancedDataTypeConvert(ctx context.Context, params *GetApiV1AdvancedDataTypeConvertParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1AdvancedDataTypeTypes request
	GetApiV1AdvancedDataTypeTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1AnnotationLayer request
	DeleteApiV1AnnotationLayer(ctx context.Context, params *DeleteApiV1AnnotationLayerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1AnnotationLayer request
	GetApiV1AnnotationLayer(ctx context.Context, params *GetApiV1AnnotationLayerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1AnnotationLayer request with any body
	PostApiV1AnnotationLayerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1AnnotationLayer(ctx context.Context, body PostApiV1AnnotationLayerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1AnnotationLayerInfo request
	GetApiV1AnnotationLayerInfo(ctx context.Context, params *GetApiV1AnnotationLayerInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1AnnotationLayerRelatedColumnName request
	GetApiV1AnnotationLayerRelatedColumnName(ctx context.Context, columnName string, params *GetApiV1AnnotationLayerRelatedColumnNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1AnnotationLayerPk request
	DeleteApiV1AnnotationLayerPk(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1AnnotationLayerPk request
	GetApiV1AnnotationLayerPk(ctx context.Context, pk int, params *GetApiV1AnnotationLayerPkParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1AnnotationLayerPk request with any body
	PutApiV1AnnotationLayerPkWithBody(ctx context.Context, pk int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1AnnotationLayerPk(ctx context.Context, pk int, body PutApiV1AnnotationLayerPkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1AnnotationLayerPkAnnotation request
	DeleteApiV1AnnotationLayerPkAnnotation(ctx context.Context, pk int, params *DeleteApiV1AnnotationLayerPkAnnotationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1AnnotationLayerPkAnnotation request
	GetApiV1AnnotationLayerPkAnnotation(ctx context.Context, pk int, params *GetApiV1AnnotationLayerPkAnnotationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1AnnotationLayerPkAnnotation request with any body
	PostApiV1AnnotationLayerPkAnnotationWithBody(ctx context.Context, pk int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1AnnotationLayerPkAnnotation(ctx context.Context, pk int, body PostApiV1AnnotationLayerPkAnnotationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1AnnotationLayerPkAnnotationAnnotationId request
	DeleteApiV1AnnotationLayerPkAnnotationAnnotationId(ctx context.Context, pk int, annotationId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1AnnotationLayerPkAnnotationAnnotationId request
	GetApiV1AnnotationLayerPkAnnotationAnnotationId(ctx context.Context, pk int, annotationId int, params *GetApiV1AnnotationLayerPkAnnotationAnnotationIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1AnnotationLayerPkAnnotationAnnotationId request with any body
	PutApiV1AnnotationLayerPkAnnotationAnnotationIdWithBody(ctx context.Context, pk int, annotationId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1AnnotationLayerPkAnnotationAnnotationId(ctx context.Context, pk int, annotationId int, body PutApiV1AnnotationLayerPkAnnotationAnnotationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1AssetsExport request
	GetApiV1AssetsExport(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1AssetsImport request with any body
	PostApiV1AssetsImportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1AsyncEvent request
	GetApiV1AsyncEvent(ctx context.Context, params *GetApiV1AsyncEventParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1AvailableDomains request
	GetApiV1AvailableDomains(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1CachekeyInvalidate request with any body
	PostApiV1CachekeyInvalidateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1CachekeyInvalidate(ctx context.Context, body PostApiV1CachekeyInvalidateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1Chart request
	DeleteApiV1Chart(ctx context.Context, params *DeleteApiV1ChartParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Chart request
	GetApiV1Chart(ctx context.Context, params *GetApiV1ChartParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1Chart request with any body
	PostApiV1ChartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1Chart(ctx context.Context, body PostApiV1ChartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1ChartInfo request
	GetApiV1ChartInfo(ctx context.Context, params *GetApiV1ChartInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1ChartData request with any body
	PostApiV1ChartDataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1ChartData(ctx context.Context, body PostApiV1ChartDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1ChartDataCacheKey request
	GetApiV1ChartDataCacheKey(ctx context.Context, cacheKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1ChartExport request
	GetApiV1ChartExport(ctx context.Context, params *GetApiV1ChartExportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1ChartFavoriteStatus request
	GetApiV1ChartFavoriteStatus(ctx context.Context, params *GetApiV1ChartFavoriteStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1ChartImport request with any body
	PostApiV1ChartImportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1ChartRelatedColumnName request
	GetApiV1ChartRelatedColumnName(ctx context.Context, columnName string, params *GetApiV1ChartRelatedColumnNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1ChartPk request
	DeleteApiV1ChartPk(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1ChartPk request
	GetApiV1ChartPk(ctx context.Context, pk int, params *GetApiV1ChartPkParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1ChartPk request with any body
	PutApiV1ChartPkWithBody(ctx context.Context, pk int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1ChartPk(ctx context.Context, pk int, body PutApiV1ChartPkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1ChartPkCacheScreenshot request
	GetApiV1ChartPkCacheScreenshot(ctx context.Context, pk int, params *GetApiV1ChartPkCacheScreenshotParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1ChartPkData request
	GetApiV1ChartPkData(ctx context.Context, pk int, params *GetApiV1ChartPkDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1ChartPkScreenshotDigest request
	GetApiV1ChartPkScreenshotDigest(ctx context.Context, pk int, digest string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1ChartPkThumbnailDigest request
	GetApiV1ChartPkThumbnailDigest(ctx context.Context, pk int, digest string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1CssTemplate request
	DeleteApiV1CssTemplate(ctx context.Context, params *DeleteApiV1CssTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1CssTemplate request
	GetApiV1CssTemplate(ctx context.Context, params *GetApiV1CssTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1CssTemplate request with any body
	PostApiV1CssTemplateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1CssTemplate(ctx context.Context, body PostApiV1CssTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1CssTemplateInfo request
	GetApiV1CssTemplateInfo(ctx context.Context, params *GetApiV1CssTemplateInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1CssTemplateRelatedColumnName request
	GetApiV1CssTemplateRelatedColumnName(ctx context.Context, columnName string, params *GetApiV1CssTemplateRelatedColumnNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1CssTemplatePk request
	DeleteApiV1CssTemplatePk(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1CssTemplatePk request
	GetApiV1CssTemplatePk(ctx context.Context, pk int, params *GetApiV1CssTemplatePkParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1CssTemplatePk request with any body
	PutApiV1CssTemplatePkWithBody(ctx context.Context, pk int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1CssTemplatePk(ctx context.Context, pk int, body PutApiV1CssTemplatePkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1Dashboard request
	DeleteApiV1Dashboard(ctx context.Context, params *DeleteApiV1DashboardParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Dashboard request
	GetApiV1Dashboard(ctx context.Context, params *GetApiV1DashboardParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1Dashboard request with any body
	PostApiV1DashboardWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1Dashboard(ctx context.Context, body PostApiV1DashboardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1DashboardInfo request
	GetApiV1DashboardInfo(ctx context.Context, params *GetApiV1DashboardInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1DashboardExport request
	GetApiV1DashboardExport(ctx context.Context, params *GetApiV1DashboardExportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1DashboardFavoriteStatus request
	GetApiV1DashboardFavoriteStatus(ctx context.Context, params *GetApiV1DashboardFavoriteStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1DashboardImport request with any body
	PostApiV1DashboardImportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1DashboardPermalinkKey request
	GetApiV1DashboardPermalinkKey(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1DashboardRelatedColumnName request
	GetApiV1DashboardRelatedColumnName(ctx context.Context, columnName string, params *GetApiV1DashboardRelatedColumnNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1DashboardDashboardIdFiltersets request
	GetApiV1DashboardDashboardIdFiltersets(ctx context.Context, dashboardId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1DashboardDashboardIdFiltersets request with any body
	PostApiV1DashboardDashboardIdFiltersetsWithBody(ctx context.Context, dashboardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1DashboardDashboardIdFiltersets(ctx context.Context, dashboardId int, body PostApiV1DashboardDashboardIdFiltersetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1DashboardDashboardIdFiltersetsPk request
	DeleteApiV1DashboardDashboardIdFiltersetsPk(ctx context.Context, dashboardId int, pk int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1DashboardDashboardIdFiltersetsPk request with any body
	PutApiV1DashboardDashboardIdFiltersetsPkWithBody(ctx context.Context, dashboardId int, pk int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1DashboardDashboardIdFiltersetsPk(ctx context.Context, dashboardId int, pk int, body PutApiV1DashboardDashboardIdFiltersetsPkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1DashboardIdOrSlug request
	GetApiV1DashboardIdOrSlug(ctx context.Context, idOrSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1DashboardIdOrSlugCharts request
	GetApiV1DashboardIdOrSlugCharts(ctx context.Context, idOrSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1DashboardIdOrSlugDatasets request
	GetApiV1DashboardIdOrSlugDatasets(ctx context.Context, idOrSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1DashboardIdOrSlugEmbedded request
	DeleteApiV1DashboardIdOrSlugEmbedded(ctx context.Context, idOrSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1DashboardIdOrSlugEmbedded request
	GetApiV1DashboardIdOrSlugEmbedded(ctx context.Context, idOrSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1DashboardIdOrSlugEmbedded request with any body
	PostApiV1DashboardIdOrSlugEmbeddedWithBody(ctx context.Context, idOrSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1DashboardIdOrSlugEmbedded(ctx context.Context, idOrSlug string, body PostApiV1DashboardIdOrSlugEmbeddedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1DashboardIdOrSlugEmbedded request with any body
	PutApiV1DashboardIdOrSlugEmbeddedWithBody(ctx context.Context, idOrSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1DashboardIdOrSlugEmbedded(ctx context.Context, idOrSlug string, body PutApiV1DashboardIdOrSlugEmbeddedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1DashboardPk request
	DeleteApiV1DashboardPk(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1DashboardPk request with any body
	PutApiV1DashboardPkWithBody(ctx context.Context, pk int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1DashboardPk(ctx context.Context, pk int, body PutApiV1DashboardPkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1DashboardPkFilterState request with any body
	PostApiV1DashboardPkFilterStateWithBody(ctx context.Context, pk int, params *PostApiV1DashboardPkFilterStateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1DashboardPkFilterState(ctx context.Context, pk int, params *PostApiV1DashboardPkFilterStateParams, body PostApiV1DashboardPkFilterStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1DashboardPkFilterStateKey request
	DeleteApiV1DashboardPkFilterStateKey(ctx context.Context, pk int, key string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1DashboardPkFilterStateKey request
	GetApiV1DashboardPkFilterStateKey(ctx context.Context, pk int, key string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1DashboardPkFilterStateKey request with any body
	PutApiV1DashboardPkFilterStateKeyWithBody(ctx context.Context, pk int, key string, params *PutApiV1DashboardPkFilterStateKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1DashboardPkFilterStateKey(ctx context.Context, pk int, key string, params *PutApiV1DashboardPkFilterStateKeyParams, body PutApiV1DashboardPkFilterStateKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1DashboardPkPermalink request with any body
	PostApiV1DashboardPkPermalinkWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1DashboardPkPermalink(ctx context.Context, pk string, body PostApiV1DashboardPkPermalinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1DashboardPkThumbnailDigest request
	GetApiV1DashboardPkThumbnailDigest(ctx context.Context, pk int, digest string, params *GetApiV1DashboardPkThumbnailDigestParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Database request
	GetApiV1Database(ctx context.Context, params *GetApiV1DatabaseParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1Database request with any body
	PostApiV1DatabaseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1Database(ctx context.Context, body PostApiV1DatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1DatabaseInfo request
	GetApiV1DatabaseInfo(ctx context.Context, params *GetApiV1DatabaseInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1DatabaseAvailable request
	GetApiV1DatabaseAvailable(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1DatabaseExport request
	GetApiV1DatabaseExport(ctx context.Context, params *GetApiV1DatabaseExportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1DatabaseImport request with any body
	PostApiV1DatabaseImportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1DatabaseTestConnection request with any body
	PostApiV1DatabaseTestConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1DatabaseTestConnection(ctx context.Context, body PostApiV1DatabaseTestConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1DatabaseValidateParameters request with any body
	PostApiV1DatabaseValidateParametersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1DatabaseValidateParameters(ctx context.Context, body PostApiV1DatabaseValidateParametersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1DatabasePk request
	DeleteApiV1DatabasePk(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1DatabasePk request
	GetApiV1DatabasePk(ctx context.Context, pk int, params *GetApiV1DatabasePkParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1DatabasePk request with any body
	PutApiV1DatabasePkWithBody(ctx context.Context, pk int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1DatabasePk(ctx context.Context, pk int, body PutApiV1DatabasePkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1DatabasePkFunctionNames request
	GetApiV1DatabasePkFunctionNames(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1DatabasePkRelatedObjects request
	GetApiV1DatabasePkRelatedObjects(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1DatabasePkSchemas request
	GetApiV1DatabasePkSchemas(ctx context.Context, pk int, params *GetApiV1DatabasePkSchemasParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1DatabasePkSelectStarTableName request
	GetApiV1DatabasePkSelectStarTableName(ctx context.Context, pk int, tableName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1DatabasePkSelectStarTableNameSchemaName request
	GetApiV1DatabasePkSelectStarTableNameSchemaName(ctx context.Context, pk int, tableName string, schemaName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1DatabasePkTableTableNameSchemaName request
	GetApiV1DatabasePkTableTableNameSchemaName(ctx context.Context, pk int, tableName string, schemaName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1DatabasePkTableExtraTableNameSchemaName request
	GetApiV1DatabasePkTableExtraTableNameSchemaName(ctx context.Context, pk int, tableName string, schemaName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1DatabasePkValidateSql request with any body
	PostApiV1DatabasePkValidateSqlWithBody(ctx context.Context, pk int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1DatabasePkValidateSql(ctx context.Context, pk int, body PostApiV1DatabasePkValidateSqlJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1Dataset request
	DeleteApiV1Dataset(ctx context.Context, params *DeleteApiV1DatasetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Dataset request
	GetApiV1Dataset(ctx context.Context, params *GetApiV1DatasetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1Dataset request with any body
	PostApiV1DatasetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1Dataset(ctx context.Context, body PostApiV1DatasetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1DatasetInfo request
	GetApiV1DatasetInfo(ctx context.Context, params *GetApiV1DatasetInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1DatasetDistinctColumnName request
	GetApiV1DatasetDistinctColumnName(ctx context.Context, columnName string, params *GetApiV1DatasetDistinctColumnNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1DatasetDuplicate request with any body
	PostApiV1DatasetDuplicateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1DatasetDuplicate(ctx context.Context, body PostApiV1DatasetDuplicateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1DatasetExport request
	GetApiV1DatasetExport(ctx context.Context, params *GetApiV1DatasetExportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1DatasetImport request with any body
	PostApiV1DatasetImportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1DatasetRelatedColumnName request
	GetApiV1DatasetRelatedColumnName(ctx context.Context, columnName string, params *GetApiV1DatasetRelatedColumnNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1DatasetPk request
	DeleteApiV1DatasetPk(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1DatasetPk request
	GetApiV1DatasetPk(ctx context.Context, pk int, params *GetApiV1DatasetPkParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1DatasetPk request with any body
	PutApiV1DatasetPkWithBody(ctx context.Context, pk int, params *PutApiV1DatasetPkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1DatasetPk(ctx context.Context, pk int, params *PutApiV1DatasetPkParams, body PutApiV1DatasetPkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1DatasetPkColumnColumnId request
	DeleteApiV1DatasetPkColumnColumnId(ctx context.Context, pk int, columnId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1DatasetPkMetricMetricId request
	DeleteApiV1DatasetPkMetricMetricId(ctx context.Context, pk int, metricId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1DatasetPkRefresh request
	PutApiV1DatasetPkRefresh(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1DatasetPkRelatedObjects request
	GetApiV1DatasetPkRelatedObjects(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1EmbeddedDashboardUuid request
	GetApiV1EmbeddedDashboardUuid(ctx context.Context, uuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Explore request
	GetApiV1Explore(ctx context.Context, params *GetApiV1ExploreParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1ExploreFormData request with any body
	PostApiV1ExploreFormDataWithBody(ctx context.Context, params *PostApiV1ExploreFormDataParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1ExploreFormData(ctx context.Context, params *PostApiV1ExploreFormDataParams, body PostApiV1ExploreFormDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1ExploreFormDataKey request
	DeleteApiV1ExploreFormDataKey(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1ExploreFormDataKey request
	GetApiV1ExploreFormDataKey(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1ExploreFormDataKey request with any body
	PutApiV1ExploreFormDataKeyWithBody(ctx context.Context, key string, params *PutApiV1ExploreFormDataKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1ExploreFormDataKey(ctx context.Context, key string, params *PutApiV1ExploreFormDataKeyParams, body PutApiV1ExploreFormDataKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1ExplorePermalink request with any body
	PostApiV1ExplorePermalinkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1ExplorePermalink(ctx context.Context, body PostApiV1ExplorePermalinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1ExplorePermalinkKey request
	GetApiV1ExplorePermalinkKey(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Log request
	GetApiV1Log(ctx context.Context, params *GetApiV1LogParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1Log request with any body
	PostApiV1LogWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1Log(ctx context.Context, body PostApiV1LogJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1LogPk request
	GetApiV1LogPk(ctx context.Context, pk int, params *GetApiV1LogPkParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Me request
	GetApiV1Me(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1MeRoles request
	GetApiV1MeRoles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Menu request
	GetApiV1Menu(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Query request
	GetApiV1Query(ctx context.Context, params *GetApiV1QueryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1QueryDistinctColumnName request
	GetApiV1QueryDistinctColumnName(ctx context.Context, columnName string, params *GetApiV1QueryDistinctColumnNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1QueryRelatedColumnName request
	GetApiV1QueryRelatedColumnName(ctx context.Context, columnName string, params *GetApiV1QueryRelatedColumnNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1QueryPk request
	GetApiV1QueryPk(ctx context.Context, pk int, params *GetApiV1QueryPkParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1Report request
	DeleteApiV1Report(ctx context.Context, params *DeleteApiV1ReportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Report request
	GetApiV1Report(ctx context.Context, params *GetApiV1ReportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1Report request with any body
	PostApiV1ReportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1Report(ctx context.Context, body PostApiV1ReportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1ReportInfo request
	GetApiV1ReportInfo(ctx context.Context, params *GetApiV1ReportInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1ReportRelatedColumnName request
	GetApiV1ReportRelatedColumnName(ctx context.Context, columnName string, params *GetApiV1ReportRelatedColumnNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1ReportPk request
	DeleteApiV1ReportPk(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1ReportPk request
	GetApiV1ReportPk(ctx context.Context, pk int, params *GetApiV1ReportPkParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1ReportPk request with any body
	PutApiV1ReportPkWithBody(ctx context.Context, pk int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1ReportPk(ctx context.Context, pk int, body PutApiV1ReportPkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1ReportPkLog request
	GetApiV1ReportPkLog(ctx context.Context, pk int, params *GetApiV1ReportPkLogParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1ReportPkLogLogId request
	GetApiV1ReportPkLogLogId(ctx context.Context, pk int, logId int, params *GetApiV1ReportPkLogLogIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1SavedQuery request
	DeleteApiV1SavedQuery(ctx context.Context, params *DeleteApiV1SavedQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1SavedQuery request
	GetApiV1SavedQuery(ctx context.Context, params *GetApiV1SavedQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1SavedQuery request with any body
	PostApiV1SavedQueryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1SavedQuery(ctx context.Context, body PostApiV1SavedQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1SavedQueryInfo request
	GetApiV1SavedQueryInfo(ctx context.Context, params *GetApiV1SavedQueryInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1SavedQueryDistinctColumnName request
	GetApiV1SavedQueryDistinctColumnName(ctx context.Context, columnName string, params *GetApiV1SavedQueryDistinctColumnNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1SavedQueryExport request
	GetApiV1SavedQueryExport(ctx context.Context, params *GetApiV1SavedQueryExportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1SavedQueryImport request with any body
	PostApiV1SavedQueryImportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1SavedQueryRelatedColumnName request
	GetApiV1SavedQueryRelatedColumnName(ctx context.Context, columnName string, params *GetApiV1SavedQueryRelatedColumnNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1SavedQueryPk request
	DeleteApiV1SavedQueryPk(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1SavedQueryPk request
	GetApiV1SavedQueryPk(ctx context.Context, pk int, params *GetApiV1SavedQueryPkParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1SavedQueryPk request with any body
	PutApiV1SavedQueryPkWithBody(ctx context.Context, pk int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1SavedQueryPk(ctx context.Context, pk int, body PutApiV1SavedQueryPkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1SecurityCsrfToken request
	GetApiV1SecurityCsrfToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1SecurityGuestToken request with any body
	PostApiV1SecurityGuestTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1SecurityGuestToken(ctx context.Context, body PostApiV1SecurityGuestTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1SecurityLogin request with any body
	PostApiV1SecurityLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1SecurityLogin(ctx context.Context, body PostApiV1SecurityLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1SecurityRefresh request
	PostApiV1SecurityRefresh(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiVersionOpenapi request
	GetApiVersionOpenapi(ctx context.Context, version string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSupersetSqllabViz request with any body
	PostSupersetSqllabVizWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApiV1AdvancedDataTypeConvert(ctx context.Context, params *GetApiV1AdvancedDataTypeConvertParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1AdvancedDataTypeConvertRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1AdvancedDataTypeTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1AdvancedDataTypeTypesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1AnnotationLayer(ctx context.Context, params *DeleteApiV1AnnotationLayerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1AnnotationLayerRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1AnnotationLayer(ctx context.Context, params *GetApiV1AnnotationLayerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1AnnotationLayerRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1AnnotationLayerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1AnnotationLayerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1AnnotationLayer(ctx context.Context, body PostApiV1AnnotationLayerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1AnnotationLayerRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1AnnotationLayerInfo(ctx context.Context, params *GetApiV1AnnotationLayerInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1AnnotationLayerInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1AnnotationLayerRelatedColumnName(ctx context.Context, columnName string, params *GetApiV1AnnotationLayerRelatedColumnNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1AnnotationLayerRelatedColumnNameRequest(c.Server, columnName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1AnnotationLayerPk(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1AnnotationLayerPkRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1AnnotationLayerPk(ctx context.Context, pk int, params *GetApiV1AnnotationLayerPkParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1AnnotationLayerPkRequest(c.Server, pk, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1AnnotationLayerPkWithBody(ctx context.Context, pk int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1AnnotationLayerPkRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1AnnotationLayerPk(ctx context.Context, pk int, body PutApiV1AnnotationLayerPkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1AnnotationLayerPkRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1AnnotationLayerPkAnnotation(ctx context.Context, pk int, params *DeleteApiV1AnnotationLayerPkAnnotationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1AnnotationLayerPkAnnotationRequest(c.Server, pk, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1AnnotationLayerPkAnnotation(ctx context.Context, pk int, params *GetApiV1AnnotationLayerPkAnnotationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1AnnotationLayerPkAnnotationRequest(c.Server, pk, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1AnnotationLayerPkAnnotationWithBody(ctx context.Context, pk int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1AnnotationLayerPkAnnotationRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1AnnotationLayerPkAnnotation(ctx context.Context, pk int, body PostApiV1AnnotationLayerPkAnnotationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1AnnotationLayerPkAnnotationRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1AnnotationLayerPkAnnotationAnnotationId(ctx context.Context, pk int, annotationId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1AnnotationLayerPkAnnotationAnnotationIdRequest(c.Server, pk, annotationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1AnnotationLayerPkAnnotationAnnotationId(ctx context.Context, pk int, annotationId int, params *GetApiV1AnnotationLayerPkAnnotationAnnotationIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1AnnotationLayerPkAnnotationAnnotationIdRequest(c.Server, pk, annotationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1AnnotationLayerPkAnnotationAnnotationIdWithBody(ctx context.Context, pk int, annotationId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1AnnotationLayerPkAnnotationAnnotationIdRequestWithBody(c.Server, pk, annotationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1AnnotationLayerPkAnnotationAnnotationId(ctx context.Context, pk int, annotationId int, body PutApiV1AnnotationLayerPkAnnotationAnnotationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1AnnotationLayerPkAnnotationAnnotationIdRequest(c.Server, pk, annotationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1AssetsExport(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1AssetsExportRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1AssetsImportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1AssetsImportRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1AsyncEvent(ctx context.Context, params *GetApiV1AsyncEventParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1AsyncEventRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1AvailableDomains(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1AvailableDomainsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1CachekeyInvalidateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1CachekeyInvalidateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1CachekeyInvalidate(ctx context.Context, body PostApiV1CachekeyInvalidateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1CachekeyInvalidateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1Chart(ctx context.Context, params *DeleteApiV1ChartParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1ChartRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Chart(ctx context.Context, params *GetApiV1ChartParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ChartRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1ChartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1ChartRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1Chart(ctx context.Context, body PostApiV1ChartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1ChartRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1ChartInfo(ctx context.Context, params *GetApiV1ChartInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ChartInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1ChartDataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1ChartDataRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1ChartData(ctx context.Context, body PostApiV1ChartDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1ChartDataRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1ChartDataCacheKey(ctx context.Context, cacheKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ChartDataCacheKeyRequest(c.Server, cacheKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1ChartExport(ctx context.Context, params *GetApiV1ChartExportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ChartExportRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1ChartFavoriteStatus(ctx context.Context, params *GetApiV1ChartFavoriteStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ChartFavoriteStatusRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1ChartImportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1ChartImportRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1ChartRelatedColumnName(ctx context.Context, columnName string, params *GetApiV1ChartRelatedColumnNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ChartRelatedColumnNameRequest(c.Server, columnName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1ChartPk(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1ChartPkRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1ChartPk(ctx context.Context, pk int, params *GetApiV1ChartPkParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ChartPkRequest(c.Server, pk, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1ChartPkWithBody(ctx context.Context, pk int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1ChartPkRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1ChartPk(ctx context.Context, pk int, body PutApiV1ChartPkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1ChartPkRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1ChartPkCacheScreenshot(ctx context.Context, pk int, params *GetApiV1ChartPkCacheScreenshotParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ChartPkCacheScreenshotRequest(c.Server, pk, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1ChartPkData(ctx context.Context, pk int, params *GetApiV1ChartPkDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ChartPkDataRequest(c.Server, pk, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1ChartPkScreenshotDigest(ctx context.Context, pk int, digest string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ChartPkScreenshotDigestRequest(c.Server, pk, digest)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1ChartPkThumbnailDigest(ctx context.Context, pk int, digest string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ChartPkThumbnailDigestRequest(c.Server, pk, digest)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1CssTemplate(ctx context.Context, params *DeleteApiV1CssTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1CssTemplateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1CssTemplate(ctx context.Context, params *GetApiV1CssTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1CssTemplateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1CssTemplateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1CssTemplateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1CssTemplate(ctx context.Context, body PostApiV1CssTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1CssTemplateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1CssTemplateInfo(ctx context.Context, params *GetApiV1CssTemplateInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1CssTemplateInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1CssTemplateRelatedColumnName(ctx context.Context, columnName string, params *GetApiV1CssTemplateRelatedColumnNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1CssTemplateRelatedColumnNameRequest(c.Server, columnName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1CssTemplatePk(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1CssTemplatePkRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1CssTemplatePk(ctx context.Context, pk int, params *GetApiV1CssTemplatePkParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1CssTemplatePkRequest(c.Server, pk, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1CssTemplatePkWithBody(ctx context.Context, pk int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1CssTemplatePkRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1CssTemplatePk(ctx context.Context, pk int, body PutApiV1CssTemplatePkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1CssTemplatePkRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1Dashboard(ctx context.Context, params *DeleteApiV1DashboardParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1DashboardRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Dashboard(ctx context.Context, params *GetApiV1DashboardParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1DashboardRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1DashboardWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1DashboardRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1Dashboard(ctx context.Context, body PostApiV1DashboardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1DashboardRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1DashboardInfo(ctx context.Context, params *GetApiV1DashboardInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1DashboardInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1DashboardExport(ctx context.Context, params *GetApiV1DashboardExportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1DashboardExportRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1DashboardFavoriteStatus(ctx context.Context, params *GetApiV1DashboardFavoriteStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1DashboardFavoriteStatusRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1DashboardImportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1DashboardImportRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1DashboardPermalinkKey(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1DashboardPermalinkKeyRequest(c.Server, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1DashboardRelatedColumnName(ctx context.Context, columnName string, params *GetApiV1DashboardRelatedColumnNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1DashboardRelatedColumnNameRequest(c.Server, columnName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1DashboardDashboardIdFiltersets(ctx context.Context, dashboardId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1DashboardDashboardIdFiltersetsRequest(c.Server, dashboardId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1DashboardDashboardIdFiltersetsWithBody(ctx context.Context, dashboardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1DashboardDashboardIdFiltersetsRequestWithBody(c.Server, dashboardId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1DashboardDashboardIdFiltersets(ctx context.Context, dashboardId int, body PostApiV1DashboardDashboardIdFiltersetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1DashboardDashboardIdFiltersetsRequest(c.Server, dashboardId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1DashboardDashboardIdFiltersetsPk(ctx context.Context, dashboardId int, pk int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1DashboardDashboardIdFiltersetsPkRequest(c.Server, dashboardId, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1DashboardDashboardIdFiltersetsPkWithBody(ctx context.Context, dashboardId int, pk int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1DashboardDashboardIdFiltersetsPkRequestWithBody(c.Server, dashboardId, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1DashboardDashboardIdFiltersetsPk(ctx context.Context, dashboardId int, pk int, body PutApiV1DashboardDashboardIdFiltersetsPkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1DashboardDashboardIdFiltersetsPkRequest(c.Server, dashboardId, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1DashboardIdOrSlug(ctx context.Context, idOrSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1DashboardIdOrSlugRequest(c.Server, idOrSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1DashboardIdOrSlugCharts(ctx context.Context, idOrSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1DashboardIdOrSlugChartsRequest(c.Server, idOrSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1DashboardIdOrSlugDatasets(ctx context.Context, idOrSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1DashboardIdOrSlugDatasetsRequest(c.Server, idOrSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1DashboardIdOrSlugEmbedded(ctx context.Context, idOrSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1DashboardIdOrSlugEmbeddedRequest(c.Server, idOrSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1DashboardIdOrSlugEmbedded(ctx context.Context, idOrSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1DashboardIdOrSlugEmbeddedRequest(c.Server, idOrSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1DashboardIdOrSlugEmbeddedWithBody(ctx context.Context, idOrSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1DashboardIdOrSlugEmbeddedRequestWithBody(c.Server, idOrSlug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1DashboardIdOrSlugEmbedded(ctx context.Context, idOrSlug string, body PostApiV1DashboardIdOrSlugEmbeddedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1DashboardIdOrSlugEmbeddedRequest(c.Server, idOrSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1DashboardIdOrSlugEmbeddedWithBody(ctx context.Context, idOrSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1DashboardIdOrSlugEmbeddedRequestWithBody(c.Server, idOrSlug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1DashboardIdOrSlugEmbedded(ctx context.Context, idOrSlug string, body PutApiV1DashboardIdOrSlugEmbeddedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1DashboardIdOrSlugEmbeddedRequest(c.Server, idOrSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1DashboardPk(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1DashboardPkRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1DashboardPkWithBody(ctx context.Context, pk int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1DashboardPkRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1DashboardPk(ctx context.Context, pk int, body PutApiV1DashboardPkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1DashboardPkRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1DashboardPkFilterStateWithBody(ctx context.Context, pk int, params *PostApiV1DashboardPkFilterStateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1DashboardPkFilterStateRequestWithBody(c.Server, pk, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1DashboardPkFilterState(ctx context.Context, pk int, params *PostApiV1DashboardPkFilterStateParams, body PostApiV1DashboardPkFilterStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1DashboardPkFilterStateRequest(c.Server, pk, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1DashboardPkFilterStateKey(ctx context.Context, pk int, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1DashboardPkFilterStateKeyRequest(c.Server, pk, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1DashboardPkFilterStateKey(ctx context.Context, pk int, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1DashboardPkFilterStateKeyRequest(c.Server, pk, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1DashboardPkFilterStateKeyWithBody(ctx context.Context, pk int, key string, params *PutApiV1DashboardPkFilterStateKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1DashboardPkFilterStateKeyRequestWithBody(c.Server, pk, key, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1DashboardPkFilterStateKey(ctx context.Context, pk int, key string, params *PutApiV1DashboardPkFilterStateKeyParams, body PutApiV1DashboardPkFilterStateKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1DashboardPkFilterStateKeyRequest(c.Server, pk, key, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1DashboardPkPermalinkWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1DashboardPkPermalinkRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1DashboardPkPermalink(ctx context.Context, pk string, body PostApiV1DashboardPkPermalinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1DashboardPkPermalinkRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1DashboardPkThumbnailDigest(ctx context.Context, pk int, digest string, params *GetApiV1DashboardPkThumbnailDigestParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1DashboardPkThumbnailDigestRequest(c.Server, pk, digest, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Database(ctx context.Context, params *GetApiV1DatabaseParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1DatabaseRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1DatabaseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1DatabaseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1Database(ctx context.Context, body PostApiV1DatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1DatabaseRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1DatabaseInfo(ctx context.Context, params *GetApiV1DatabaseInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1DatabaseInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1DatabaseAvailable(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1DatabaseAvailableRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1DatabaseExport(ctx context.Context, params *GetApiV1DatabaseExportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1DatabaseExportRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1DatabaseImportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1DatabaseImportRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1DatabaseTestConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1DatabaseTestConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1DatabaseTestConnection(ctx context.Context, body PostApiV1DatabaseTestConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1DatabaseTestConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1DatabaseValidateParametersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1DatabaseValidateParametersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1DatabaseValidateParameters(ctx context.Context, body PostApiV1DatabaseValidateParametersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1DatabaseValidateParametersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1DatabasePk(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1DatabasePkRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1DatabasePk(ctx context.Context, pk int, params *GetApiV1DatabasePkParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1DatabasePkRequest(c.Server, pk, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1DatabasePkWithBody(ctx context.Context, pk int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1DatabasePkRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1DatabasePk(ctx context.Context, pk int, body PutApiV1DatabasePkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1DatabasePkRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1DatabasePkFunctionNames(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1DatabasePkFunctionNamesRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1DatabasePkRelatedObjects(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1DatabasePkRelatedObjectsRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1DatabasePkSchemas(ctx context.Context, pk int, params *GetApiV1DatabasePkSchemasParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1DatabasePkSchemasRequest(c.Server, pk, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1DatabasePkSelectStarTableName(ctx context.Context, pk int, tableName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1DatabasePkSelectStarTableNameRequest(c.Server, pk, tableName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1DatabasePkSelectStarTableNameSchemaName(ctx context.Context, pk int, tableName string, schemaName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1DatabasePkSelectStarTableNameSchemaNameRequest(c.Server, pk, tableName, schemaName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1DatabasePkTableTableNameSchemaName(ctx context.Context, pk int, tableName string, schemaName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1DatabasePkTableTableNameSchemaNameRequest(c.Server, pk, tableName, schemaName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1DatabasePkTableExtraTableNameSchemaName(ctx context.Context, pk int, tableName string, schemaName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1DatabasePkTableExtraTableNameSchemaNameRequest(c.Server, pk, tableName, schemaName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1DatabasePkValidateSqlWithBody(ctx context.Context, pk int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1DatabasePkValidateSqlRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1DatabasePkValidateSql(ctx context.Context, pk int, body PostApiV1DatabasePkValidateSqlJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1DatabasePkValidateSqlRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1Dataset(ctx context.Context, params *DeleteApiV1DatasetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1DatasetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Dataset(ctx context.Context, params *GetApiV1DatasetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1DatasetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1DatasetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1DatasetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1Dataset(ctx context.Context, body PostApiV1DatasetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1DatasetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1DatasetInfo(ctx context.Context, params *GetApiV1DatasetInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1DatasetInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1DatasetDistinctColumnName(ctx context.Context, columnName string, params *GetApiV1DatasetDistinctColumnNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1DatasetDistinctColumnNameRequest(c.Server, columnName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1DatasetDuplicateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1DatasetDuplicateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1DatasetDuplicate(ctx context.Context, body PostApiV1DatasetDuplicateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1DatasetDuplicateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1DatasetExport(ctx context.Context, params *GetApiV1DatasetExportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1DatasetExportRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1DatasetImportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1DatasetImportRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1DatasetRelatedColumnName(ctx context.Context, columnName string, params *GetApiV1DatasetRelatedColumnNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1DatasetRelatedColumnNameRequest(c.Server, columnName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1DatasetPk(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1DatasetPkRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1DatasetPk(ctx context.Context, pk int, params *GetApiV1DatasetPkParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1DatasetPkRequest(c.Server, pk, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1DatasetPkWithBody(ctx context.Context, pk int, params *PutApiV1DatasetPkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1DatasetPkRequestWithBody(c.Server, pk, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1DatasetPk(ctx context.Context, pk int, params *PutApiV1DatasetPkParams, body PutApiV1DatasetPkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1DatasetPkRequest(c.Server, pk, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1DatasetPkColumnColumnId(ctx context.Context, pk int, columnId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1DatasetPkColumnColumnIdRequest(c.Server, pk, columnId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1DatasetPkMetricMetricId(ctx context.Context, pk int, metricId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1DatasetPkMetricMetricIdRequest(c.Server, pk, metricId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1DatasetPkRefresh(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1DatasetPkRefreshRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1DatasetPkRelatedObjects(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1DatasetPkRelatedObjectsRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1EmbeddedDashboardUuid(ctx context.Context, uuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1EmbeddedDashboardUuidRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Explore(ctx context.Context, params *GetApiV1ExploreParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ExploreRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1ExploreFormDataWithBody(ctx context.Context, params *PostApiV1ExploreFormDataParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1ExploreFormDataRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1ExploreFormData(ctx context.Context, params *PostApiV1ExploreFormDataParams, body PostApiV1ExploreFormDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1ExploreFormDataRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1ExploreFormDataKey(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1ExploreFormDataKeyRequest(c.Server, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1ExploreFormDataKey(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ExploreFormDataKeyRequest(c.Server, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1ExploreFormDataKeyWithBody(ctx context.Context, key string, params *PutApiV1ExploreFormDataKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1ExploreFormDataKeyRequestWithBody(c.Server, key, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1ExploreFormDataKey(ctx context.Context, key string, params *PutApiV1ExploreFormDataKeyParams, body PutApiV1ExploreFormDataKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1ExploreFormDataKeyRequest(c.Server, key, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1ExplorePermalinkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1ExplorePermalinkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1ExplorePermalink(ctx context.Context, body PostApiV1ExplorePermalinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1ExplorePermalinkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1ExplorePermalinkKey(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ExplorePermalinkKeyRequest(c.Server, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Log(ctx context.Context, params *GetApiV1LogParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1LogRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1LogWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1LogRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1Log(ctx context.Context, body PostApiV1LogJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1LogRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1LogPk(ctx context.Context, pk int, params *GetApiV1LogPkParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1LogPkRequest(c.Server, pk, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Me(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1MeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1MeRoles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1MeRolesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Menu(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1MenuRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Query(ctx context.Context, params *GetApiV1QueryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1QueryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1QueryDistinctColumnName(ctx context.Context, columnName string, params *GetApiV1QueryDistinctColumnNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1QueryDistinctColumnNameRequest(c.Server, columnName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1QueryRelatedColumnName(ctx context.Context, columnName string, params *GetApiV1QueryRelatedColumnNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1QueryRelatedColumnNameRequest(c.Server, columnName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1QueryPk(ctx context.Context, pk int, params *GetApiV1QueryPkParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1QueryPkRequest(c.Server, pk, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1Report(ctx context.Context, params *DeleteApiV1ReportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1ReportRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Report(ctx context.Context, params *GetApiV1ReportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ReportRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1ReportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1ReportRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1Report(ctx context.Context, body PostApiV1ReportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1ReportRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1ReportInfo(ctx context.Context, params *GetApiV1ReportInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ReportInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1ReportRelatedColumnName(ctx context.Context, columnName string, params *GetApiV1ReportRelatedColumnNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ReportRelatedColumnNameRequest(c.Server, columnName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1ReportPk(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1ReportPkRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1ReportPk(ctx context.Context, pk int, params *GetApiV1ReportPkParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ReportPkRequest(c.Server, pk, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1ReportPkWithBody(ctx context.Context, pk int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1ReportPkRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1ReportPk(ctx context.Context, pk int, body PutApiV1ReportPkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1ReportPkRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1ReportPkLog(ctx context.Context, pk int, params *GetApiV1ReportPkLogParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ReportPkLogRequest(c.Server, pk, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1ReportPkLogLogId(ctx context.Context, pk int, logId int, params *GetApiV1ReportPkLogLogIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ReportPkLogLogIdRequest(c.Server, pk, logId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1SavedQuery(ctx context.Context, params *DeleteApiV1SavedQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1SavedQueryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1SavedQuery(ctx context.Context, params *GetApiV1SavedQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1SavedQueryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1SavedQueryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1SavedQueryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1SavedQuery(ctx context.Context, body PostApiV1SavedQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1SavedQueryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1SavedQueryInfo(ctx context.Context, params *GetApiV1SavedQueryInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1SavedQueryInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1SavedQueryDistinctColumnName(ctx context.Context, columnName string, params *GetApiV1SavedQueryDistinctColumnNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1SavedQueryDistinctColumnNameRequest(c.Server, columnName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1SavedQueryExport(ctx context.Context, params *GetApiV1SavedQueryExportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1SavedQueryExportRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1SavedQueryImportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1SavedQueryImportRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1SavedQueryRelatedColumnName(ctx context.Context, columnName string, params *GetApiV1SavedQueryRelatedColumnNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1SavedQueryRelatedColumnNameRequest(c.Server, columnName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1SavedQueryPk(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1SavedQueryPkRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1SavedQueryPk(ctx context.Context, pk int, params *GetApiV1SavedQueryPkParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1SavedQueryPkRequest(c.Server, pk, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1SavedQueryPkWithBody(ctx context.Context, pk int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1SavedQueryPkRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1SavedQueryPk(ctx context.Context, pk int, body PutApiV1SavedQueryPkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1SavedQueryPkRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1SecurityCsrfToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1SecurityCsrfTokenRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1SecurityGuestTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1SecurityGuestTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1SecurityGuestToken(ctx context.Context, body PostApiV1SecurityGuestTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1SecurityGuestTokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1SecurityLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1SecurityLoginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1SecurityLogin(ctx context.Context, body PostApiV1SecurityLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1SecurityLoginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1SecurityRefresh(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1SecurityRefreshRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiVersionOpenapi(ctx context.Context, version string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiVersionOpenapiRequest(c.Server, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSupersetSqllabVizWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSupersetSqllabVizRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiV1AdvancedDataTypeConvertRequest generates requests for GetApiV1AdvancedDataTypeConvert
func NewGetApiV1AdvancedDataTypeConvertRequest(server string, params *GetApiV1AdvancedDataTypeConvertParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/advanced_data_type/convert")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1AdvancedDataTypeTypesRequest generates requests for GetApiV1AdvancedDataTypeTypes
func NewGetApiV1AdvancedDataTypeTypesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/advanced_data_type/types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV1AnnotationLayerRequest generates requests for DeleteApiV1AnnotationLayer
func NewDeleteApiV1AnnotationLayerRequest(server string, params *DeleteApiV1AnnotationLayerParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/annotation_layer/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1AnnotationLayerRequest generates requests for GetApiV1AnnotationLayer
func NewGetApiV1AnnotationLayerRequest(server string, params *GetApiV1AnnotationLayerParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/annotation_layer/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1AnnotationLayerRequest calls the generic PostApiV1AnnotationLayer builder with application/json body
func NewPostApiV1AnnotationLayerRequest(server string, body PostApiV1AnnotationLayerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1AnnotationLayerRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1AnnotationLayerRequestWithBody generates requests for PostApiV1AnnotationLayer with any type of body
func NewPostApiV1AnnotationLayerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/annotation_layer/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1AnnotationLayerInfoRequest generates requests for GetApiV1AnnotationLayerInfo
func NewGetApiV1AnnotationLayerInfoRequest(server string, params *GetApiV1AnnotationLayerInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/annotation_layer/_info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1AnnotationLayerRelatedColumnNameRequest generates requests for GetApiV1AnnotationLayerRelatedColumnName
func NewGetApiV1AnnotationLayerRelatedColumnNameRequest(server string, columnName string, params *GetApiV1AnnotationLayerRelatedColumnNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "column_name", runtime.ParamLocationPath, columnName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/annotation_layer/related/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV1AnnotationLayerPkRequest generates requests for DeleteApiV1AnnotationLayerPk
func NewDeleteApiV1AnnotationLayerPkRequest(server string, pk int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/annotation_layer/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1AnnotationLayerPkRequest generates requests for GetApiV1AnnotationLayerPk
func NewGetApiV1AnnotationLayerPkRequest(server string, pk int, params *GetApiV1AnnotationLayerPkParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/annotation_layer/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV1AnnotationLayerPkRequest calls the generic PutApiV1AnnotationLayerPk builder with application/json body
func NewPutApiV1AnnotationLayerPkRequest(server string, pk int, body PutApiV1AnnotationLayerPkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1AnnotationLayerPkRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPutApiV1AnnotationLayerPkRequestWithBody generates requests for PutApiV1AnnotationLayerPk with any type of body
func NewPutApiV1AnnotationLayerPkRequestWithBody(server string, pk int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/annotation_layer/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV1AnnotationLayerPkAnnotationRequest generates requests for DeleteApiV1AnnotationLayerPkAnnotation
func NewDeleteApiV1AnnotationLayerPkAnnotationRequest(server string, pk int, params *DeleteApiV1AnnotationLayerPkAnnotationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/annotation_layer/%s/annotation/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1AnnotationLayerPkAnnotationRequest generates requests for GetApiV1AnnotationLayerPkAnnotation
func NewGetApiV1AnnotationLayerPkAnnotationRequest(server string, pk int, params *GetApiV1AnnotationLayerPkAnnotationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/annotation_layer/%s/annotation/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1AnnotationLayerPkAnnotationRequest calls the generic PostApiV1AnnotationLayerPkAnnotation builder with application/json body
func NewPostApiV1AnnotationLayerPkAnnotationRequest(server string, pk int, body PostApiV1AnnotationLayerPkAnnotationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1AnnotationLayerPkAnnotationRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPostApiV1AnnotationLayerPkAnnotationRequestWithBody generates requests for PostApiV1AnnotationLayerPkAnnotation with any type of body
func NewPostApiV1AnnotationLayerPkAnnotationRequestWithBody(server string, pk int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/annotation_layer/%s/annotation/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV1AnnotationLayerPkAnnotationAnnotationIdRequest generates requests for DeleteApiV1AnnotationLayerPkAnnotationAnnotationId
func NewDeleteApiV1AnnotationLayerPkAnnotationAnnotationIdRequest(server string, pk int, annotationId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "annotation_id", runtime.ParamLocationPath, annotationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/annotation_layer/%s/annotation/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1AnnotationLayerPkAnnotationAnnotationIdRequest generates requests for GetApiV1AnnotationLayerPkAnnotationAnnotationId
func NewGetApiV1AnnotationLayerPkAnnotationAnnotationIdRequest(server string, pk int, annotationId int, params *GetApiV1AnnotationLayerPkAnnotationAnnotationIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "annotation_id", runtime.ParamLocationPath, annotationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/annotation_layer/%s/annotation/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV1AnnotationLayerPkAnnotationAnnotationIdRequest calls the generic PutApiV1AnnotationLayerPkAnnotationAnnotationId builder with application/json body
func NewPutApiV1AnnotationLayerPkAnnotationAnnotationIdRequest(server string, pk int, annotationId int, body PutApiV1AnnotationLayerPkAnnotationAnnotationIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1AnnotationLayerPkAnnotationAnnotationIdRequestWithBody(server, pk, annotationId, "application/json", bodyReader)
}

// NewPutApiV1AnnotationLayerPkAnnotationAnnotationIdRequestWithBody generates requests for PutApiV1AnnotationLayerPkAnnotationAnnotationId with any type of body
func NewPutApiV1AnnotationLayerPkAnnotationAnnotationIdRequestWithBody(server string, pk int, annotationId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "annotation_id", runtime.ParamLocationPath, annotationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/annotation_layer/%s/annotation/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1AssetsExportRequest generates requests for GetApiV1AssetsExport
func NewGetApiV1AssetsExportRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/assets/export/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1AssetsImportRequestWithBody generates requests for PostApiV1AssetsImport with any type of body
func NewPostApiV1AssetsImportRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/assets/import/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1AsyncEventRequest generates requests for GetApiV1AsyncEvent
func NewGetApiV1AsyncEventRequest(server string, params *GetApiV1AsyncEventParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/async_event/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.LastId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_id", runtime.ParamLocationQuery, *params.LastId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1AvailableDomainsRequest generates requests for GetApiV1AvailableDomains
func NewGetApiV1AvailableDomainsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/available_domains/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1CachekeyInvalidateRequest calls the generic PostApiV1CachekeyInvalidate builder with application/json body
func NewPostApiV1CachekeyInvalidateRequest(server string, body PostApiV1CachekeyInvalidateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1CachekeyInvalidateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1CachekeyInvalidateRequestWithBody generates requests for PostApiV1CachekeyInvalidate with any type of body
func NewPostApiV1CachekeyInvalidateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/cachekey/invalidate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV1ChartRequest generates requests for DeleteApiV1Chart
func NewDeleteApiV1ChartRequest(server string, params *DeleteApiV1ChartParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/chart/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1ChartRequest generates requests for GetApiV1Chart
func NewGetApiV1ChartRequest(server string, params *GetApiV1ChartParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/chart/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1ChartRequest calls the generic PostApiV1Chart builder with application/json body
func NewPostApiV1ChartRequest(server string, body PostApiV1ChartJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1ChartRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1ChartRequestWithBody generates requests for PostApiV1Chart with any type of body
func NewPostApiV1ChartRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/chart/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1ChartInfoRequest generates requests for GetApiV1ChartInfo
func NewGetApiV1ChartInfoRequest(server string, params *GetApiV1ChartInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/chart/_info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1ChartDataRequest calls the generic PostApiV1ChartData builder with application/json body
func NewPostApiV1ChartDataRequest(server string, body PostApiV1ChartDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1ChartDataRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1ChartDataRequestWithBody generates requests for PostApiV1ChartData with any type of body
func NewPostApiV1ChartDataRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/chart/data")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1ChartDataCacheKeyRequest generates requests for GetApiV1ChartDataCacheKey
func NewGetApiV1ChartDataCacheKeyRequest(server string, cacheKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cache_key", runtime.ParamLocationPath, cacheKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/chart/data/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1ChartExportRequest generates requests for GetApiV1ChartExport
func NewGetApiV1ChartExportRequest(server string, params *GetApiV1ChartExportParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/chart/export/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1ChartFavoriteStatusRequest generates requests for GetApiV1ChartFavoriteStatus
func NewGetApiV1ChartFavoriteStatusRequest(server string, params *GetApiV1ChartFavoriteStatusParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/chart/favorite_status/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1ChartImportRequestWithBody generates requests for PostApiV1ChartImport with any type of body
func NewPostApiV1ChartImportRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/chart/import/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1ChartRelatedColumnNameRequest generates requests for GetApiV1ChartRelatedColumnName
func NewGetApiV1ChartRelatedColumnNameRequest(server string, columnName string, params *GetApiV1ChartRelatedColumnNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "column_name", runtime.ParamLocationPath, columnName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/chart/related/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV1ChartPkRequest generates requests for DeleteApiV1ChartPk
func NewDeleteApiV1ChartPkRequest(server string, pk int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/chart/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1ChartPkRequest generates requests for GetApiV1ChartPk
func NewGetApiV1ChartPkRequest(server string, pk int, params *GetApiV1ChartPkParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/chart/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV1ChartPkRequest calls the generic PutApiV1ChartPk builder with application/json body
func NewPutApiV1ChartPkRequest(server string, pk int, body PutApiV1ChartPkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1ChartPkRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPutApiV1ChartPkRequestWithBody generates requests for PutApiV1ChartPk with any type of body
func NewPutApiV1ChartPkRequestWithBody(server string, pk int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/chart/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1ChartPkCacheScreenshotRequest generates requests for GetApiV1ChartPkCacheScreenshot
func NewGetApiV1ChartPkCacheScreenshotRequest(server string, pk int, params *GetApiV1ChartPkCacheScreenshotParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/chart/%s/cache_screenshot/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1ChartPkDataRequest generates requests for GetApiV1ChartPkData
func NewGetApiV1ChartPkDataRequest(server string, pk int, params *GetApiV1ChartPkDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/chart/%s/data/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Type != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1ChartPkScreenshotDigestRequest generates requests for GetApiV1ChartPkScreenshotDigest
func NewGetApiV1ChartPkScreenshotDigestRequest(server string, pk int, digest string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "digest", runtime.ParamLocationPath, digest)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/chart/%s/screenshot/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1ChartPkThumbnailDigestRequest generates requests for GetApiV1ChartPkThumbnailDigest
func NewGetApiV1ChartPkThumbnailDigestRequest(server string, pk int, digest string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "digest", runtime.ParamLocationPath, digest)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/chart/%s/thumbnail/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV1CssTemplateRequest generates requests for DeleteApiV1CssTemplate
func NewDeleteApiV1CssTemplateRequest(server string, params *DeleteApiV1CssTemplateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/css_template/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1CssTemplateRequest generates requests for GetApiV1CssTemplate
func NewGetApiV1CssTemplateRequest(server string, params *GetApiV1CssTemplateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/css_template/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1CssTemplateRequest calls the generic PostApiV1CssTemplate builder with application/json body
func NewPostApiV1CssTemplateRequest(server string, body PostApiV1CssTemplateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1CssTemplateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1CssTemplateRequestWithBody generates requests for PostApiV1CssTemplate with any type of body
func NewPostApiV1CssTemplateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/css_template/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1CssTemplateInfoRequest generates requests for GetApiV1CssTemplateInfo
func NewGetApiV1CssTemplateInfoRequest(server string, params *GetApiV1CssTemplateInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/css_template/_info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1CssTemplateRelatedColumnNameRequest generates requests for GetApiV1CssTemplateRelatedColumnName
func NewGetApiV1CssTemplateRelatedColumnNameRequest(server string, columnName string, params *GetApiV1CssTemplateRelatedColumnNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "column_name", runtime.ParamLocationPath, columnName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/css_template/related/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV1CssTemplatePkRequest generates requests for DeleteApiV1CssTemplatePk
func NewDeleteApiV1CssTemplatePkRequest(server string, pk int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/css_template/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1CssTemplatePkRequest generates requests for GetApiV1CssTemplatePk
func NewGetApiV1CssTemplatePkRequest(server string, pk int, params *GetApiV1CssTemplatePkParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/css_template/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV1CssTemplatePkRequest calls the generic PutApiV1CssTemplatePk builder with application/json body
func NewPutApiV1CssTemplatePkRequest(server string, pk int, body PutApiV1CssTemplatePkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1CssTemplatePkRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPutApiV1CssTemplatePkRequestWithBody generates requests for PutApiV1CssTemplatePk with any type of body
func NewPutApiV1CssTemplatePkRequestWithBody(server string, pk int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/css_template/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV1DashboardRequest generates requests for DeleteApiV1Dashboard
func NewDeleteApiV1DashboardRequest(server string, params *DeleteApiV1DashboardParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dashboard/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1DashboardRequest generates requests for GetApiV1Dashboard
func NewGetApiV1DashboardRequest(server string, params *GetApiV1DashboardParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dashboard/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1DashboardRequest calls the generic PostApiV1Dashboard builder with application/json body
func NewPostApiV1DashboardRequest(server string, body PostApiV1DashboardJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1DashboardRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1DashboardRequestWithBody generates requests for PostApiV1Dashboard with any type of body
func NewPostApiV1DashboardRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dashboard/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1DashboardInfoRequest generates requests for GetApiV1DashboardInfo
func NewGetApiV1DashboardInfoRequest(server string, params *GetApiV1DashboardInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dashboard/_info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1DashboardExportRequest generates requests for GetApiV1DashboardExport
func NewGetApiV1DashboardExportRequest(server string, params *GetApiV1DashboardExportParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dashboard/export/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1DashboardFavoriteStatusRequest generates requests for GetApiV1DashboardFavoriteStatus
func NewGetApiV1DashboardFavoriteStatusRequest(server string, params *GetApiV1DashboardFavoriteStatusParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dashboard/favorite_status/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1DashboardImportRequestWithBody generates requests for PostApiV1DashboardImport with any type of body
func NewPostApiV1DashboardImportRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dashboard/import/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1DashboardPermalinkKeyRequest generates requests for GetApiV1DashboardPermalinkKey
func NewGetApiV1DashboardPermalinkKeyRequest(server string, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dashboard/permalink/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1DashboardRelatedColumnNameRequest generates requests for GetApiV1DashboardRelatedColumnName
func NewGetApiV1DashboardRelatedColumnNameRequest(server string, columnName string, params *GetApiV1DashboardRelatedColumnNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "column_name", runtime.ParamLocationPath, columnName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dashboard/related/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1DashboardDashboardIdFiltersetsRequest generates requests for GetApiV1DashboardDashboardIdFiltersets
func NewGetApiV1DashboardDashboardIdFiltersetsRequest(server string, dashboardId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dashboard_id", runtime.ParamLocationPath, dashboardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dashboard/%s/filtersets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1DashboardDashboardIdFiltersetsRequest calls the generic PostApiV1DashboardDashboardIdFiltersets builder with application/json body
func NewPostApiV1DashboardDashboardIdFiltersetsRequest(server string, dashboardId int, body PostApiV1DashboardDashboardIdFiltersetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1DashboardDashboardIdFiltersetsRequestWithBody(server, dashboardId, "application/json", bodyReader)
}

// NewPostApiV1DashboardDashboardIdFiltersetsRequestWithBody generates requests for PostApiV1DashboardDashboardIdFiltersets with any type of body
func NewPostApiV1DashboardDashboardIdFiltersetsRequestWithBody(server string, dashboardId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dashboard_id", runtime.ParamLocationPath, dashboardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dashboard/%s/filtersets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV1DashboardDashboardIdFiltersetsPkRequest generates requests for DeleteApiV1DashboardDashboardIdFiltersetsPk
func NewDeleteApiV1DashboardDashboardIdFiltersetsPkRequest(server string, dashboardId int, pk int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dashboard_id", runtime.ParamLocationPath, dashboardId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dashboard/%s/filtersets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV1DashboardDashboardIdFiltersetsPkRequest calls the generic PutApiV1DashboardDashboardIdFiltersetsPk builder with application/json body
func NewPutApiV1DashboardDashboardIdFiltersetsPkRequest(server string, dashboardId int, pk int, body PutApiV1DashboardDashboardIdFiltersetsPkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1DashboardDashboardIdFiltersetsPkRequestWithBody(server, dashboardId, pk, "application/json", bodyReader)
}

// NewPutApiV1DashboardDashboardIdFiltersetsPkRequestWithBody generates requests for PutApiV1DashboardDashboardIdFiltersetsPk with any type of body
func NewPutApiV1DashboardDashboardIdFiltersetsPkRequestWithBody(server string, dashboardId int, pk int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dashboard_id", runtime.ParamLocationPath, dashboardId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dashboard/%s/filtersets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1DashboardIdOrSlugRequest generates requests for GetApiV1DashboardIdOrSlug
func NewGetApiV1DashboardIdOrSlugRequest(server string, idOrSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id_or_slug", runtime.ParamLocationPath, idOrSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dashboard/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1DashboardIdOrSlugChartsRequest generates requests for GetApiV1DashboardIdOrSlugCharts
func NewGetApiV1DashboardIdOrSlugChartsRequest(server string, idOrSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id_or_slug", runtime.ParamLocationPath, idOrSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dashboard/%s/charts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1DashboardIdOrSlugDatasetsRequest generates requests for GetApiV1DashboardIdOrSlugDatasets
func NewGetApiV1DashboardIdOrSlugDatasetsRequest(server string, idOrSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id_or_slug", runtime.ParamLocationPath, idOrSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dashboard/%s/datasets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV1DashboardIdOrSlugEmbeddedRequest generates requests for DeleteApiV1DashboardIdOrSlugEmbedded
func NewDeleteApiV1DashboardIdOrSlugEmbeddedRequest(server string, idOrSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id_or_slug", runtime.ParamLocationPath, idOrSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dashboard/%s/embedded", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1DashboardIdOrSlugEmbeddedRequest generates requests for GetApiV1DashboardIdOrSlugEmbedded
func NewGetApiV1DashboardIdOrSlugEmbeddedRequest(server string, idOrSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id_or_slug", runtime.ParamLocationPath, idOrSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dashboard/%s/embedded", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1DashboardIdOrSlugEmbeddedRequest calls the generic PostApiV1DashboardIdOrSlugEmbedded builder with application/json body
func NewPostApiV1DashboardIdOrSlugEmbeddedRequest(server string, idOrSlug string, body PostApiV1DashboardIdOrSlugEmbeddedJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1DashboardIdOrSlugEmbeddedRequestWithBody(server, idOrSlug, "application/json", bodyReader)
}

// NewPostApiV1DashboardIdOrSlugEmbeddedRequestWithBody generates requests for PostApiV1DashboardIdOrSlugEmbedded with any type of body
func NewPostApiV1DashboardIdOrSlugEmbeddedRequestWithBody(server string, idOrSlug string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id_or_slug", runtime.ParamLocationPath, idOrSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dashboard/%s/embedded", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutApiV1DashboardIdOrSlugEmbeddedRequest calls the generic PutApiV1DashboardIdOrSlugEmbedded builder with application/json body
func NewPutApiV1DashboardIdOrSlugEmbeddedRequest(server string, idOrSlug string, body PutApiV1DashboardIdOrSlugEmbeddedJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1DashboardIdOrSlugEmbeddedRequestWithBody(server, idOrSlug, "application/json", bodyReader)
}

// NewPutApiV1DashboardIdOrSlugEmbeddedRequestWithBody generates requests for PutApiV1DashboardIdOrSlugEmbedded with any type of body
func NewPutApiV1DashboardIdOrSlugEmbeddedRequestWithBody(server string, idOrSlug string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id_or_slug", runtime.ParamLocationPath, idOrSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dashboard/%s/embedded", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV1DashboardPkRequest generates requests for DeleteApiV1DashboardPk
func NewDeleteApiV1DashboardPkRequest(server string, pk int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dashboard/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV1DashboardPkRequest calls the generic PutApiV1DashboardPk builder with application/json body
func NewPutApiV1DashboardPkRequest(server string, pk int, body PutApiV1DashboardPkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1DashboardPkRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPutApiV1DashboardPkRequestWithBody generates requests for PutApiV1DashboardPk with any type of body
func NewPutApiV1DashboardPkRequestWithBody(server string, pk int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dashboard/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1DashboardPkFilterStateRequest calls the generic PostApiV1DashboardPkFilterState builder with application/json body
func NewPostApiV1DashboardPkFilterStateRequest(server string, pk int, params *PostApiV1DashboardPkFilterStateParams, body PostApiV1DashboardPkFilterStateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1DashboardPkFilterStateRequestWithBody(server, pk, params, "application/json", bodyReader)
}

// NewPostApiV1DashboardPkFilterStateRequestWithBody generates requests for PostApiV1DashboardPkFilterState with any type of body
func NewPostApiV1DashboardPkFilterStateRequestWithBody(server string, pk int, params *PostApiV1DashboardPkFilterStateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dashboard/%s/filter_state", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TabId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tab_id", runtime.ParamLocationQuery, *params.TabId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV1DashboardPkFilterStateKeyRequest generates requests for DeleteApiV1DashboardPkFilterStateKey
func NewDeleteApiV1DashboardPkFilterStateKeyRequest(server string, pk int, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dashboard/%s/filter_state/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1DashboardPkFilterStateKeyRequest generates requests for GetApiV1DashboardPkFilterStateKey
func NewGetApiV1DashboardPkFilterStateKeyRequest(server string, pk int, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dashboard/%s/filter_state/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV1DashboardPkFilterStateKeyRequest calls the generic PutApiV1DashboardPkFilterStateKey builder with application/json body
func NewPutApiV1DashboardPkFilterStateKeyRequest(server string, pk int, key string, params *PutApiV1DashboardPkFilterStateKeyParams, body PutApiV1DashboardPkFilterStateKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1DashboardPkFilterStateKeyRequestWithBody(server, pk, key, params, "application/json", bodyReader)
}

// NewPutApiV1DashboardPkFilterStateKeyRequestWithBody generates requests for PutApiV1DashboardPkFilterStateKey with any type of body
func NewPutApiV1DashboardPkFilterStateKeyRequestWithBody(server string, pk int, key string, params *PutApiV1DashboardPkFilterStateKeyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dashboard/%s/filter_state/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TabId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tab_id", runtime.ParamLocationQuery, *params.TabId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1DashboardPkPermalinkRequest calls the generic PostApiV1DashboardPkPermalink builder with application/json body
func NewPostApiV1DashboardPkPermalinkRequest(server string, pk string, body PostApiV1DashboardPkPermalinkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1DashboardPkPermalinkRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPostApiV1DashboardPkPermalinkRequestWithBody generates requests for PostApiV1DashboardPkPermalink with any type of body
func NewPostApiV1DashboardPkPermalinkRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dashboard/%s/permalink", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1DashboardPkThumbnailDigestRequest generates requests for GetApiV1DashboardPkThumbnailDigest
func NewGetApiV1DashboardPkThumbnailDigestRequest(server string, pk int, digest string, params *GetApiV1DashboardPkThumbnailDigestParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "digest", runtime.ParamLocationPath, digest)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dashboard/%s/thumbnail/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1DatabaseRequest generates requests for GetApiV1Database
func NewGetApiV1DatabaseRequest(server string, params *GetApiV1DatabaseParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/database/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1DatabaseRequest calls the generic PostApiV1Database builder with application/json body
func NewPostApiV1DatabaseRequest(server string, body PostApiV1DatabaseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1DatabaseRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1DatabaseRequestWithBody generates requests for PostApiV1Database with any type of body
func NewPostApiV1DatabaseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/database/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1DatabaseInfoRequest generates requests for GetApiV1DatabaseInfo
func NewGetApiV1DatabaseInfoRequest(server string, params *GetApiV1DatabaseInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/database/_info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1DatabaseAvailableRequest generates requests for GetApiV1DatabaseAvailable
func NewGetApiV1DatabaseAvailableRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/database/available/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1DatabaseExportRequest generates requests for GetApiV1DatabaseExport
func NewGetApiV1DatabaseExportRequest(server string, params *GetApiV1DatabaseExportParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/database/export/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1DatabaseImportRequestWithBody generates requests for PostApiV1DatabaseImport with any type of body
func NewPostApiV1DatabaseImportRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/database/import/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1DatabaseTestConnectionRequest calls the generic PostApiV1DatabaseTestConnection builder with application/json body
func NewPostApiV1DatabaseTestConnectionRequest(server string, body PostApiV1DatabaseTestConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1DatabaseTestConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1DatabaseTestConnectionRequestWithBody generates requests for PostApiV1DatabaseTestConnection with any type of body
func NewPostApiV1DatabaseTestConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/database/test_connection/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1DatabaseValidateParametersRequest calls the generic PostApiV1DatabaseValidateParameters builder with application/json body
func NewPostApiV1DatabaseValidateParametersRequest(server string, body PostApiV1DatabaseValidateParametersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1DatabaseValidateParametersRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1DatabaseValidateParametersRequestWithBody generates requests for PostApiV1DatabaseValidateParameters with any type of body
func NewPostApiV1DatabaseValidateParametersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/database/validate_parameters/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV1DatabasePkRequest generates requests for DeleteApiV1DatabasePk
func NewDeleteApiV1DatabasePkRequest(server string, pk int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/database/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1DatabasePkRequest generates requests for GetApiV1DatabasePk
func NewGetApiV1DatabasePkRequest(server string, pk int, params *GetApiV1DatabasePkParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/database/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV1DatabasePkRequest calls the generic PutApiV1DatabasePk builder with application/json body
func NewPutApiV1DatabasePkRequest(server string, pk int, body PutApiV1DatabasePkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1DatabasePkRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPutApiV1DatabasePkRequestWithBody generates requests for PutApiV1DatabasePk with any type of body
func NewPutApiV1DatabasePkRequestWithBody(server string, pk int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/database/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1DatabasePkFunctionNamesRequest generates requests for GetApiV1DatabasePkFunctionNames
func NewGetApiV1DatabasePkFunctionNamesRequest(server string, pk int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/database/%s/function_names/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1DatabasePkRelatedObjectsRequest generates requests for GetApiV1DatabasePkRelatedObjects
func NewGetApiV1DatabasePkRelatedObjectsRequest(server string, pk int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/database/%s/related_objects/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1DatabasePkSchemasRequest generates requests for GetApiV1DatabasePkSchemas
func NewGetApiV1DatabasePkSchemasRequest(server string, pk int, params *GetApiV1DatabasePkSchemasParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/database/%s/schemas/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1DatabasePkSelectStarTableNameRequest generates requests for GetApiV1DatabasePkSelectStarTableName
func NewGetApiV1DatabasePkSelectStarTableNameRequest(server string, pk int, tableName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "table_name", runtime.ParamLocationPath, tableName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/database/%s/select_star/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1DatabasePkSelectStarTableNameSchemaNameRequest generates requests for GetApiV1DatabasePkSelectStarTableNameSchemaName
func NewGetApiV1DatabasePkSelectStarTableNameSchemaNameRequest(server string, pk int, tableName string, schemaName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "table_name", runtime.ParamLocationPath, tableName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "schema_name", runtime.ParamLocationPath, schemaName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/database/%s/select_star/%s/%s/", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1DatabasePkTableTableNameSchemaNameRequest generates requests for GetApiV1DatabasePkTableTableNameSchemaName
func NewGetApiV1DatabasePkTableTableNameSchemaNameRequest(server string, pk int, tableName string, schemaName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "table_name", runtime.ParamLocationPath, tableName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "schema_name", runtime.ParamLocationPath, schemaName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/database/%s/table/%s/%s/", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1DatabasePkTableExtraTableNameSchemaNameRequest generates requests for GetApiV1DatabasePkTableExtraTableNameSchemaName
func NewGetApiV1DatabasePkTableExtraTableNameSchemaNameRequest(server string, pk int, tableName string, schemaName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "table_name", runtime.ParamLocationPath, tableName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "schema_name", runtime.ParamLocationPath, schemaName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/database/%s/table_extra/%s/%s/", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1DatabasePkValidateSqlRequest calls the generic PostApiV1DatabasePkValidateSql builder with application/json body
func NewPostApiV1DatabasePkValidateSqlRequest(server string, pk int, body PostApiV1DatabasePkValidateSqlJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1DatabasePkValidateSqlRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPostApiV1DatabasePkValidateSqlRequestWithBody generates requests for PostApiV1DatabasePkValidateSql with any type of body
func NewPostApiV1DatabasePkValidateSqlRequestWithBody(server string, pk int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/database/%s/validate_sql/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV1DatasetRequest generates requests for DeleteApiV1Dataset
func NewDeleteApiV1DatasetRequest(server string, params *DeleteApiV1DatasetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dataset/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1DatasetRequest generates requests for GetApiV1Dataset
func NewGetApiV1DatasetRequest(server string, params *GetApiV1DatasetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dataset/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1DatasetRequest calls the generic PostApiV1Dataset builder with application/json body
func NewPostApiV1DatasetRequest(server string, body PostApiV1DatasetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1DatasetRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1DatasetRequestWithBody generates requests for PostApiV1Dataset with any type of body
func NewPostApiV1DatasetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dataset/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1DatasetInfoRequest generates requests for GetApiV1DatasetInfo
func NewGetApiV1DatasetInfoRequest(server string, params *GetApiV1DatasetInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dataset/_info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1DatasetDistinctColumnNameRequest generates requests for GetApiV1DatasetDistinctColumnName
func NewGetApiV1DatasetDistinctColumnNameRequest(server string, columnName string, params *GetApiV1DatasetDistinctColumnNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "column_name", runtime.ParamLocationPath, columnName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dataset/distinct/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1DatasetDuplicateRequest calls the generic PostApiV1DatasetDuplicate builder with application/json body
func NewPostApiV1DatasetDuplicateRequest(server string, body PostApiV1DatasetDuplicateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1DatasetDuplicateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1DatasetDuplicateRequestWithBody generates requests for PostApiV1DatasetDuplicate with any type of body
func NewPostApiV1DatasetDuplicateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dataset/duplicate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1DatasetExportRequest generates requests for GetApiV1DatasetExport
func NewGetApiV1DatasetExportRequest(server string, params *GetApiV1DatasetExportParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dataset/export/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1DatasetImportRequestWithBody generates requests for PostApiV1DatasetImport with any type of body
func NewPostApiV1DatasetImportRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dataset/import/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1DatasetRelatedColumnNameRequest generates requests for GetApiV1DatasetRelatedColumnName
func NewGetApiV1DatasetRelatedColumnNameRequest(server string, columnName string, params *GetApiV1DatasetRelatedColumnNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "column_name", runtime.ParamLocationPath, columnName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dataset/related/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV1DatasetPkRequest generates requests for DeleteApiV1DatasetPk
func NewDeleteApiV1DatasetPkRequest(server string, pk int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dataset/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1DatasetPkRequest generates requests for GetApiV1DatasetPk
func NewGetApiV1DatasetPkRequest(server string, pk int, params *GetApiV1DatasetPkParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dataset/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV1DatasetPkRequest calls the generic PutApiV1DatasetPk builder with application/json body
func NewPutApiV1DatasetPkRequest(server string, pk int, params *PutApiV1DatasetPkParams, body PutApiV1DatasetPkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1DatasetPkRequestWithBody(server, pk, params, "application/json", bodyReader)
}

// NewPutApiV1DatasetPkRequestWithBody generates requests for PutApiV1DatasetPk with any type of body
func NewPutApiV1DatasetPkRequestWithBody(server string, pk int, params *PutApiV1DatasetPkParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dataset/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.OverrideColumns != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "override_columns", runtime.ParamLocationQuery, *params.OverrideColumns); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV1DatasetPkColumnColumnIdRequest generates requests for DeleteApiV1DatasetPkColumnColumnId
func NewDeleteApiV1DatasetPkColumnColumnIdRequest(server string, pk int, columnId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "column_id", runtime.ParamLocationPath, columnId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dataset/%s/column/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV1DatasetPkMetricMetricIdRequest generates requests for DeleteApiV1DatasetPkMetricMetricId
func NewDeleteApiV1DatasetPkMetricMetricIdRequest(server string, pk int, metricId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "metric_id", runtime.ParamLocationPath, metricId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dataset/%s/metric/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV1DatasetPkRefreshRequest generates requests for PutApiV1DatasetPkRefresh
func NewPutApiV1DatasetPkRefreshRequest(server string, pk int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dataset/%s/refresh", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1DatasetPkRelatedObjectsRequest generates requests for GetApiV1DatasetPkRelatedObjects
func NewGetApiV1DatasetPkRelatedObjectsRequest(server string, pk int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dataset/%s/related_objects", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1EmbeddedDashboardUuidRequest generates requests for GetApiV1EmbeddedDashboardUuid
func NewGetApiV1EmbeddedDashboardUuidRequest(server string, uuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/embedded_dashboard/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1ExploreRequest generates requests for GetApiV1Explore
func NewGetApiV1ExploreRequest(server string, params *GetApiV1ExploreParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/explore/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FormDataKey != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "form_data_key", runtime.ParamLocationQuery, *params.FormDataKey); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PermalinkKey != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "permalink_key", runtime.ParamLocationQuery, *params.PermalinkKey); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SliceId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "slice_id", runtime.ParamLocationQuery, *params.SliceId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DatasetId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dataset_id", runtime.ParamLocationQuery, *params.DatasetId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DatasetType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dataset_type", runtime.ParamLocationQuery, *params.DatasetType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1ExploreFormDataRequest calls the generic PostApiV1ExploreFormData builder with application/json body
func NewPostApiV1ExploreFormDataRequest(server string, params *PostApiV1ExploreFormDataParams, body PostApiV1ExploreFormDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1ExploreFormDataRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostApiV1ExploreFormDataRequestWithBody generates requests for PostApiV1ExploreFormData with any type of body
func NewPostApiV1ExploreFormDataRequestWithBody(server string, params *PostApiV1ExploreFormDataParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/explore/form_data")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TabId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tab_id", runtime.ParamLocationQuery, *params.TabId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV1ExploreFormDataKeyRequest generates requests for DeleteApiV1ExploreFormDataKey
func NewDeleteApiV1ExploreFormDataKeyRequest(server string, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/explore/form_data/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1ExploreFormDataKeyRequest generates requests for GetApiV1ExploreFormDataKey
func NewGetApiV1ExploreFormDataKeyRequest(server string, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/explore/form_data/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV1ExploreFormDataKeyRequest calls the generic PutApiV1ExploreFormDataKey builder with application/json body
func NewPutApiV1ExploreFormDataKeyRequest(server string, key string, params *PutApiV1ExploreFormDataKeyParams, body PutApiV1ExploreFormDataKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1ExploreFormDataKeyRequestWithBody(server, key, params, "application/json", bodyReader)
}

// NewPutApiV1ExploreFormDataKeyRequestWithBody generates requests for PutApiV1ExploreFormDataKey with any type of body
func NewPutApiV1ExploreFormDataKeyRequestWithBody(server string, key string, params *PutApiV1ExploreFormDataKeyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/explore/form_data/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TabId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tab_id", runtime.ParamLocationQuery, *params.TabId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1ExplorePermalinkRequest calls the generic PostApiV1ExplorePermalink builder with application/json body
func NewPostApiV1ExplorePermalinkRequest(server string, body PostApiV1ExplorePermalinkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1ExplorePermalinkRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1ExplorePermalinkRequestWithBody generates requests for PostApiV1ExplorePermalink with any type of body
func NewPostApiV1ExplorePermalinkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/explore/permalink")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1ExplorePermalinkKeyRequest generates requests for GetApiV1ExplorePermalinkKey
func NewGetApiV1ExplorePermalinkKeyRequest(server string, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/explore/permalink/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1LogRequest generates requests for GetApiV1Log
func NewGetApiV1LogRequest(server string, params *GetApiV1LogParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/log/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1LogRequest calls the generic PostApiV1Log builder with application/json body
func NewPostApiV1LogRequest(server string, body PostApiV1LogJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1LogRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1LogRequestWithBody generates requests for PostApiV1Log with any type of body
func NewPostApiV1LogRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/log/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1LogPkRequest generates requests for GetApiV1LogPk
func NewGetApiV1LogPkRequest(server string, pk int, params *GetApiV1LogPkParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/log/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1MeRequest generates requests for GetApiV1Me
func NewGetApiV1MeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/me/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1MeRolesRequest generates requests for GetApiV1MeRoles
func NewGetApiV1MeRolesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/me/roles/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1MenuRequest generates requests for GetApiV1Menu
func NewGetApiV1MenuRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/menu/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1QueryRequest generates requests for GetApiV1Query
func NewGetApiV1QueryRequest(server string, params *GetApiV1QueryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/query/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1QueryDistinctColumnNameRequest generates requests for GetApiV1QueryDistinctColumnName
func NewGetApiV1QueryDistinctColumnNameRequest(server string, columnName string, params *GetApiV1QueryDistinctColumnNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "column_name", runtime.ParamLocationPath, columnName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/query/distinct/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1QueryRelatedColumnNameRequest generates requests for GetApiV1QueryRelatedColumnName
func NewGetApiV1QueryRelatedColumnNameRequest(server string, columnName string, params *GetApiV1QueryRelatedColumnNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "column_name", runtime.ParamLocationPath, columnName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/query/related/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1QueryPkRequest generates requests for GetApiV1QueryPk
func NewGetApiV1QueryPkRequest(server string, pk int, params *GetApiV1QueryPkParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/query/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV1ReportRequest generates requests for DeleteApiV1Report
func NewDeleteApiV1ReportRequest(server string, params *DeleteApiV1ReportParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/report/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1ReportRequest generates requests for GetApiV1Report
func NewGetApiV1ReportRequest(server string, params *GetApiV1ReportParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/report/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1ReportRequest calls the generic PostApiV1Report builder with application/json body
func NewPostApiV1ReportRequest(server string, body PostApiV1ReportJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1ReportRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1ReportRequestWithBody generates requests for PostApiV1Report with any type of body
func NewPostApiV1ReportRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/report/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1ReportInfoRequest generates requests for GetApiV1ReportInfo
func NewGetApiV1ReportInfoRequest(server string, params *GetApiV1ReportInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/report/_info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1ReportRelatedColumnNameRequest generates requests for GetApiV1ReportRelatedColumnName
func NewGetApiV1ReportRelatedColumnNameRequest(server string, columnName string, params *GetApiV1ReportRelatedColumnNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "column_name", runtime.ParamLocationPath, columnName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/report/related/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV1ReportPkRequest generates requests for DeleteApiV1ReportPk
func NewDeleteApiV1ReportPkRequest(server string, pk int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/report/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1ReportPkRequest generates requests for GetApiV1ReportPk
func NewGetApiV1ReportPkRequest(server string, pk int, params *GetApiV1ReportPkParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/report/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV1ReportPkRequest calls the generic PutApiV1ReportPk builder with application/json body
func NewPutApiV1ReportPkRequest(server string, pk int, body PutApiV1ReportPkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1ReportPkRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPutApiV1ReportPkRequestWithBody generates requests for PutApiV1ReportPk with any type of body
func NewPutApiV1ReportPkRequestWithBody(server string, pk int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/report/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1ReportPkLogRequest generates requests for GetApiV1ReportPkLog
func NewGetApiV1ReportPkLogRequest(server string, pk int, params *GetApiV1ReportPkLogParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/report/%s/log/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1ReportPkLogLogIdRequest generates requests for GetApiV1ReportPkLogLogId
func NewGetApiV1ReportPkLogLogIdRequest(server string, pk int, logId int, params *GetApiV1ReportPkLogLogIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "log_id", runtime.ParamLocationPath, logId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/report/%s/log/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV1SavedQueryRequest generates requests for DeleteApiV1SavedQuery
func NewDeleteApiV1SavedQueryRequest(server string, params *DeleteApiV1SavedQueryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/saved_query/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1SavedQueryRequest generates requests for GetApiV1SavedQuery
func NewGetApiV1SavedQueryRequest(server string, params *GetApiV1SavedQueryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/saved_query/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1SavedQueryRequest calls the generic PostApiV1SavedQuery builder with application/json body
func NewPostApiV1SavedQueryRequest(server string, body PostApiV1SavedQueryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1SavedQueryRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1SavedQueryRequestWithBody generates requests for PostApiV1SavedQuery with any type of body
func NewPostApiV1SavedQueryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/saved_query/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1SavedQueryInfoRequest generates requests for GetApiV1SavedQueryInfo
func NewGetApiV1SavedQueryInfoRequest(server string, params *GetApiV1SavedQueryInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/saved_query/_info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1SavedQueryDistinctColumnNameRequest generates requests for GetApiV1SavedQueryDistinctColumnName
func NewGetApiV1SavedQueryDistinctColumnNameRequest(server string, columnName string, params *GetApiV1SavedQueryDistinctColumnNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "column_name", runtime.ParamLocationPath, columnName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/saved_query/distinct/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1SavedQueryExportRequest generates requests for GetApiV1SavedQueryExport
func NewGetApiV1SavedQueryExportRequest(server string, params *GetApiV1SavedQueryExportParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/saved_query/export/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1SavedQueryImportRequestWithBody generates requests for PostApiV1SavedQueryImport with any type of body
func NewPostApiV1SavedQueryImportRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/saved_query/import/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1SavedQueryRelatedColumnNameRequest generates requests for GetApiV1SavedQueryRelatedColumnName
func NewGetApiV1SavedQueryRelatedColumnNameRequest(server string, columnName string, params *GetApiV1SavedQueryRelatedColumnNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "column_name", runtime.ParamLocationPath, columnName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/saved_query/related/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV1SavedQueryPkRequest generates requests for DeleteApiV1SavedQueryPk
func NewDeleteApiV1SavedQueryPkRequest(server string, pk int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/saved_query/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1SavedQueryPkRequest generates requests for GetApiV1SavedQueryPk
func NewGetApiV1SavedQueryPkRequest(server string, pk int, params *GetApiV1SavedQueryPkParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/saved_query/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryParamBuf, err := json.Marshal(*params.Q); err != nil {
			return nil, err
		} else {
			queryValues.Add("q", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV1SavedQueryPkRequest calls the generic PutApiV1SavedQueryPk builder with application/json body
func NewPutApiV1SavedQueryPkRequest(server string, pk int, body PutApiV1SavedQueryPkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1SavedQueryPkRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPutApiV1SavedQueryPkRequestWithBody generates requests for PutApiV1SavedQueryPk with any type of body
func NewPutApiV1SavedQueryPkRequestWithBody(server string, pk int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/saved_query/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1SecurityCsrfTokenRequest generates requests for GetApiV1SecurityCsrfToken
func NewGetApiV1SecurityCsrfTokenRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/security/csrf_token/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1SecurityGuestTokenRequest calls the generic PostApiV1SecurityGuestToken builder with application/json body
func NewPostApiV1SecurityGuestTokenRequest(server string, body PostApiV1SecurityGuestTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1SecurityGuestTokenRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1SecurityGuestTokenRequestWithBody generates requests for PostApiV1SecurityGuestToken with any type of body
func NewPostApiV1SecurityGuestTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/security/guest_token/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1SecurityLoginRequest calls the generic PostApiV1SecurityLogin builder with application/json body
func NewPostApiV1SecurityLoginRequest(server string, body PostApiV1SecurityLoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1SecurityLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1SecurityLoginRequestWithBody generates requests for PostApiV1SecurityLogin with any type of body
func NewPostApiV1SecurityLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/security/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1SecurityRefreshRequest generates requests for PostApiV1SecurityRefresh
func NewPostApiV1SecurityRefreshRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/security/refresh")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiVersionOpenapiRequest generates requests for GetApiVersionOpenapi
func NewGetApiVersionOpenapiRequest(server string, version string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/_openapi", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSupersetSqllabVizRequestWithBody generates requests for PostSupersetSqllabViz with any type of body
func NewPostSupersetSqllabVizRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/superset/sqllab_viz/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiV1AdvancedDataTypeConvert request
	GetApiV1AdvancedDataTypeConvertWithResponse(ctx context.Context, params *GetApiV1AdvancedDataTypeConvertParams, reqEditors ...RequestEditorFn) (*GetApiV1AdvancedDataTypeConvertResponse, error)

	// GetApiV1AdvancedDataTypeTypes request
	GetApiV1AdvancedDataTypeTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1AdvancedDataTypeTypesResponse, error)

	// DeleteApiV1AnnotationLayer request
	DeleteApiV1AnnotationLayerWithResponse(ctx context.Context, params *DeleteApiV1AnnotationLayerParams, reqEditors ...RequestEditorFn) (*DeleteApiV1AnnotationLayerResponse, error)

	// GetApiV1AnnotationLayer request
	GetApiV1AnnotationLayerWithResponse(ctx context.Context, params *GetApiV1AnnotationLayerParams, reqEditors ...RequestEditorFn) (*GetApiV1AnnotationLayerResponse, error)

	// PostApiV1AnnotationLayer request with any body
	PostApiV1AnnotationLayerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1AnnotationLayerResponse, error)

	PostApiV1AnnotationLayerWithResponse(ctx context.Context, body PostApiV1AnnotationLayerJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1AnnotationLayerResponse, error)

	// GetApiV1AnnotationLayerInfo request
	GetApiV1AnnotationLayerInfoWithResponse(ctx context.Context, params *GetApiV1AnnotationLayerInfoParams, reqEditors ...RequestEditorFn) (*GetApiV1AnnotationLayerInfoResponse, error)

	// GetApiV1AnnotationLayerRelatedColumnName request
	GetApiV1AnnotationLayerRelatedColumnNameWithResponse(ctx context.Context, columnName string, params *GetApiV1AnnotationLayerRelatedColumnNameParams, reqEditors ...RequestEditorFn) (*GetApiV1AnnotationLayerRelatedColumnNameResponse, error)

	// DeleteApiV1AnnotationLayerPk request
	DeleteApiV1AnnotationLayerPkWithResponse(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*DeleteApiV1AnnotationLayerPkResponse, error)

	// GetApiV1AnnotationLayerPk request
	GetApiV1AnnotationLayerPkWithResponse(ctx context.Context, pk int, params *GetApiV1AnnotationLayerPkParams, reqEditors ...RequestEditorFn) (*GetApiV1AnnotationLayerPkResponse, error)

	// PutApiV1AnnotationLayerPk request with any body
	PutApiV1AnnotationLayerPkWithBodyWithResponse(ctx context.Context, pk int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1AnnotationLayerPkResponse, error)

	PutApiV1AnnotationLayerPkWithResponse(ctx context.Context, pk int, body PutApiV1AnnotationLayerPkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1AnnotationLayerPkResponse, error)

	// DeleteApiV1AnnotationLayerPkAnnotation request
	DeleteApiV1AnnotationLayerPkAnnotationWithResponse(ctx context.Context, pk int, params *DeleteApiV1AnnotationLayerPkAnnotationParams, reqEditors ...RequestEditorFn) (*DeleteApiV1AnnotationLayerPkAnnotationResponse, error)

	// GetApiV1AnnotationLayerPkAnnotation request
	GetApiV1AnnotationLayerPkAnnotationWithResponse(ctx context.Context, pk int, params *GetApiV1AnnotationLayerPkAnnotationParams, reqEditors ...RequestEditorFn) (*GetApiV1AnnotationLayerPkAnnotationResponse, error)

	// PostApiV1AnnotationLayerPkAnnotation request with any body
	PostApiV1AnnotationLayerPkAnnotationWithBodyWithResponse(ctx context.Context, pk int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1AnnotationLayerPkAnnotationResponse, error)

	PostApiV1AnnotationLayerPkAnnotationWithResponse(ctx context.Context, pk int, body PostApiV1AnnotationLayerPkAnnotationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1AnnotationLayerPkAnnotationResponse, error)

	// DeleteApiV1AnnotationLayerPkAnnotationAnnotationId request
	DeleteApiV1AnnotationLayerPkAnnotationAnnotationIdWithResponse(ctx context.Context, pk int, annotationId int, reqEditors ...RequestEditorFn) (*DeleteApiV1AnnotationLayerPkAnnotationAnnotationIdResponse, error)

	// GetApiV1AnnotationLayerPkAnnotationAnnotationId request
	GetApiV1AnnotationLayerPkAnnotationAnnotationIdWithResponse(ctx context.Context, pk int, annotationId int, params *GetApiV1AnnotationLayerPkAnnotationAnnotationIdParams, reqEditors ...RequestEditorFn) (*GetApiV1AnnotationLayerPkAnnotationAnnotationIdResponse, error)

	// PutApiV1AnnotationLayerPkAnnotationAnnotationId request with any body
	PutApiV1AnnotationLayerPkAnnotationAnnotationIdWithBodyWithResponse(ctx context.Context, pk int, annotationId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1AnnotationLayerPkAnnotationAnnotationIdResponse, error)

	PutApiV1AnnotationLayerPkAnnotationAnnotationIdWithResponse(ctx context.Context, pk int, annotationId int, body PutApiV1AnnotationLayerPkAnnotationAnnotationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1AnnotationLayerPkAnnotationAnnotationIdResponse, error)

	// GetApiV1AssetsExport request
	GetApiV1AssetsExportWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1AssetsExportResponse, error)

	// PostApiV1AssetsImport request with any body
	PostApiV1AssetsImportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1AssetsImportResponse, error)

	// GetApiV1AsyncEvent request
	GetApiV1AsyncEventWithResponse(ctx context.Context, params *GetApiV1AsyncEventParams, reqEditors ...RequestEditorFn) (*GetApiV1AsyncEventResponse, error)

	// GetApiV1AvailableDomains request
	GetApiV1AvailableDomainsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1AvailableDomainsResponse, error)

	// PostApiV1CachekeyInvalidate request with any body
	PostApiV1CachekeyInvalidateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1CachekeyInvalidateResponse, error)

	PostApiV1CachekeyInvalidateWithResponse(ctx context.Context, body PostApiV1CachekeyInvalidateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1CachekeyInvalidateResponse, error)

	// DeleteApiV1Chart request
	DeleteApiV1ChartWithResponse(ctx context.Context, params *DeleteApiV1ChartParams, reqEditors ...RequestEditorFn) (*DeleteApiV1ChartResponse, error)

	// GetApiV1Chart request
	GetApiV1ChartWithResponse(ctx context.Context, params *GetApiV1ChartParams, reqEditors ...RequestEditorFn) (*GetApiV1ChartResponse, error)

	// PostApiV1Chart request with any body
	PostApiV1ChartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1ChartResponse, error)

	PostApiV1ChartWithResponse(ctx context.Context, body PostApiV1ChartJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1ChartResponse, error)

	// GetApiV1ChartInfo request
	GetApiV1ChartInfoWithResponse(ctx context.Context, params *GetApiV1ChartInfoParams, reqEditors ...RequestEditorFn) (*GetApiV1ChartInfoResponse, error)

	// PostApiV1ChartData request with any body
	PostApiV1ChartDataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1ChartDataResponse, error)

	PostApiV1ChartDataWithResponse(ctx context.Context, body PostApiV1ChartDataJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1ChartDataResponse, error)

	// GetApiV1ChartDataCacheKey request
	GetApiV1ChartDataCacheKeyWithResponse(ctx context.Context, cacheKey string, reqEditors ...RequestEditorFn) (*GetApiV1ChartDataCacheKeyResponse, error)

	// GetApiV1ChartExport request
	GetApiV1ChartExportWithResponse(ctx context.Context, params *GetApiV1ChartExportParams, reqEditors ...RequestEditorFn) (*GetApiV1ChartExportResponse, error)

	// GetApiV1ChartFavoriteStatus request
	GetApiV1ChartFavoriteStatusWithResponse(ctx context.Context, params *GetApiV1ChartFavoriteStatusParams, reqEditors ...RequestEditorFn) (*GetApiV1ChartFavoriteStatusResponse, error)

	// PostApiV1ChartImport request with any body
	PostApiV1ChartImportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1ChartImportResponse, error)

	// GetApiV1ChartRelatedColumnName request
	GetApiV1ChartRelatedColumnNameWithResponse(ctx context.Context, columnName string, params *GetApiV1ChartRelatedColumnNameParams, reqEditors ...RequestEditorFn) (*GetApiV1ChartRelatedColumnNameResponse, error)

	// DeleteApiV1ChartPk request
	DeleteApiV1ChartPkWithResponse(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*DeleteApiV1ChartPkResponse, error)

	// GetApiV1ChartPk request
	GetApiV1ChartPkWithResponse(ctx context.Context, pk int, params *GetApiV1ChartPkParams, reqEditors ...RequestEditorFn) (*GetApiV1ChartPkResponse, error)

	// PutApiV1ChartPk request with any body
	PutApiV1ChartPkWithBodyWithResponse(ctx context.Context, pk int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1ChartPkResponse, error)

	PutApiV1ChartPkWithResponse(ctx context.Context, pk int, body PutApiV1ChartPkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1ChartPkResponse, error)

	// GetApiV1ChartPkCacheScreenshot request
	GetApiV1ChartPkCacheScreenshotWithResponse(ctx context.Context, pk int, params *GetApiV1ChartPkCacheScreenshotParams, reqEditors ...RequestEditorFn) (*GetApiV1ChartPkCacheScreenshotResponse, error)

	// GetApiV1ChartPkData request
	GetApiV1ChartPkDataWithResponse(ctx context.Context, pk int, params *GetApiV1ChartPkDataParams, reqEditors ...RequestEditorFn) (*GetApiV1ChartPkDataResponse, error)

	// GetApiV1ChartPkScreenshotDigest request
	GetApiV1ChartPkScreenshotDigestWithResponse(ctx context.Context, pk int, digest string, reqEditors ...RequestEditorFn) (*GetApiV1ChartPkScreenshotDigestResponse, error)

	// GetApiV1ChartPkThumbnailDigest request
	GetApiV1ChartPkThumbnailDigestWithResponse(ctx context.Context, pk int, digest string, reqEditors ...RequestEditorFn) (*GetApiV1ChartPkThumbnailDigestResponse, error)

	// DeleteApiV1CssTemplate request
	DeleteApiV1CssTemplateWithResponse(ctx context.Context, params *DeleteApiV1CssTemplateParams, reqEditors ...RequestEditorFn) (*DeleteApiV1CssTemplateResponse, error)

	// GetApiV1CssTemplate request
	GetApiV1CssTemplateWithResponse(ctx context.Context, params *GetApiV1CssTemplateParams, reqEditors ...RequestEditorFn) (*GetApiV1CssTemplateResponse, error)

	// PostApiV1CssTemplate request with any body
	PostApiV1CssTemplateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1CssTemplateResponse, error)

	PostApiV1CssTemplateWithResponse(ctx context.Context, body PostApiV1CssTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1CssTemplateResponse, error)

	// GetApiV1CssTemplateInfo request
	GetApiV1CssTemplateInfoWithResponse(ctx context.Context, params *GetApiV1CssTemplateInfoParams, reqEditors ...RequestEditorFn) (*GetApiV1CssTemplateInfoResponse, error)

	// GetApiV1CssTemplateRelatedColumnName request
	GetApiV1CssTemplateRelatedColumnNameWithResponse(ctx context.Context, columnName string, params *GetApiV1CssTemplateRelatedColumnNameParams, reqEditors ...RequestEditorFn) (*GetApiV1CssTemplateRelatedColumnNameResponse, error)

	// DeleteApiV1CssTemplatePk request
	DeleteApiV1CssTemplatePkWithResponse(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*DeleteApiV1CssTemplatePkResponse, error)

	// GetApiV1CssTemplatePk request
	GetApiV1CssTemplatePkWithResponse(ctx context.Context, pk int, params *GetApiV1CssTemplatePkParams, reqEditors ...RequestEditorFn) (*GetApiV1CssTemplatePkResponse, error)

	// PutApiV1CssTemplatePk request with any body
	PutApiV1CssTemplatePkWithBodyWithResponse(ctx context.Context, pk int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1CssTemplatePkResponse, error)

	PutApiV1CssTemplatePkWithResponse(ctx context.Context, pk int, body PutApiV1CssTemplatePkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1CssTemplatePkResponse, error)

	// DeleteApiV1Dashboard request
	DeleteApiV1DashboardWithResponse(ctx context.Context, params *DeleteApiV1DashboardParams, reqEditors ...RequestEditorFn) (*DeleteApiV1DashboardResponse, error)

	// GetApiV1Dashboard request
	GetApiV1DashboardWithResponse(ctx context.Context, params *GetApiV1DashboardParams, reqEditors ...RequestEditorFn) (*GetApiV1DashboardResponse, error)

	// PostApiV1Dashboard request with any body
	PostApiV1DashboardWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1DashboardResponse, error)

	PostApiV1DashboardWithResponse(ctx context.Context, body PostApiV1DashboardJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1DashboardResponse, error)

	// GetApiV1DashboardInfo request
	GetApiV1DashboardInfoWithResponse(ctx context.Context, params *GetApiV1DashboardInfoParams, reqEditors ...RequestEditorFn) (*GetApiV1DashboardInfoResponse, error)

	// GetApiV1DashboardExport request
	GetApiV1DashboardExportWithResponse(ctx context.Context, params *GetApiV1DashboardExportParams, reqEditors ...RequestEditorFn) (*GetApiV1DashboardExportResponse, error)

	// GetApiV1DashboardFavoriteStatus request
	GetApiV1DashboardFavoriteStatusWithResponse(ctx context.Context, params *GetApiV1DashboardFavoriteStatusParams, reqEditors ...RequestEditorFn) (*GetApiV1DashboardFavoriteStatusResponse, error)

	// PostApiV1DashboardImport request with any body
	PostApiV1DashboardImportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1DashboardImportResponse, error)

	// GetApiV1DashboardPermalinkKey request
	GetApiV1DashboardPermalinkKeyWithResponse(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*GetApiV1DashboardPermalinkKeyResponse, error)

	// GetApiV1DashboardRelatedColumnName request
	GetApiV1DashboardRelatedColumnNameWithResponse(ctx context.Context, columnName string, params *GetApiV1DashboardRelatedColumnNameParams, reqEditors ...RequestEditorFn) (*GetApiV1DashboardRelatedColumnNameResponse, error)

	// GetApiV1DashboardDashboardIdFiltersets request
	GetApiV1DashboardDashboardIdFiltersetsWithResponse(ctx context.Context, dashboardId int, reqEditors ...RequestEditorFn) (*GetApiV1DashboardDashboardIdFiltersetsResponse, error)

	// PostApiV1DashboardDashboardIdFiltersets request with any body
	PostApiV1DashboardDashboardIdFiltersetsWithBodyWithResponse(ctx context.Context, dashboardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1DashboardDashboardIdFiltersetsResponse, error)

	PostApiV1DashboardDashboardIdFiltersetsWithResponse(ctx context.Context, dashboardId int, body PostApiV1DashboardDashboardIdFiltersetsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1DashboardDashboardIdFiltersetsResponse, error)

	// DeleteApiV1DashboardDashboardIdFiltersetsPk request
	DeleteApiV1DashboardDashboardIdFiltersetsPkWithResponse(ctx context.Context, dashboardId int, pk int, reqEditors ...RequestEditorFn) (*DeleteApiV1DashboardDashboardIdFiltersetsPkResponse, error)

	// PutApiV1DashboardDashboardIdFiltersetsPk request with any body
	PutApiV1DashboardDashboardIdFiltersetsPkWithBodyWithResponse(ctx context.Context, dashboardId int, pk int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1DashboardDashboardIdFiltersetsPkResponse, error)

	PutApiV1DashboardDashboardIdFiltersetsPkWithResponse(ctx context.Context, dashboardId int, pk int, body PutApiV1DashboardDashboardIdFiltersetsPkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1DashboardDashboardIdFiltersetsPkResponse, error)

	// GetApiV1DashboardIdOrSlug request
	GetApiV1DashboardIdOrSlugWithResponse(ctx context.Context, idOrSlug string, reqEditors ...RequestEditorFn) (*GetApiV1DashboardIdOrSlugResponse, error)

	// GetApiV1DashboardIdOrSlugCharts request
	GetApiV1DashboardIdOrSlugChartsWithResponse(ctx context.Context, idOrSlug string, reqEditors ...RequestEditorFn) (*GetApiV1DashboardIdOrSlugChartsResponse, error)

	// GetApiV1DashboardIdOrSlugDatasets request
	GetApiV1DashboardIdOrSlugDatasetsWithResponse(ctx context.Context, idOrSlug string, reqEditors ...RequestEditorFn) (*GetApiV1DashboardIdOrSlugDatasetsResponse, error)

	// DeleteApiV1DashboardIdOrSlugEmbedded request
	DeleteApiV1DashboardIdOrSlugEmbeddedWithResponse(ctx context.Context, idOrSlug string, reqEditors ...RequestEditorFn) (*DeleteApiV1DashboardIdOrSlugEmbeddedResponse, error)

	// GetApiV1DashboardIdOrSlugEmbedded request
	GetApiV1DashboardIdOrSlugEmbeddedWithResponse(ctx context.Context, idOrSlug string, reqEditors ...RequestEditorFn) (*GetApiV1DashboardIdOrSlugEmbeddedResponse, error)

	// PostApiV1DashboardIdOrSlugEmbedded request with any body
	PostApiV1DashboardIdOrSlugEmbeddedWithBodyWithResponse(ctx context.Context, idOrSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1DashboardIdOrSlugEmbeddedResponse, error)

	PostApiV1DashboardIdOrSlugEmbeddedWithResponse(ctx context.Context, idOrSlug string, body PostApiV1DashboardIdOrSlugEmbeddedJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1DashboardIdOrSlugEmbeddedResponse, error)

	// PutApiV1DashboardIdOrSlugEmbedded request with any body
	PutApiV1DashboardIdOrSlugEmbeddedWithBodyWithResponse(ctx context.Context, idOrSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1DashboardIdOrSlugEmbeddedResponse, error)

	PutApiV1DashboardIdOrSlugEmbeddedWithResponse(ctx context.Context, idOrSlug string, body PutApiV1DashboardIdOrSlugEmbeddedJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1DashboardIdOrSlugEmbeddedResponse, error)

	// DeleteApiV1DashboardPk request
	DeleteApiV1DashboardPkWithResponse(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*DeleteApiV1DashboardPkResponse, error)

	// PutApiV1DashboardPk request with any body
	PutApiV1DashboardPkWithBodyWithResponse(ctx context.Context, pk int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1DashboardPkResponse, error)

	PutApiV1DashboardPkWithResponse(ctx context.Context, pk int, body PutApiV1DashboardPkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1DashboardPkResponse, error)

	// PostApiV1DashboardPkFilterState request with any body
	PostApiV1DashboardPkFilterStateWithBodyWithResponse(ctx context.Context, pk int, params *PostApiV1DashboardPkFilterStateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1DashboardPkFilterStateResponse, error)

	PostApiV1DashboardPkFilterStateWithResponse(ctx context.Context, pk int, params *PostApiV1DashboardPkFilterStateParams, body PostApiV1DashboardPkFilterStateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1DashboardPkFilterStateResponse, error)

	// DeleteApiV1DashboardPkFilterStateKey request
	DeleteApiV1DashboardPkFilterStateKeyWithResponse(ctx context.Context, pk int, key string, reqEditors ...RequestEditorFn) (*DeleteApiV1DashboardPkFilterStateKeyResponse, error)

	// GetApiV1DashboardPkFilterStateKey request
	GetApiV1DashboardPkFilterStateKeyWithResponse(ctx context.Context, pk int, key string, reqEditors ...RequestEditorFn) (*GetApiV1DashboardPkFilterStateKeyResponse, error)

	// PutApiV1DashboardPkFilterStateKey request with any body
	PutApiV1DashboardPkFilterStateKeyWithBodyWithResponse(ctx context.Context, pk int, key string, params *PutApiV1DashboardPkFilterStateKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1DashboardPkFilterStateKeyResponse, error)

	PutApiV1DashboardPkFilterStateKeyWithResponse(ctx context.Context, pk int, key string, params *PutApiV1DashboardPkFilterStateKeyParams, body PutApiV1DashboardPkFilterStateKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1DashboardPkFilterStateKeyResponse, error)

	// PostApiV1DashboardPkPermalink request with any body
	PostApiV1DashboardPkPermalinkWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1DashboardPkPermalinkResponse, error)

	PostApiV1DashboardPkPermalinkWithResponse(ctx context.Context, pk string, body PostApiV1DashboardPkPermalinkJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1DashboardPkPermalinkResponse, error)

	// GetApiV1DashboardPkThumbnailDigest request
	GetApiV1DashboardPkThumbnailDigestWithResponse(ctx context.Context, pk int, digest string, params *GetApiV1DashboardPkThumbnailDigestParams, reqEditors ...RequestEditorFn) (*GetApiV1DashboardPkThumbnailDigestResponse, error)

	// GetApiV1Database request
	GetApiV1DatabaseWithResponse(ctx context.Context, params *GetApiV1DatabaseParams, reqEditors ...RequestEditorFn) (*GetApiV1DatabaseResponse, error)

	// PostApiV1Database request with any body
	PostApiV1DatabaseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1DatabaseResponse, error)

	PostApiV1DatabaseWithResponse(ctx context.Context, body PostApiV1DatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1DatabaseResponse, error)

	// GetApiV1DatabaseInfo request
	GetApiV1DatabaseInfoWithResponse(ctx context.Context, params *GetApiV1DatabaseInfoParams, reqEditors ...RequestEditorFn) (*GetApiV1DatabaseInfoResponse, error)

	// GetApiV1DatabaseAvailable request
	GetApiV1DatabaseAvailableWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1DatabaseAvailableResponse, error)

	// GetApiV1DatabaseExport request
	GetApiV1DatabaseExportWithResponse(ctx context.Context, params *GetApiV1DatabaseExportParams, reqEditors ...RequestEditorFn) (*GetApiV1DatabaseExportResponse, error)

	// PostApiV1DatabaseImport request with any body
	PostApiV1DatabaseImportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1DatabaseImportResponse, error)

	// PostApiV1DatabaseTestConnection request with any body
	PostApiV1DatabaseTestConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1DatabaseTestConnectionResponse, error)

	PostApiV1DatabaseTestConnectionWithResponse(ctx context.Context, body PostApiV1DatabaseTestConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1DatabaseTestConnectionResponse, error)

	// PostApiV1DatabaseValidateParameters request with any body
	PostApiV1DatabaseValidateParametersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1DatabaseValidateParametersResponse, error)

	PostApiV1DatabaseValidateParametersWithResponse(ctx context.Context, body PostApiV1DatabaseValidateParametersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1DatabaseValidateParametersResponse, error)

	// DeleteApiV1DatabasePk request
	DeleteApiV1DatabasePkWithResponse(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*DeleteApiV1DatabasePkResponse, error)

	// GetApiV1DatabasePk request
	GetApiV1DatabasePkWithResponse(ctx context.Context, pk int, params *GetApiV1DatabasePkParams, reqEditors ...RequestEditorFn) (*GetApiV1DatabasePkResponse, error)

	// PutApiV1DatabasePk request with any body
	PutApiV1DatabasePkWithBodyWithResponse(ctx context.Context, pk int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1DatabasePkResponse, error)

	PutApiV1DatabasePkWithResponse(ctx context.Context, pk int, body PutApiV1DatabasePkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1DatabasePkResponse, error)

	// GetApiV1DatabasePkFunctionNames request
	GetApiV1DatabasePkFunctionNamesWithResponse(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*GetApiV1DatabasePkFunctionNamesResponse, error)

	// GetApiV1DatabasePkRelatedObjects request
	GetApiV1DatabasePkRelatedObjectsWithResponse(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*GetApiV1DatabasePkRelatedObjectsResponse, error)

	// GetApiV1DatabasePkSchemas request
	GetApiV1DatabasePkSchemasWithResponse(ctx context.Context, pk int, params *GetApiV1DatabasePkSchemasParams, reqEditors ...RequestEditorFn) (*GetApiV1DatabasePkSchemasResponse, error)

	// GetApiV1DatabasePkSelectStarTableName request
	GetApiV1DatabasePkSelectStarTableNameWithResponse(ctx context.Context, pk int, tableName string, reqEditors ...RequestEditorFn) (*GetApiV1DatabasePkSelectStarTableNameResponse, error)

	// GetApiV1DatabasePkSelectStarTableNameSchemaName request
	GetApiV1DatabasePkSelectStarTableNameSchemaNameWithResponse(ctx context.Context, pk int, tableName string, schemaName string, reqEditors ...RequestEditorFn) (*GetApiV1DatabasePkSelectStarTableNameSchemaNameResponse, error)

	// GetApiV1DatabasePkTableTableNameSchemaName request
	GetApiV1DatabasePkTableTableNameSchemaNameWithResponse(ctx context.Context, pk int, tableName string, schemaName string, reqEditors ...RequestEditorFn) (*GetApiV1DatabasePkTableTableNameSchemaNameResponse, error)

	// GetApiV1DatabasePkTableExtraTableNameSchemaName request
	GetApiV1DatabasePkTableExtraTableNameSchemaNameWithResponse(ctx context.Context, pk int, tableName string, schemaName string, reqEditors ...RequestEditorFn) (*GetApiV1DatabasePkTableExtraTableNameSchemaNameResponse, error)

	// PostApiV1DatabasePkValidateSql request with any body
	PostApiV1DatabasePkValidateSqlWithBodyWithResponse(ctx context.Context, pk int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1DatabasePkValidateSqlResponse, error)

	PostApiV1DatabasePkValidateSqlWithResponse(ctx context.Context, pk int, body PostApiV1DatabasePkValidateSqlJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1DatabasePkValidateSqlResponse, error)

	// DeleteApiV1Dataset request
	DeleteApiV1DatasetWithResponse(ctx context.Context, params *DeleteApiV1DatasetParams, reqEditors ...RequestEditorFn) (*DeleteApiV1DatasetResponse, error)

	// GetApiV1Dataset request
	GetApiV1DatasetWithResponse(ctx context.Context, params *GetApiV1DatasetParams, reqEditors ...RequestEditorFn) (*GetApiV1DatasetResponse, error)

	// PostApiV1Dataset request with any body
	PostApiV1DatasetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1DatasetResponse, error)

	PostApiV1DatasetWithResponse(ctx context.Context, body PostApiV1DatasetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1DatasetResponse, error)

	// GetApiV1DatasetInfo request
	GetApiV1DatasetInfoWithResponse(ctx context.Context, params *GetApiV1DatasetInfoParams, reqEditors ...RequestEditorFn) (*GetApiV1DatasetInfoResponse, error)

	// GetApiV1DatasetDistinctColumnName request
	GetApiV1DatasetDistinctColumnNameWithResponse(ctx context.Context, columnName string, params *GetApiV1DatasetDistinctColumnNameParams, reqEditors ...RequestEditorFn) (*GetApiV1DatasetDistinctColumnNameResponse, error)

	// PostApiV1DatasetDuplicate request with any body
	PostApiV1DatasetDuplicateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1DatasetDuplicateResponse, error)

	PostApiV1DatasetDuplicateWithResponse(ctx context.Context, body PostApiV1DatasetDuplicateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1DatasetDuplicateResponse, error)

	// GetApiV1DatasetExport request
	GetApiV1DatasetExportWithResponse(ctx context.Context, params *GetApiV1DatasetExportParams, reqEditors ...RequestEditorFn) (*GetApiV1DatasetExportResponse, error)

	// PostApiV1DatasetImport request with any body
	PostApiV1DatasetImportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1DatasetImportResponse, error)

	// GetApiV1DatasetRelatedColumnName request
	GetApiV1DatasetRelatedColumnNameWithResponse(ctx context.Context, columnName string, params *GetApiV1DatasetRelatedColumnNameParams, reqEditors ...RequestEditorFn) (*GetApiV1DatasetRelatedColumnNameResponse, error)

	// DeleteApiV1DatasetPk request
	DeleteApiV1DatasetPkWithResponse(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*DeleteApiV1DatasetPkResponse, error)

	// GetApiV1DatasetPk request
	GetApiV1DatasetPkWithResponse(ctx context.Context, pk int, params *GetApiV1DatasetPkParams, reqEditors ...RequestEditorFn) (*GetApiV1DatasetPkResponse, error)

	// PutApiV1DatasetPk request with any body
	PutApiV1DatasetPkWithBodyWithResponse(ctx context.Context, pk int, params *PutApiV1DatasetPkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1DatasetPkResponse, error)

	PutApiV1DatasetPkWithResponse(ctx context.Context, pk int, params *PutApiV1DatasetPkParams, body PutApiV1DatasetPkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1DatasetPkResponse, error)

	// DeleteApiV1DatasetPkColumnColumnId request
	DeleteApiV1DatasetPkColumnColumnIdWithResponse(ctx context.Context, pk int, columnId int, reqEditors ...RequestEditorFn) (*DeleteApiV1DatasetPkColumnColumnIdResponse, error)

	// DeleteApiV1DatasetPkMetricMetricId request
	DeleteApiV1DatasetPkMetricMetricIdWithResponse(ctx context.Context, pk int, metricId int, reqEditors ...RequestEditorFn) (*DeleteApiV1DatasetPkMetricMetricIdResponse, error)

	// PutApiV1DatasetPkRefresh request
	PutApiV1DatasetPkRefreshWithResponse(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*PutApiV1DatasetPkRefreshResponse, error)

	// GetApiV1DatasetPkRelatedObjects request
	GetApiV1DatasetPkRelatedObjectsWithResponse(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*GetApiV1DatasetPkRelatedObjectsResponse, error)

	// GetApiV1EmbeddedDashboardUuid request
	GetApiV1EmbeddedDashboardUuidWithResponse(ctx context.Context, uuid string, reqEditors ...RequestEditorFn) (*GetApiV1EmbeddedDashboardUuidResponse, error)

	// GetApiV1Explore request
	GetApiV1ExploreWithResponse(ctx context.Context, params *GetApiV1ExploreParams, reqEditors ...RequestEditorFn) (*GetApiV1ExploreResponse, error)

	// PostApiV1ExploreFormData request with any body
	PostApiV1ExploreFormDataWithBodyWithResponse(ctx context.Context, params *PostApiV1ExploreFormDataParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1ExploreFormDataResponse, error)

	PostApiV1ExploreFormDataWithResponse(ctx context.Context, params *PostApiV1ExploreFormDataParams, body PostApiV1ExploreFormDataJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1ExploreFormDataResponse, error)

	// DeleteApiV1ExploreFormDataKey request
	DeleteApiV1ExploreFormDataKeyWithResponse(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*DeleteApiV1ExploreFormDataKeyResponse, error)

	// GetApiV1ExploreFormDataKey request
	GetApiV1ExploreFormDataKeyWithResponse(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*GetApiV1ExploreFormDataKeyResponse, error)

	// PutApiV1ExploreFormDataKey request with any body
	PutApiV1ExploreFormDataKeyWithBodyWithResponse(ctx context.Context, key string, params *PutApiV1ExploreFormDataKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1ExploreFormDataKeyResponse, error)

	PutApiV1ExploreFormDataKeyWithResponse(ctx context.Context, key string, params *PutApiV1ExploreFormDataKeyParams, body PutApiV1ExploreFormDataKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1ExploreFormDataKeyResponse, error)

	// PostApiV1ExplorePermalink request with any body
	PostApiV1ExplorePermalinkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1ExplorePermalinkResponse, error)

	PostApiV1ExplorePermalinkWithResponse(ctx context.Context, body PostApiV1ExplorePermalinkJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1ExplorePermalinkResponse, error)

	// GetApiV1ExplorePermalinkKey request
	GetApiV1ExplorePermalinkKeyWithResponse(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*GetApiV1ExplorePermalinkKeyResponse, error)

	// GetApiV1Log request
	GetApiV1LogWithResponse(ctx context.Context, params *GetApiV1LogParams, reqEditors ...RequestEditorFn) (*GetApiV1LogResponse, error)

	// PostApiV1Log request with any body
	PostApiV1LogWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1LogResponse, error)

	PostApiV1LogWithResponse(ctx context.Context, body PostApiV1LogJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1LogResponse, error)

	// GetApiV1LogPk request
	GetApiV1LogPkWithResponse(ctx context.Context, pk int, params *GetApiV1LogPkParams, reqEditors ...RequestEditorFn) (*GetApiV1LogPkResponse, error)

	// GetApiV1Me request
	GetApiV1MeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1MeResponse, error)

	// GetApiV1MeRoles request
	GetApiV1MeRolesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1MeRolesResponse, error)

	// GetApiV1Menu request
	GetApiV1MenuWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1MenuResponse, error)

	// GetApiV1Query request
	GetApiV1QueryWithResponse(ctx context.Context, params *GetApiV1QueryParams, reqEditors ...RequestEditorFn) (*GetApiV1QueryResponse, error)

	// GetApiV1QueryDistinctColumnName request
	GetApiV1QueryDistinctColumnNameWithResponse(ctx context.Context, columnName string, params *GetApiV1QueryDistinctColumnNameParams, reqEditors ...RequestEditorFn) (*GetApiV1QueryDistinctColumnNameResponse, error)

	// GetApiV1QueryRelatedColumnName request
	GetApiV1QueryRelatedColumnNameWithResponse(ctx context.Context, columnName string, params *GetApiV1QueryRelatedColumnNameParams, reqEditors ...RequestEditorFn) (*GetApiV1QueryRelatedColumnNameResponse, error)

	// GetApiV1QueryPk request
	GetApiV1QueryPkWithResponse(ctx context.Context, pk int, params *GetApiV1QueryPkParams, reqEditors ...RequestEditorFn) (*GetApiV1QueryPkResponse, error)

	// DeleteApiV1Report request
	DeleteApiV1ReportWithResponse(ctx context.Context, params *DeleteApiV1ReportParams, reqEditors ...RequestEditorFn) (*DeleteApiV1ReportResponse, error)

	// GetApiV1Report request
	GetApiV1ReportWithResponse(ctx context.Context, params *GetApiV1ReportParams, reqEditors ...RequestEditorFn) (*GetApiV1ReportResponse, error)

	// PostApiV1Report request with any body
	PostApiV1ReportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1ReportResponse, error)

	PostApiV1ReportWithResponse(ctx context.Context, body PostApiV1ReportJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1ReportResponse, error)

	// GetApiV1ReportInfo request
	GetApiV1ReportInfoWithResponse(ctx context.Context, params *GetApiV1ReportInfoParams, reqEditors ...RequestEditorFn) (*GetApiV1ReportInfoResponse, error)

	// GetApiV1ReportRelatedColumnName request
	GetApiV1ReportRelatedColumnNameWithResponse(ctx context.Context, columnName string, params *GetApiV1ReportRelatedColumnNameParams, reqEditors ...RequestEditorFn) (*GetApiV1ReportRelatedColumnNameResponse, error)

	// DeleteApiV1ReportPk request
	DeleteApiV1ReportPkWithResponse(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*DeleteApiV1ReportPkResponse, error)

	// GetApiV1ReportPk request
	GetApiV1ReportPkWithResponse(ctx context.Context, pk int, params *GetApiV1ReportPkParams, reqEditors ...RequestEditorFn) (*GetApiV1ReportPkResponse, error)

	// PutApiV1ReportPk request with any body
	PutApiV1ReportPkWithBodyWithResponse(ctx context.Context, pk int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1ReportPkResponse, error)

	PutApiV1ReportPkWithResponse(ctx context.Context, pk int, body PutApiV1ReportPkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1ReportPkResponse, error)

	// GetApiV1ReportPkLog request
	GetApiV1ReportPkLogWithResponse(ctx context.Context, pk int, params *GetApiV1ReportPkLogParams, reqEditors ...RequestEditorFn) (*GetApiV1ReportPkLogResponse, error)

	// GetApiV1ReportPkLogLogId request
	GetApiV1ReportPkLogLogIdWithResponse(ctx context.Context, pk int, logId int, params *GetApiV1ReportPkLogLogIdParams, reqEditors ...RequestEditorFn) (*GetApiV1ReportPkLogLogIdResponse, error)

	// DeleteApiV1SavedQuery request
	DeleteApiV1SavedQueryWithResponse(ctx context.Context, params *DeleteApiV1SavedQueryParams, reqEditors ...RequestEditorFn) (*DeleteApiV1SavedQueryResponse, error)

	// GetApiV1SavedQuery request
	GetApiV1SavedQueryWithResponse(ctx context.Context, params *GetApiV1SavedQueryParams, reqEditors ...RequestEditorFn) (*GetApiV1SavedQueryResponse, error)

	// PostApiV1SavedQuery request with any body
	PostApiV1SavedQueryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1SavedQueryResponse, error)

	PostApiV1SavedQueryWithResponse(ctx context.Context, body PostApiV1SavedQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1SavedQueryResponse, error)

	// GetApiV1SavedQueryInfo request
	GetApiV1SavedQueryInfoWithResponse(ctx context.Context, params *GetApiV1SavedQueryInfoParams, reqEditors ...RequestEditorFn) (*GetApiV1SavedQueryInfoResponse, error)

	// GetApiV1SavedQueryDistinctColumnName request
	GetApiV1SavedQueryDistinctColumnNameWithResponse(ctx context.Context, columnName string, params *GetApiV1SavedQueryDistinctColumnNameParams, reqEditors ...RequestEditorFn) (*GetApiV1SavedQueryDistinctColumnNameResponse, error)

	// GetApiV1SavedQueryExport request
	GetApiV1SavedQueryExportWithResponse(ctx context.Context, params *GetApiV1SavedQueryExportParams, reqEditors ...RequestEditorFn) (*GetApiV1SavedQueryExportResponse, error)

	// PostApiV1SavedQueryImport request with any body
	PostApiV1SavedQueryImportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1SavedQueryImportResponse, error)

	// GetApiV1SavedQueryRelatedColumnName request
	GetApiV1SavedQueryRelatedColumnNameWithResponse(ctx context.Context, columnName string, params *GetApiV1SavedQueryRelatedColumnNameParams, reqEditors ...RequestEditorFn) (*GetApiV1SavedQueryRelatedColumnNameResponse, error)

	// DeleteApiV1SavedQueryPk request
	DeleteApiV1SavedQueryPkWithResponse(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*DeleteApiV1SavedQueryPkResponse, error)

	// GetApiV1SavedQueryPk request
	GetApiV1SavedQueryPkWithResponse(ctx context.Context, pk int, params *GetApiV1SavedQueryPkParams, reqEditors ...RequestEditorFn) (*GetApiV1SavedQueryPkResponse, error)

	// PutApiV1SavedQueryPk request with any body
	PutApiV1SavedQueryPkWithBodyWithResponse(ctx context.Context, pk int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1SavedQueryPkResponse, error)

	PutApiV1SavedQueryPkWithResponse(ctx context.Context, pk int, body PutApiV1SavedQueryPkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1SavedQueryPkResponse, error)

	// GetApiV1SecurityCsrfToken request
	GetApiV1SecurityCsrfTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1SecurityCsrfTokenResponse, error)

	// PostApiV1SecurityGuestToken request with any body
	PostApiV1SecurityGuestTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1SecurityGuestTokenResponse, error)

	PostApiV1SecurityGuestTokenWithResponse(ctx context.Context, body PostApiV1SecurityGuestTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1SecurityGuestTokenResponse, error)

	// PostApiV1SecurityLogin request with any body
	PostApiV1SecurityLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1SecurityLoginResponse, error)

	PostApiV1SecurityLoginWithResponse(ctx context.Context, body PostApiV1SecurityLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1SecurityLoginResponse, error)

	// PostApiV1SecurityRefresh request
	PostApiV1SecurityRefreshWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV1SecurityRefreshResponse, error)

	// GetApiVersionOpenapi request
	GetApiVersionOpenapiWithResponse(ctx context.Context, version string, reqEditors ...RequestEditorFn) (*GetApiVersionOpenapiResponse, error)

	// PostSupersetSqllabViz request with any body
	PostSupersetSqllabVizWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSupersetSqllabVizResponse, error)
}

type GetApiV1AdvancedDataTypeConvertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdvancedDataTypeSchema
	JSON400      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1AdvancedDataTypeConvertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1AdvancedDataTypeConvertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1AdvancedDataTypeTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Result *[]string `json:"result,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1AdvancedDataTypeTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1AdvancedDataTypeTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1AnnotationLayerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1AnnotationLayerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1AnnotationLayerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1AnnotationLayerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// The total record count on the backend
		Count              *float32 `json:"count,omitempty"`
		DescriptionColumns *struct {
			// The description for the column name. Will be translated by babel
			ColumnName *string `json:"column_name,omitempty"`
		} `json:"description_columns,omitempty"`

		// A list of item ids, useful when you don't know the column id
		Ids          *[]string `json:"ids,omitempty"`
		LabelColumns *struct {
			// The label for the column name. Will be translated by babel
			ColumnName *string `json:"column_name,omitempty"`
		} `json:"label_columns,omitempty"`

		// A list of columns
		ListColumns *[]string `json:"list_columns,omitempty"`

		// A title to render. Will be translated by babel
		ListTitle *string `json:"list_title,omitempty"`

		// A list of allowed columns to sort
		OrderColumns *[]string `json:"order_columns,omitempty"`

		// The result from the get list query
		Result *[]AnnotationLayerRestApiGetList `json:"result,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1AnnotationLayerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1AnnotationLayerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1AnnotationLayerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Id     *float32                    `json:"id,omitempty"`
		Result *AnnotationLayerRestApiPost `json:"result,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1AnnotationLayerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1AnnotationLayerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1AnnotationLayerInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AddColumns  *map[string]interface{} `json:"add_columns,omitempty"`
		EditColumns *map[string]interface{} `json:"edit_columns,omitempty"`
		Filters     *struct {
			ColumnName *[]struct {
				// The filter name. Will be translated by babel
				Name *string `json:"name,omitempty"`

				// The filter operation key to use on list filters
				Operator *string `json:"operator,omitempty"`
			} `json:"column_name,omitempty"`
		} `json:"filters,omitempty"`

		// The user permissions for this API resource
		Permissions *[]string `json:"permissions,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1AnnotationLayerInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1AnnotationLayerInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1AnnotationLayerRelatedColumnNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RelatedResponseSchema
	JSON400      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1AnnotationLayerRelatedColumnNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1AnnotationLayerRelatedColumnNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1AnnotationLayerPkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1AnnotationLayerPkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1AnnotationLayerPkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1AnnotationLayerPkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		DescriptionColumns *struct {
			// The description for the column name. Will be translated by babel
			ColumnName *string `json:"column_name,omitempty"`
		} `json:"description_columns,omitempty"`

		// The item id
		Id           *string `json:"id,omitempty"`
		LabelColumns *struct {
			// The label for the column name. Will be translated by babel
			ColumnName *string `json:"column_name,omitempty"`
		} `json:"label_columns,omitempty"`
		Result *AnnotationLayerRestApiGet `json:"result,omitempty"`

		// A list of columns
		ShowColumns *[]string `json:"show_columns,omitempty"`

		// A title to render. Will be translated by babel
		ShowTitle *string `json:"show_title,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1AnnotationLayerPkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1AnnotationLayerPkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1AnnotationLayerPkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id     *float32                   `json:"id,omitempty"`
		Result *AnnotationLayerRestApiPut `json:"result,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PutApiV1AnnotationLayerPkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1AnnotationLayerPkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1AnnotationLayerPkAnnotationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1AnnotationLayerPkAnnotationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1AnnotationLayerPkAnnotationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1AnnotationLayerPkAnnotationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// The total record count on the backend
		Count *float32 `json:"count,omitempty"`

		// A list of annotation ids
		Ids *[]string `json:"ids,omitempty"`

		// The result from the get list query
		Result *[]AnnotationRestApiGetList `json:"result,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1AnnotationLayerPkAnnotationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1AnnotationLayerPkAnnotationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1AnnotationLayerPkAnnotationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Id     *float32               `json:"id,omitempty"`
		Result *AnnotationRestApiPost `json:"result,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1AnnotationLayerPkAnnotationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1AnnotationLayerPkAnnotationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1AnnotationLayerPkAnnotationAnnotationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1AnnotationLayerPkAnnotationAnnotationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1AnnotationLayerPkAnnotationAnnotationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1AnnotationLayerPkAnnotationAnnotationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// The item id
		Id     *string               `json:"id,omitempty"`
		Result *AnnotationRestApiGet `json:"result,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1AnnotationLayerPkAnnotationAnnotationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1AnnotationLayerPkAnnotationAnnotationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1AnnotationLayerPkAnnotationAnnotationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id     *float32              `json:"id,omitempty"`
		Result *AnnotationRestApiPut `json:"result,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PutApiV1AnnotationLayerPkAnnotationAnnotationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1AnnotationLayerPkAnnotationAnnotationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1AssetsExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1AssetsExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1AssetsExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1AssetsImportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1AssetsImportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1AssetsImportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1AsyncEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Result *[]struct {
			ChannelId *string                   `json:"channel_id,omitempty"`
			Errors    *[]map[string]interface{} `json:"errors,omitempty"`
			Id        *string                   `json:"id,omitempty"`
			JobId     *string                   `json:"job_id,omitempty"`
			ResultUrl *string                   `json:"result_url,omitempty"`
			Status    *string                   `json:"status,omitempty"`
			UserId    *int                      `json:"user_id,omitempty"`
		} `json:"result,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1AsyncEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1AsyncEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1AvailableDomainsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Result *AvailableDomainsSchema `json:"result,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1AvailableDomainsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1AvailableDomainsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1CachekeyInvalidateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1CachekeyInvalidateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1CachekeyInvalidateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1ChartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1ChartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1ChartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1ChartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// The total record count on the backend
		Count              *float32 `json:"count,omitempty"`
		DescriptionColumns *struct {
			// The description for the column name. Will be translated by babel
			ColumnName *string `json:"column_name,omitempty"`
		} `json:"description_columns,omitempty"`

		// A list of item ids, useful when you don't know the column id
		Ids          *[]int32 `json:"ids,omitempty"`
		LabelColumns *struct {
			// The label for the column name. Will be translated by babel
			ColumnName *string `json:"column_name,omitempty"`
		} `json:"label_columns,omitempty"`

		// A list of columns
		ListColumns *[]string `json:"list_columns,omitempty"`

		// A title to render. Will be translated by babel
		ListTitle *string `json:"list_title,omitempty"`

		// A list of allowed columns to sort
		OrderColumns *[]string `json:"order_columns,omitempty"`

		// The result from the get list query
		Result *[]ChartRestApiGetList `json:"result,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1ChartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ChartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1ChartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Id     *float32          `json:"id,omitempty"`
		Result *ChartRestApiPost `json:"result,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1ChartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1ChartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1ChartInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AddColumns  *map[string]interface{} `json:"add_columns,omitempty"`
		EditColumns *map[string]interface{} `json:"edit_columns,omitempty"`
		Filters     *struct {
			ColumnName *[]struct {
				// The filter name. Will be translated by babel
				Name *string `json:"name,omitempty"`

				// The filter operation key to use on list filters
				Operator *string `json:"operator,omitempty"`
			} `json:"column_name,omitempty"`
		} `json:"filters,omitempty"`

		// The user permissions for this API resource
		Permissions *[]string `json:"permissions,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1ChartInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ChartInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1ChartDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChartDataResponseSchema
	JSON202      *ChartDataAsyncResponseSchema
	JSON400      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1ChartDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1ChartDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1ChartDataCacheKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChartDataResponseSchema
	JSON400      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1ChartDataCacheKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ChartDataCacheKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1ChartExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1ChartExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ChartExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1ChartFavoriteStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetFavStarIdsSchema
	JSON400      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1ChartFavoriteStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ChartFavoriteStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1ChartImportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1ChartImportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1ChartImportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1ChartRelatedColumnNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RelatedResponseSchema
	JSON400      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1ChartRelatedColumnNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ChartRelatedColumnNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1ChartPkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1ChartPkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1ChartPkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1ChartPkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		DescriptionColumns *struct {
			// The description for the column name. Will be translated by babel
			ColumnName *string `json:"column_name,omitempty"`
		} `json:"description_columns,omitempty"`

		// The item id
		Id           *int32 `json:"id,omitempty"`
		LabelColumns *struct {
			// The label for the column name. Will be translated by babel
			ColumnName *string `json:"column_name,omitempty"`
		} `json:"label_columns,omitempty"`
		Result *ChartRestApiGet `json:"result,omitempty"`

		// A list of columns
		ShowColumns *[]string `json:"show_columns,omitempty"`

		// A title to render. Will be translated by babel
		ShowTitle *string `json:"show_title,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1ChartPkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ChartPkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1ChartPkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id     *float32         `json:"id,omitempty"`
		Result *ChartRestApiPut `json:"result,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PutApiV1ChartPkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1ChartPkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1ChartPkCacheScreenshotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *ChartCacheScreenshotResponseSchema
	JSON400      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1ChartPkCacheScreenshotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ChartPkCacheScreenshotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1ChartPkDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChartDataResponseSchema
	JSON202      *ChartDataAsyncResponseSchema
	JSON400      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1ChartPkDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ChartPkDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1ChartPkScreenshotDigestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1ChartPkScreenshotDigestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ChartPkScreenshotDigestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1ChartPkThumbnailDigestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1ChartPkThumbnailDigestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ChartPkThumbnailDigestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1CssTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1CssTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1CssTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1CssTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// The total record count on the backend
		Count              *float32 `json:"count,omitempty"`
		DescriptionColumns *struct {
			// The description for the column name. Will be translated by babel
			ColumnName *string `json:"column_name,omitempty"`
		} `json:"description_columns,omitempty"`

		// A list of item ids, useful when you don't know the column id
		Ids          *[]string `json:"ids,omitempty"`
		LabelColumns *struct {
			// The label for the column name. Will be translated by babel
			ColumnName *string `json:"column_name,omitempty"`
		} `json:"label_columns,omitempty"`

		// A list of columns
		ListColumns *[]string `json:"list_columns,omitempty"`

		// A title to render. Will be translated by babel
		ListTitle *string `json:"list_title,omitempty"`

		// A list of allowed columns to sort
		OrderColumns *[]string `json:"order_columns,omitempty"`

		// The result from the get list query
		Result *[]CssTemplateRestApiGetList `json:"result,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1CssTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1CssTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1CssTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Id     *string                 `json:"id,omitempty"`
		Result *CssTemplateRestApiPost `json:"result,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1CssTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1CssTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1CssTemplateInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AddColumns  *map[string]interface{} `json:"add_columns,omitempty"`
		EditColumns *map[string]interface{} `json:"edit_columns,omitempty"`
		Filters     *struct {
			ColumnName *[]struct {
				// The filter name. Will be translated by babel
				Name *string `json:"name,omitempty"`

				// The filter operation key to use on list filters
				Operator *string `json:"operator,omitempty"`
			} `json:"column_name,omitempty"`
		} `json:"filters,omitempty"`

		// The user permissions for this API resource
		Permissions *[]string `json:"permissions,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1CssTemplateInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1CssTemplateInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1CssTemplateRelatedColumnNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RelatedResponseSchema
	JSON400      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1CssTemplateRelatedColumnNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1CssTemplateRelatedColumnNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1CssTemplatePkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1CssTemplatePkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1CssTemplatePkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1CssTemplatePkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		DescriptionColumns *struct {
			// The description for the column name. Will be translated by babel
			ColumnName *string `json:"column_name,omitempty"`
		} `json:"description_columns,omitempty"`

		// The item id
		Id           *string `json:"id,omitempty"`
		LabelColumns *struct {
			// The label for the column name. Will be translated by babel
			ColumnName *string `json:"column_name,omitempty"`
		} `json:"label_columns,omitempty"`
		Result *CssTemplateRestApiGet `json:"result,omitempty"`

		// A list of columns
		ShowColumns *[]string `json:"show_columns,omitempty"`

		// A title to render. Will be translated by babel
		ShowTitle *string `json:"show_title,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1CssTemplatePkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1CssTemplatePkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1CssTemplatePkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Result *CssTemplateRestApiPut `json:"result,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PutApiV1CssTemplatePkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1CssTemplatePkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1DashboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1DashboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1DashboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1DashboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// The total record count on the backend
		Count              *float32 `json:"count,omitempty"`
		DescriptionColumns *struct {
			// The description for the column name. Will be translated by babel
			ColumnName *string `json:"column_name,omitempty"`
		} `json:"description_columns,omitempty"`

		// A list of item ids, useful when you don't know the column id
		Ids          *[]string `json:"ids,omitempty"`
		LabelColumns *struct {
			// The label for the column name. Will be translated by babel
			ColumnName *string `json:"column_name,omitempty"`
		} `json:"label_columns,omitempty"`

		// A list of columns
		ListColumns *[]string `json:"list_columns,omitempty"`

		// A title to render. Will be translated by babel
		ListTitle *string `json:"list_title,omitempty"`

		// A list of allowed columns to sort
		OrderColumns *[]string `json:"order_columns,omitempty"`

		// The result from the get list query
		Result *[]DashboardRestApiGetList `json:"result,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1DashboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1DashboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1DashboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Id     *float32              `json:"id,omitempty"`
		Result *DashboardRestApiPost `json:"result,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1DashboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1DashboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1DashboardInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AddColumns  *map[string]interface{} `json:"add_columns,omitempty"`
		EditColumns *map[string]interface{} `json:"edit_columns,omitempty"`
		Filters     *struct {
			ColumnName *[]struct {
				// The filter name. Will be translated by babel
				Name *string `json:"name,omitempty"`

				// The filter operation key to use on list filters
				Operator *string `json:"operator,omitempty"`
			} `json:"column_name,omitempty"`
		} `json:"filters,omitempty"`

		// The user permissions for this API resource
		Permissions *[]string `json:"permissions,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1DashboardInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1DashboardInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1DashboardExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1DashboardExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1DashboardExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1DashboardFavoriteStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetFavStarIdsSchema
	JSON400      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1DashboardFavoriteStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1DashboardFavoriteStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1DashboardImportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1DashboardImportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1DashboardImportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1DashboardPermalinkKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// The stored state
		State *map[string]interface{} `json:"state,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1DashboardPermalinkKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1DashboardPermalinkKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1DashboardRelatedColumnNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RelatedResponseSchema
	JSON400      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1DashboardRelatedColumnNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1DashboardRelatedColumnNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1DashboardDashboardIdFiltersetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		// A description field of the filter set
		Description *string `json:"description,omitempty"`

		// metadata of the filter set
		JsonMetadata *string `json:"json_metadata,omitempty"`

		// Name of the Filter set
		Name *string `json:"name,omitempty"`

		// A description field of the filter set
		OwnerId *int `json:"owner_id,omitempty"`

		// the Type of the owner ( Dashboard/User)
		OwnerType *int `json:"owner_type,omitempty"`

		// JSON schema defining the needed parameters
		Parameters *interface{} `json:"parameters,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1DashboardDashboardIdFiltersetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1DashboardDashboardIdFiltersetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1DashboardDashboardIdFiltersetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Id     *float32              `json:"id,omitempty"`
		Result *FilterSetRestApiPost `json:"result,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1DashboardDashboardIdFiltersetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1DashboardDashboardIdFiltersetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1DashboardDashboardIdFiltersetsPkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1DashboardDashboardIdFiltersetsPkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1DashboardDashboardIdFiltersetsPkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1DashboardDashboardIdFiltersetsPkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id     *float32             `json:"id,omitempty"`
		Result *FilterSetRestApiPut `json:"result,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PutApiV1DashboardDashboardIdFiltersetsPkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1DashboardDashboardIdFiltersetsPkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1DashboardIdOrSlugResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Result *DashboardGetResponseSchema `json:"result,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1DashboardIdOrSlugResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1DashboardIdOrSlugResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1DashboardIdOrSlugChartsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Result *[]ChartEntityResponseSchema `json:"result,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1DashboardIdOrSlugChartsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1DashboardIdOrSlugChartsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1DashboardIdOrSlugDatasetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Result *[]DashboardDatasetSchema `json:"result,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1DashboardIdOrSlugDatasetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1DashboardIdOrSlugDatasetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1DashboardIdOrSlugEmbeddedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1DashboardIdOrSlugEmbeddedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1DashboardIdOrSlugEmbeddedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1DashboardIdOrSlugEmbeddedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Result *EmbeddedDashboardResponseSchema `json:"result,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1DashboardIdOrSlugEmbeddedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1DashboardIdOrSlugEmbeddedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1DashboardIdOrSlugEmbeddedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Result *EmbeddedDashboardResponseSchema `json:"result,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1DashboardIdOrSlugEmbeddedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1DashboardIdOrSlugEmbeddedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1DashboardIdOrSlugEmbeddedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Result *EmbeddedDashboardResponseSchema `json:"result,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PutApiV1DashboardIdOrSlugEmbeddedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1DashboardIdOrSlugEmbeddedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1DashboardPkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1DashboardPkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1DashboardPkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1DashboardPkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id               *float32             `json:"id,omitempty"`
		LastModifiedTime *float32             `json:"last_modified_time,omitempty"`
		Result           *DashboardRestApiPut `json:"result,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PutApiV1DashboardPkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1DashboardPkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1DashboardPkFilterStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		// The key to retrieve the value.
		Key *string `json:"key,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1DashboardPkFilterStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1DashboardPkFilterStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1DashboardPkFilterStateKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// The result of the operation
		Message *string `json:"message,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1DashboardPkFilterStateKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1DashboardPkFilterStateKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1DashboardPkFilterStateKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// The stored value
		Value *string `json:"value,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1DashboardPkFilterStateKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1DashboardPkFilterStateKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1DashboardPkFilterStateKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// The key to retrieve the value.
		Key *string `json:"key,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PutApiV1DashboardPkFilterStateKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1DashboardPkFilterStateKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1DashboardPkPermalinkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		// The key to retrieve the permanent link data.
		Key *string `json:"key,omitempty"`

		// permanent link.
		Url *string `json:"url,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1DashboardPkPermalinkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1DashboardPkPermalinkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1DashboardPkThumbnailDigestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1DashboardPkThumbnailDigestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1DashboardPkThumbnailDigestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1DatabaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// The total record count on the backend
		Count              *float32 `json:"count,omitempty"`
		DescriptionColumns *struct {
			// The description for the column name. Will be translated by babel
			ColumnName *string `json:"column_name,omitempty"`
		} `json:"description_columns,omitempty"`

		// A list of item ids, useful when you don't know the column id
		Ids          *[]int32 `json:"ids,omitempty"`
		LabelColumns *struct {
			// The label for the column name. Will be translated by babel
			ColumnName *string `json:"column_name,omitempty"`
		} `json:"label_columns,omitempty"`

		// A list of columns
		ListColumns *[]string `json:"list_columns,omitempty"`

		// A title to render. Will be translated by babel
		ListTitle *string `json:"list_title,omitempty"`

		// A list of allowed columns to sort
		OrderColumns *[]string `json:"order_columns,omitempty"`

		// The result from the get list query
		Result *[]DatabaseRestApiGetList `json:"result,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1DatabaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1DatabaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1DatabaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Id     *float32             `json:"id,omitempty"`
		Result *DatabaseRestApiPost `json:"result,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1DatabaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1DatabaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1DatabaseInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AddColumns  *map[string]interface{} `json:"add_columns,omitempty"`
		EditColumns *map[string]interface{} `json:"edit_columns,omitempty"`
		Filters     *struct {
			ColumnName *[]struct {
				// The filter name. Will be translated by babel
				Name *string `json:"name,omitempty"`

				// The filter operation key to use on list filters
				Operator *string `json:"operator,omitempty"`
			} `json:"column_name,omitempty"`
		} `json:"filters,omitempty"`

		// The user permissions for this API resource
		Permissions *[]string `json:"permissions,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1DatabaseInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1DatabaseInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1DatabaseAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		// Installed drivers for the engine
		AvailableDrivers *[]string `json:"available_drivers,omitempty"`

		// Default driver for the engine
		DefaultDriver *string `json:"default_driver,omitempty"`

		// Name of the SQLAlchemy engine
		Engine *string `json:"engine,omitempty"`

		// Name of the database
		Name *string `json:"name,omitempty"`

		// JSON schema defining the needed parameters
		Parameters *map[string]interface{} `json:"parameters,omitempty"`

		// Is the database preferred?
		Preferred *bool `json:"preferred,omitempty"`

		// Example placeholder for the SQLAlchemy URI
		SqlalchemyUriPlaceholder *string `json:"sqlalchemy_uri_placeholder,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1DatabaseAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1DatabaseAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1DatabaseExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1DatabaseExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1DatabaseExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1DatabaseImportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1DatabaseImportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1DatabaseImportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1DatabaseTestConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1DatabaseTestConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1DatabaseTestConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1DatabaseValidateParametersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1DatabaseValidateParametersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1DatabaseValidateParametersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1DatabasePkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1DatabasePkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1DatabasePkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1DatabasePkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		DescriptionColumns *struct {
			// The description for the column name. Will be translated by babel
			ColumnName *string `json:"column_name,omitempty"`
		} `json:"description_columns,omitempty"`

		// The item id
		Id           *string `json:"id,omitempty"`
		LabelColumns *struct {
			// The label for the column name. Will be translated by babel
			ColumnName *string `json:"column_name,omitempty"`
		} `json:"label_columns,omitempty"`
		Result *DatabaseRestApiGet `json:"result,omitempty"`

		// A list of columns
		ShowColumns *[]string `json:"show_columns,omitempty"`

		// A title to render. Will be translated by babel
		ShowTitle *string `json:"show_title,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1DatabasePkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1DatabasePkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1DatabasePkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id     *float32            `json:"id,omitempty"`
		Result *DatabaseRestApiPut `json:"result,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PutApiV1DatabasePkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1DatabasePkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1DatabasePkFunctionNamesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DatabaseFunctionNamesResponse
	JSON401      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1DatabasePkFunctionNamesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1DatabasePkFunctionNamesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1DatabasePkRelatedObjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DatabaseRelatedObjectsResponse
	JSON401      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1DatabasePkRelatedObjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1DatabasePkRelatedObjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1DatabasePkSchemasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SchemasResponseSchema
	JSON400      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1DatabasePkSchemasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1DatabasePkSchemasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1DatabasePkSelectStarTableNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SelectStarResponseSchema
	JSON400      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1DatabasePkSelectStarTableNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1DatabasePkSelectStarTableNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1DatabasePkSelectStarTableNameSchemaNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SelectStarResponseSchema
	JSON400      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1DatabasePkSelectStarTableNameSchemaNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1DatabasePkSelectStarTableNameSchemaNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1DatabasePkTableTableNameSchemaNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TableMetadataResponseSchema
	JSON400      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1DatabasePkTableTableNameSchemaNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1DatabasePkTableTableNameSchemaNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1DatabasePkTableExtraTableNameSchemaNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TableExtraMetadataResponseSchema
	JSON400      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1DatabasePkTableExtraTableNameSchemaNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1DatabasePkTableExtraTableNameSchemaNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1DatabasePkValidateSqlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// A List of SQL errors found on the statement
		Result *[]ValidateSQLResponse `json:"result,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1DatabasePkValidateSqlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1DatabasePkValidateSqlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1DatasetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1DatasetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1DatasetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1DatasetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// The total record count on the backend
		Count              *float32 `json:"count,omitempty"`
		DescriptionColumns *struct {
			// The description for the column name. Will be translated by babel
			ColumnName *string `json:"column_name,omitempty"`
		} `json:"description_columns,omitempty"`

		// A list of item ids, useful when you don't know the column id
		Ids          *[]string `json:"ids,omitempty"`
		LabelColumns *struct {
			// The label for the column name. Will be translated by babel
			ColumnName *string `json:"column_name,omitempty"`
		} `json:"label_columns,omitempty"`

		// A list of columns
		ListColumns *[]string `json:"list_columns,omitempty"`

		// A title to render. Will be translated by babel
		ListTitle *string `json:"list_title,omitempty"`

		// A list of allowed columns to sort
		OrderColumns *[]string `json:"order_columns,omitempty"`

		// The result from the get list query
		Result *[]DatasetRestApiGetList `json:"result,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1DatasetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1DatasetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1DatasetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Id     *float32            `json:"id,omitempty"`
		Result *DatasetRestApiPost `json:"result,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1DatasetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1DatasetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1DatasetInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AddColumns  *map[string]interface{} `json:"add_columns,omitempty"`
		EditColumns *map[string]interface{} `json:"edit_columns,omitempty"`
		Filters     *struct {
			ColumnName *[]struct {
				// The filter name. Will be translated by babel
				Name *string `json:"name,omitempty"`

				// The filter operation key to use on list filters
				Operator *string `json:"operator,omitempty"`
			} `json:"column_name,omitempty"`
		} `json:"filters,omitempty"`

		// The user permissions for this API resource
		Permissions *[]string `json:"permissions,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1DatasetInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1DatasetInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1DatasetDistinctColumnNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DistincResponseSchema
	JSON400      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1DatasetDistinctColumnNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1DatasetDistinctColumnNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1DatasetDuplicateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Id     *float32                `json:"id,omitempty"`
		Result *DatasetDuplicateSchema `json:"result,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1DatasetDuplicateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1DatasetDuplicateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1DatasetExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1DatasetExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1DatasetExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1DatasetImportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1DatasetImportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1DatasetImportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1DatasetRelatedColumnNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RelatedResponseSchema
	JSON400      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1DatasetRelatedColumnNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1DatasetRelatedColumnNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1DatasetPkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1DatasetPkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1DatasetPkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1DatasetPkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		DescriptionColumns *struct {
			// The description for the column name. Will be translated by babel
			ColumnName *string `json:"column_name,omitempty"`
		} `json:"description_columns,omitempty"`

		// The item id
		Id           *int32 `json:"id,omitempty"`
		LabelColumns *struct {
			// The label for the column name. Will be translated by babel
			ColumnName *string `json:"column_name,omitempty"`
		} `json:"label_columns,omitempty"`
		Result *DatasetRestApiGet `json:"result,omitempty"`

		// A list of columns
		ShowColumns *[]string `json:"show_columns,omitempty"`

		// A title to render. Will be translated by babel
		ShowTitle *string `json:"show_title,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1DatasetPkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1DatasetPkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1DatasetPkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id     *float32           `json:"id,omitempty"`
		Result *DatasetRestApiPut `json:"result,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PutApiV1DatasetPkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1DatasetPkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1DatasetPkColumnColumnIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1DatasetPkColumnColumnIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1DatasetPkColumnColumnIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1DatasetPkMetricMetricIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1DatasetPkMetricMetricIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1DatasetPkMetricMetricIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1DatasetPkRefreshResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PutApiV1DatasetPkRefreshResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1DatasetPkRefreshResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1DatasetPkRelatedObjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DatasetRelatedObjectsResponse
	JSON401      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1DatasetPkRelatedObjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1DatasetPkRelatedObjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1EmbeddedDashboardUuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Result *EmbeddedDashboardResponseSchema `json:"result,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1EmbeddedDashboardUuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1EmbeddedDashboardUuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1ExploreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExploreContextSchema
	JSON400      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1ExploreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ExploreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1ExploreFormDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		// The key to retrieve the form_data.
		Key *string `json:"key,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1ExploreFormDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1ExploreFormDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1ExploreFormDataKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// The result of the operation
		Message *string `json:"message,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1ExploreFormDataKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1ExploreFormDataKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1ExploreFormDataKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// The stored form_data
		FormData *string `json:"form_data,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1ExploreFormDataKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ExploreFormDataKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1ExploreFormDataKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// The key to retrieve the form_data.
		Key *string `json:"key,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PutApiV1ExploreFormDataKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1ExploreFormDataKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1ExplorePermalinkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		// The key to retrieve the permanent link data.
		Key *string `json:"key,omitempty"`

		// pemanent link.
		Url *string `json:"url,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1ExplorePermalinkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1ExplorePermalinkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1ExplorePermalinkKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// The stored state
		State *map[string]interface{} `json:"state,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1ExplorePermalinkKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ExplorePermalinkKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1LogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// The total record count on the backend
		Count              *float32 `json:"count,omitempty"`
		DescriptionColumns *struct {
			// The description for the column name. Will be translated by babel
			ColumnName *string `json:"column_name,omitempty"`
		} `json:"description_columns,omitempty"`

		// A list of item ids, useful when you don't know the column id
		Ids          *[]string `json:"ids,omitempty"`
		LabelColumns *struct {
			// The label for the column name. Will be translated by babel
			ColumnName *string `json:"column_name,omitempty"`
		} `json:"label_columns,omitempty"`

		// A list of columns
		ListColumns *[]string `json:"list_columns,omitempty"`

		// A title to render. Will be translated by babel
		ListTitle *string `json:"list_title,omitempty"`

		// A list of allowed columns to sort
		OrderColumns *[]string `json:"order_columns,omitempty"`

		// The result from the get list query
		Result *[]LogRestApiGetList `json:"result,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1LogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1LogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1LogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Id     *string         `json:"id,omitempty"`
		Result *LogRestApiPost `json:"result,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1LogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1LogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1LogPkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		DescriptionColumns *struct {
			// The description for the column name. Will be translated by babel
			ColumnName *string `json:"column_name,omitempty"`
		} `json:"description_columns,omitempty"`

		// The item id
		Id           *string `json:"id,omitempty"`
		LabelColumns *struct {
			// The label for the column name. Will be translated by babel
			ColumnName *string `json:"column_name,omitempty"`
		} `json:"label_columns,omitempty"`
		Result *LogRestApiGet `json:"result,omitempty"`

		// A list of columns
		ShowColumns *[]string `json:"show_columns,omitempty"`

		// A title to render. Will be translated by babel
		ShowTitle *string `json:"show_title,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1LogPkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1LogPkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1MeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Result *UserResponseSchema `json:"result,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1MeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1MeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1MeRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Result *UserResponseSchema `json:"result,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1MeRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1MeRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1MenuResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Menu items in a forest like data structure
		Result *[]struct {
			Childs *[]map[string]interface{} `json:"childs,omitempty"`

			// Icon name to show for this menu item
			Icon *string `json:"icon,omitempty"`

			// Pretty name for the menu item
			Label *string `json:"label,omitempty"`

			// The internal menu item name, maps to permission_name
			Name *string `json:"name,omitempty"`

			// The URL for the menu item
			Url *string `json:"url,omitempty"`
		} `json:"result,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1MenuResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1MenuResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1QueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// The total record count on the backend
		Count              *float32 `json:"count,omitempty"`
		DescriptionColumns *struct {
			// The description for the column name. Will be translated by babel
			ColumnName *string `json:"column_name,omitempty"`
		} `json:"description_columns,omitempty"`

		// A list of item ids, useful when you don't know the column id
		Ids          *[]string `json:"ids,omitempty"`
		LabelColumns *struct {
			// The label for the column name. Will be translated by babel
			ColumnName *string `json:"column_name,omitempty"`
		} `json:"label_columns,omitempty"`

		// A list of columns
		ListColumns *[]string `json:"list_columns,omitempty"`

		// A title to render. Will be translated by babel
		ListTitle *string `json:"list_title,omitempty"`

		// A list of allowed columns to sort
		OrderColumns *[]string `json:"order_columns,omitempty"`

		// The result from the get list query
		Result *[]QueryRestApiGetList `json:"result,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1QueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1QueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1QueryDistinctColumnNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DistincResponseSchema
	JSON400      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1QueryDistinctColumnNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1QueryDistinctColumnNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1QueryRelatedColumnNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RelatedResponseSchema
	JSON400      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1QueryRelatedColumnNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1QueryRelatedColumnNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1QueryPkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		DescriptionColumns *struct {
			// The description for the column name. Will be translated by babel
			ColumnName *string `json:"column_name,omitempty"`
		} `json:"description_columns,omitempty"`

		// The item id
		Id           *string `json:"id,omitempty"`
		LabelColumns *struct {
			// The label for the column name. Will be translated by babel
			ColumnName *string `json:"column_name,omitempty"`
		} `json:"label_columns,omitempty"`
		Result *QueryRestApiGet `json:"result,omitempty"`

		// A list of columns
		ShowColumns *[]string `json:"show_columns,omitempty"`

		// A title to render. Will be translated by babel
		ShowTitle *string `json:"show_title,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1QueryPkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1QueryPkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1ReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1ReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1ReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1ReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// The total record count on the backend
		Count              *float32 `json:"count,omitempty"`
		DescriptionColumns *struct {
			// The description for the column name. Will be translated by babel
			ColumnName *string `json:"column_name,omitempty"`
		} `json:"description_columns,omitempty"`

		// A list of item ids, useful when you don't know the column id
		Ids          *[]string `json:"ids,omitempty"`
		LabelColumns *struct {
			// The label for the column name. Will be translated by babel
			ColumnName *string `json:"column_name,omitempty"`
		} `json:"label_columns,omitempty"`

		// A list of columns
		ListColumns *[]string `json:"list_columns,omitempty"`

		// A title to render. Will be translated by babel
		ListTitle *string `json:"list_title,omitempty"`

		// A list of allowed columns to sort
		OrderColumns *[]string `json:"order_columns,omitempty"`

		// The result from the get list query
		Result *[]ReportScheduleRestApiGetList `json:"result,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1ReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1ReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Id     *float32                   `json:"id,omitempty"`
		Result *ReportScheduleRestApiPost `json:"result,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1ReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1ReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1ReportInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AddColumns  *map[string]interface{} `json:"add_columns,omitempty"`
		EditColumns *map[string]interface{} `json:"edit_columns,omitempty"`
		Filters     *struct {
			ColumnName *[]struct {
				// The filter name. Will be translated by babel
				Name *string `json:"name,omitempty"`

				// The filter operation key to use on list filters
				Operator *string `json:"operator,omitempty"`
			} `json:"column_name,omitempty"`
		} `json:"filters,omitempty"`

		// The user permissions for this API resource
		Permissions *[]string `json:"permissions,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1ReportInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ReportInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1ReportRelatedColumnNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RelatedResponseSchema
	JSON400      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1ReportRelatedColumnNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ReportRelatedColumnNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1ReportPkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1ReportPkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1ReportPkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1ReportPkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		DescriptionColumns *struct {
			// The description for the column name. Will be translated by babel
			ColumnName *string `json:"column_name,omitempty"`
		} `json:"description_columns,omitempty"`

		// The item id
		Id           *string `json:"id,omitempty"`
		LabelColumns *struct {
			// The label for the column name. Will be translated by babel
			ColumnName *string `json:"column_name,omitempty"`
		} `json:"label_columns,omitempty"`
		Result *ReportScheduleRestApiGet `json:"result,omitempty"`

		// A list of columns
		ShowColumns *[]string `json:"show_columns,omitempty"`

		// A title to render. Will be translated by babel
		ShowTitle *string `json:"show_title,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1ReportPkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ReportPkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1ReportPkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id     *float32                  `json:"id,omitempty"`
		Result *ReportScheduleRestApiPut `json:"result,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PutApiV1ReportPkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1ReportPkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1ReportPkLogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// The total record count on the backend
		Count *float32 `json:"count,omitempty"`

		// A list of log ids
		Ids *[]string `json:"ids,omitempty"`

		// The result from the get list query
		Result *[]ReportExecutionLogRestApiGetList `json:"result,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1ReportPkLogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ReportPkLogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1ReportPkLogLogIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// The log id
		Id     *string                       `json:"id,omitempty"`
		Result *ReportExecutionLogRestApiGet `json:"result,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1ReportPkLogLogIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ReportPkLogLogIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1SavedQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1SavedQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1SavedQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1SavedQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// The total record count on the backend
		Count              *float32 `json:"count,omitempty"`
		DescriptionColumns *struct {
			// The description for the column name. Will be translated by babel
			ColumnName *string `json:"column_name,omitempty"`
		} `json:"description_columns,omitempty"`

		// A list of item ids, useful when you don't know the column id
		Ids          *[]string `json:"ids,omitempty"`
		LabelColumns *struct {
			// The label for the column name. Will be translated by babel
			ColumnName *string `json:"column_name,omitempty"`
		} `json:"label_columns,omitempty"`

		// A list of columns
		ListColumns *[]string `json:"list_columns,omitempty"`

		// A title to render. Will be translated by babel
		ListTitle *string `json:"list_title,omitempty"`

		// A list of allowed columns to sort
		OrderColumns *[]string `json:"order_columns,omitempty"`

		// The result from the get list query
		Result *[]SavedQueryRestApiGetList `json:"result,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1SavedQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1SavedQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1SavedQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Id     *string                `json:"id,omitempty"`
		Result *SavedQueryRestApiPost `json:"result,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1SavedQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1SavedQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1SavedQueryInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AddColumns  *map[string]interface{} `json:"add_columns,omitempty"`
		EditColumns *map[string]interface{} `json:"edit_columns,omitempty"`
		Filters     *struct {
			ColumnName *[]struct {
				// The filter name. Will be translated by babel
				Name *string `json:"name,omitempty"`

				// The filter operation key to use on list filters
				Operator *string `json:"operator,omitempty"`
			} `json:"column_name,omitempty"`
		} `json:"filters,omitempty"`

		// The user permissions for this API resource
		Permissions *[]string `json:"permissions,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1SavedQueryInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1SavedQueryInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1SavedQueryDistinctColumnNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DistincResponseSchema
	JSON400      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1SavedQueryDistinctColumnNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1SavedQueryDistinctColumnNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1SavedQueryExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1SavedQueryExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1SavedQueryExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1SavedQueryImportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1SavedQueryImportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1SavedQueryImportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1SavedQueryRelatedColumnNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RelatedResponseSchema
	JSON400      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1SavedQueryRelatedColumnNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1SavedQueryRelatedColumnNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1SavedQueryPkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1SavedQueryPkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1SavedQueryPkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1SavedQueryPkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		DescriptionColumns *struct {
			// The description for the column name. Will be translated by babel
			ColumnName *string `json:"column_name,omitempty"`
		} `json:"description_columns,omitempty"`

		// The item id
		Id           *string `json:"id,omitempty"`
		LabelColumns *struct {
			// The label for the column name. Will be translated by babel
			ColumnName *string `json:"column_name,omitempty"`
		} `json:"label_columns,omitempty"`
		Result *SavedQueryRestApiGet `json:"result,omitempty"`

		// A list of columns
		ShowColumns *[]string `json:"show_columns,omitempty"`

		// A title to render. Will be translated by babel
		ShowTitle *string `json:"show_title,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1SavedQueryPkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1SavedQueryPkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1SavedQueryPkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Result *SavedQueryRestApiPut `json:"result,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PutApiV1SavedQueryPkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1SavedQueryPkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1SecurityCsrfTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Result *string `json:"result,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1SecurityCsrfTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1SecurityCsrfTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1SecurityGuestTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Token *string `json:"token,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1SecurityGuestTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1SecurityGuestTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1SecurityLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AccessToken  *string `json:"access_token,omitempty"`
		RefreshToken *string `json:"refresh_token,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1SecurityLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1SecurityLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1SecurityRefreshResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// A new refreshed access token
		AccessToken *string `json:"access_token,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1SecurityRefreshResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1SecurityRefreshResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiVersionOpenapiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON404      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiVersionOpenapiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiVersionOpenapiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSupersetSqllabVizResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *DashboardDatasetSchema `json:"data,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostSupersetSqllabVizResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSupersetSqllabVizResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiV1AdvancedDataTypeConvertWithResponse request returning *GetApiV1AdvancedDataTypeConvertResponse
func (c *ClientWithResponses) GetApiV1AdvancedDataTypeConvertWithResponse(ctx context.Context, params *GetApiV1AdvancedDataTypeConvertParams, reqEditors ...RequestEditorFn) (*GetApiV1AdvancedDataTypeConvertResponse, error) {
	rsp, err := c.GetApiV1AdvancedDataTypeConvert(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1AdvancedDataTypeConvertResponse(rsp)
}

// GetApiV1AdvancedDataTypeTypesWithResponse request returning *GetApiV1AdvancedDataTypeTypesResponse
func (c *ClientWithResponses) GetApiV1AdvancedDataTypeTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1AdvancedDataTypeTypesResponse, error) {
	rsp, err := c.GetApiV1AdvancedDataTypeTypes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1AdvancedDataTypeTypesResponse(rsp)
}

// DeleteApiV1AnnotationLayerWithResponse request returning *DeleteApiV1AnnotationLayerResponse
func (c *ClientWithResponses) DeleteApiV1AnnotationLayerWithResponse(ctx context.Context, params *DeleteApiV1AnnotationLayerParams, reqEditors ...RequestEditorFn) (*DeleteApiV1AnnotationLayerResponse, error) {
	rsp, err := c.DeleteApiV1AnnotationLayer(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1AnnotationLayerResponse(rsp)
}

// GetApiV1AnnotationLayerWithResponse request returning *GetApiV1AnnotationLayerResponse
func (c *ClientWithResponses) GetApiV1AnnotationLayerWithResponse(ctx context.Context, params *GetApiV1AnnotationLayerParams, reqEditors ...RequestEditorFn) (*GetApiV1AnnotationLayerResponse, error) {
	rsp, err := c.GetApiV1AnnotationLayer(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1AnnotationLayerResponse(rsp)
}

// PostApiV1AnnotationLayerWithBodyWithResponse request with arbitrary body returning *PostApiV1AnnotationLayerResponse
func (c *ClientWithResponses) PostApiV1AnnotationLayerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1AnnotationLayerResponse, error) {
	rsp, err := c.PostApiV1AnnotationLayerWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1AnnotationLayerResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1AnnotationLayerWithResponse(ctx context.Context, body PostApiV1AnnotationLayerJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1AnnotationLayerResponse, error) {
	rsp, err := c.PostApiV1AnnotationLayer(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1AnnotationLayerResponse(rsp)
}

// GetApiV1AnnotationLayerInfoWithResponse request returning *GetApiV1AnnotationLayerInfoResponse
func (c *ClientWithResponses) GetApiV1AnnotationLayerInfoWithResponse(ctx context.Context, params *GetApiV1AnnotationLayerInfoParams, reqEditors ...RequestEditorFn) (*GetApiV1AnnotationLayerInfoResponse, error) {
	rsp, err := c.GetApiV1AnnotationLayerInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1AnnotationLayerInfoResponse(rsp)
}

// GetApiV1AnnotationLayerRelatedColumnNameWithResponse request returning *GetApiV1AnnotationLayerRelatedColumnNameResponse
func (c *ClientWithResponses) GetApiV1AnnotationLayerRelatedColumnNameWithResponse(ctx context.Context, columnName string, params *GetApiV1AnnotationLayerRelatedColumnNameParams, reqEditors ...RequestEditorFn) (*GetApiV1AnnotationLayerRelatedColumnNameResponse, error) {
	rsp, err := c.GetApiV1AnnotationLayerRelatedColumnName(ctx, columnName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1AnnotationLayerRelatedColumnNameResponse(rsp)
}

// DeleteApiV1AnnotationLayerPkWithResponse request returning *DeleteApiV1AnnotationLayerPkResponse
func (c *ClientWithResponses) DeleteApiV1AnnotationLayerPkWithResponse(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*DeleteApiV1AnnotationLayerPkResponse, error) {
	rsp, err := c.DeleteApiV1AnnotationLayerPk(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1AnnotationLayerPkResponse(rsp)
}

// GetApiV1AnnotationLayerPkWithResponse request returning *GetApiV1AnnotationLayerPkResponse
func (c *ClientWithResponses) GetApiV1AnnotationLayerPkWithResponse(ctx context.Context, pk int, params *GetApiV1AnnotationLayerPkParams, reqEditors ...RequestEditorFn) (*GetApiV1AnnotationLayerPkResponse, error) {
	rsp, err := c.GetApiV1AnnotationLayerPk(ctx, pk, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1AnnotationLayerPkResponse(rsp)
}

// PutApiV1AnnotationLayerPkWithBodyWithResponse request with arbitrary body returning *PutApiV1AnnotationLayerPkResponse
func (c *ClientWithResponses) PutApiV1AnnotationLayerPkWithBodyWithResponse(ctx context.Context, pk int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1AnnotationLayerPkResponse, error) {
	rsp, err := c.PutApiV1AnnotationLayerPkWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1AnnotationLayerPkResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1AnnotationLayerPkWithResponse(ctx context.Context, pk int, body PutApiV1AnnotationLayerPkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1AnnotationLayerPkResponse, error) {
	rsp, err := c.PutApiV1AnnotationLayerPk(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1AnnotationLayerPkResponse(rsp)
}

// DeleteApiV1AnnotationLayerPkAnnotationWithResponse request returning *DeleteApiV1AnnotationLayerPkAnnotationResponse
func (c *ClientWithResponses) DeleteApiV1AnnotationLayerPkAnnotationWithResponse(ctx context.Context, pk int, params *DeleteApiV1AnnotationLayerPkAnnotationParams, reqEditors ...RequestEditorFn) (*DeleteApiV1AnnotationLayerPkAnnotationResponse, error) {
	rsp, err := c.DeleteApiV1AnnotationLayerPkAnnotation(ctx, pk, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1AnnotationLayerPkAnnotationResponse(rsp)
}

// GetApiV1AnnotationLayerPkAnnotationWithResponse request returning *GetApiV1AnnotationLayerPkAnnotationResponse
func (c *ClientWithResponses) GetApiV1AnnotationLayerPkAnnotationWithResponse(ctx context.Context, pk int, params *GetApiV1AnnotationLayerPkAnnotationParams, reqEditors ...RequestEditorFn) (*GetApiV1AnnotationLayerPkAnnotationResponse, error) {
	rsp, err := c.GetApiV1AnnotationLayerPkAnnotation(ctx, pk, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1AnnotationLayerPkAnnotationResponse(rsp)
}

// PostApiV1AnnotationLayerPkAnnotationWithBodyWithResponse request with arbitrary body returning *PostApiV1AnnotationLayerPkAnnotationResponse
func (c *ClientWithResponses) PostApiV1AnnotationLayerPkAnnotationWithBodyWithResponse(ctx context.Context, pk int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1AnnotationLayerPkAnnotationResponse, error) {
	rsp, err := c.PostApiV1AnnotationLayerPkAnnotationWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1AnnotationLayerPkAnnotationResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1AnnotationLayerPkAnnotationWithResponse(ctx context.Context, pk int, body PostApiV1AnnotationLayerPkAnnotationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1AnnotationLayerPkAnnotationResponse, error) {
	rsp, err := c.PostApiV1AnnotationLayerPkAnnotation(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1AnnotationLayerPkAnnotationResponse(rsp)
}

// DeleteApiV1AnnotationLayerPkAnnotationAnnotationIdWithResponse request returning *DeleteApiV1AnnotationLayerPkAnnotationAnnotationIdResponse
func (c *ClientWithResponses) DeleteApiV1AnnotationLayerPkAnnotationAnnotationIdWithResponse(ctx context.Context, pk int, annotationId int, reqEditors ...RequestEditorFn) (*DeleteApiV1AnnotationLayerPkAnnotationAnnotationIdResponse, error) {
	rsp, err := c.DeleteApiV1AnnotationLayerPkAnnotationAnnotationId(ctx, pk, annotationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1AnnotationLayerPkAnnotationAnnotationIdResponse(rsp)
}

// GetApiV1AnnotationLayerPkAnnotationAnnotationIdWithResponse request returning *GetApiV1AnnotationLayerPkAnnotationAnnotationIdResponse
func (c *ClientWithResponses) GetApiV1AnnotationLayerPkAnnotationAnnotationIdWithResponse(ctx context.Context, pk int, annotationId int, params *GetApiV1AnnotationLayerPkAnnotationAnnotationIdParams, reqEditors ...RequestEditorFn) (*GetApiV1AnnotationLayerPkAnnotationAnnotationIdResponse, error) {
	rsp, err := c.GetApiV1AnnotationLayerPkAnnotationAnnotationId(ctx, pk, annotationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1AnnotationLayerPkAnnotationAnnotationIdResponse(rsp)
}

// PutApiV1AnnotationLayerPkAnnotationAnnotationIdWithBodyWithResponse request with arbitrary body returning *PutApiV1AnnotationLayerPkAnnotationAnnotationIdResponse
func (c *ClientWithResponses) PutApiV1AnnotationLayerPkAnnotationAnnotationIdWithBodyWithResponse(ctx context.Context, pk int, annotationId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1AnnotationLayerPkAnnotationAnnotationIdResponse, error) {
	rsp, err := c.PutApiV1AnnotationLayerPkAnnotationAnnotationIdWithBody(ctx, pk, annotationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1AnnotationLayerPkAnnotationAnnotationIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1AnnotationLayerPkAnnotationAnnotationIdWithResponse(ctx context.Context, pk int, annotationId int, body PutApiV1AnnotationLayerPkAnnotationAnnotationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1AnnotationLayerPkAnnotationAnnotationIdResponse, error) {
	rsp, err := c.PutApiV1AnnotationLayerPkAnnotationAnnotationId(ctx, pk, annotationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1AnnotationLayerPkAnnotationAnnotationIdResponse(rsp)
}

// GetApiV1AssetsExportWithResponse request returning *GetApiV1AssetsExportResponse
func (c *ClientWithResponses) GetApiV1AssetsExportWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1AssetsExportResponse, error) {
	rsp, err := c.GetApiV1AssetsExport(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1AssetsExportResponse(rsp)
}

// PostApiV1AssetsImportWithBodyWithResponse request with arbitrary body returning *PostApiV1AssetsImportResponse
func (c *ClientWithResponses) PostApiV1AssetsImportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1AssetsImportResponse, error) {
	rsp, err := c.PostApiV1AssetsImportWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1AssetsImportResponse(rsp)
}

// GetApiV1AsyncEventWithResponse request returning *GetApiV1AsyncEventResponse
func (c *ClientWithResponses) GetApiV1AsyncEventWithResponse(ctx context.Context, params *GetApiV1AsyncEventParams, reqEditors ...RequestEditorFn) (*GetApiV1AsyncEventResponse, error) {
	rsp, err := c.GetApiV1AsyncEvent(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1AsyncEventResponse(rsp)
}

// GetApiV1AvailableDomainsWithResponse request returning *GetApiV1AvailableDomainsResponse
func (c *ClientWithResponses) GetApiV1AvailableDomainsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1AvailableDomainsResponse, error) {
	rsp, err := c.GetApiV1AvailableDomains(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1AvailableDomainsResponse(rsp)
}

// PostApiV1CachekeyInvalidateWithBodyWithResponse request with arbitrary body returning *PostApiV1CachekeyInvalidateResponse
func (c *ClientWithResponses) PostApiV1CachekeyInvalidateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1CachekeyInvalidateResponse, error) {
	rsp, err := c.PostApiV1CachekeyInvalidateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1CachekeyInvalidateResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1CachekeyInvalidateWithResponse(ctx context.Context, body PostApiV1CachekeyInvalidateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1CachekeyInvalidateResponse, error) {
	rsp, err := c.PostApiV1CachekeyInvalidate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1CachekeyInvalidateResponse(rsp)
}

// DeleteApiV1ChartWithResponse request returning *DeleteApiV1ChartResponse
func (c *ClientWithResponses) DeleteApiV1ChartWithResponse(ctx context.Context, params *DeleteApiV1ChartParams, reqEditors ...RequestEditorFn) (*DeleteApiV1ChartResponse, error) {
	rsp, err := c.DeleteApiV1Chart(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1ChartResponse(rsp)
}

// GetApiV1ChartWithResponse request returning *GetApiV1ChartResponse
func (c *ClientWithResponses) GetApiV1ChartWithResponse(ctx context.Context, params *GetApiV1ChartParams, reqEditors ...RequestEditorFn) (*GetApiV1ChartResponse, error) {
	rsp, err := c.GetApiV1Chart(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ChartResponse(rsp)
}

// PostApiV1ChartWithBodyWithResponse request with arbitrary body returning *PostApiV1ChartResponse
func (c *ClientWithResponses) PostApiV1ChartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1ChartResponse, error) {
	rsp, err := c.PostApiV1ChartWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1ChartResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1ChartWithResponse(ctx context.Context, body PostApiV1ChartJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1ChartResponse, error) {
	rsp, err := c.PostApiV1Chart(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1ChartResponse(rsp)
}

// GetApiV1ChartInfoWithResponse request returning *GetApiV1ChartInfoResponse
func (c *ClientWithResponses) GetApiV1ChartInfoWithResponse(ctx context.Context, params *GetApiV1ChartInfoParams, reqEditors ...RequestEditorFn) (*GetApiV1ChartInfoResponse, error) {
	rsp, err := c.GetApiV1ChartInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ChartInfoResponse(rsp)
}

// PostApiV1ChartDataWithBodyWithResponse request with arbitrary body returning *PostApiV1ChartDataResponse
func (c *ClientWithResponses) PostApiV1ChartDataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1ChartDataResponse, error) {
	rsp, err := c.PostApiV1ChartDataWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1ChartDataResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1ChartDataWithResponse(ctx context.Context, body PostApiV1ChartDataJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1ChartDataResponse, error) {
	rsp, err := c.PostApiV1ChartData(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1ChartDataResponse(rsp)
}

// GetApiV1ChartDataCacheKeyWithResponse request returning *GetApiV1ChartDataCacheKeyResponse
func (c *ClientWithResponses) GetApiV1ChartDataCacheKeyWithResponse(ctx context.Context, cacheKey string, reqEditors ...RequestEditorFn) (*GetApiV1ChartDataCacheKeyResponse, error) {
	rsp, err := c.GetApiV1ChartDataCacheKey(ctx, cacheKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ChartDataCacheKeyResponse(rsp)
}

// GetApiV1ChartExportWithResponse request returning *GetApiV1ChartExportResponse
func (c *ClientWithResponses) GetApiV1ChartExportWithResponse(ctx context.Context, params *GetApiV1ChartExportParams, reqEditors ...RequestEditorFn) (*GetApiV1ChartExportResponse, error) {
	rsp, err := c.GetApiV1ChartExport(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ChartExportResponse(rsp)
}

// GetApiV1ChartFavoriteStatusWithResponse request returning *GetApiV1ChartFavoriteStatusResponse
func (c *ClientWithResponses) GetApiV1ChartFavoriteStatusWithResponse(ctx context.Context, params *GetApiV1ChartFavoriteStatusParams, reqEditors ...RequestEditorFn) (*GetApiV1ChartFavoriteStatusResponse, error) {
	rsp, err := c.GetApiV1ChartFavoriteStatus(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ChartFavoriteStatusResponse(rsp)
}

// PostApiV1ChartImportWithBodyWithResponse request with arbitrary body returning *PostApiV1ChartImportResponse
func (c *ClientWithResponses) PostApiV1ChartImportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1ChartImportResponse, error) {
	rsp, err := c.PostApiV1ChartImportWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1ChartImportResponse(rsp)
}

// GetApiV1ChartRelatedColumnNameWithResponse request returning *GetApiV1ChartRelatedColumnNameResponse
func (c *ClientWithResponses) GetApiV1ChartRelatedColumnNameWithResponse(ctx context.Context, columnName string, params *GetApiV1ChartRelatedColumnNameParams, reqEditors ...RequestEditorFn) (*GetApiV1ChartRelatedColumnNameResponse, error) {
	rsp, err := c.GetApiV1ChartRelatedColumnName(ctx, columnName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ChartRelatedColumnNameResponse(rsp)
}

// DeleteApiV1ChartPkWithResponse request returning *DeleteApiV1ChartPkResponse
func (c *ClientWithResponses) DeleteApiV1ChartPkWithResponse(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*DeleteApiV1ChartPkResponse, error) {
	rsp, err := c.DeleteApiV1ChartPk(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1ChartPkResponse(rsp)
}

// GetApiV1ChartPkWithResponse request returning *GetApiV1ChartPkResponse
func (c *ClientWithResponses) GetApiV1ChartPkWithResponse(ctx context.Context, pk int, params *GetApiV1ChartPkParams, reqEditors ...RequestEditorFn) (*GetApiV1ChartPkResponse, error) {
	rsp, err := c.GetApiV1ChartPk(ctx, pk, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ChartPkResponse(rsp)
}

// PutApiV1ChartPkWithBodyWithResponse request with arbitrary body returning *PutApiV1ChartPkResponse
func (c *ClientWithResponses) PutApiV1ChartPkWithBodyWithResponse(ctx context.Context, pk int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1ChartPkResponse, error) {
	rsp, err := c.PutApiV1ChartPkWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1ChartPkResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1ChartPkWithResponse(ctx context.Context, pk int, body PutApiV1ChartPkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1ChartPkResponse, error) {
	rsp, err := c.PutApiV1ChartPk(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1ChartPkResponse(rsp)
}

// GetApiV1ChartPkCacheScreenshotWithResponse request returning *GetApiV1ChartPkCacheScreenshotResponse
func (c *ClientWithResponses) GetApiV1ChartPkCacheScreenshotWithResponse(ctx context.Context, pk int, params *GetApiV1ChartPkCacheScreenshotParams, reqEditors ...RequestEditorFn) (*GetApiV1ChartPkCacheScreenshotResponse, error) {
	rsp, err := c.GetApiV1ChartPkCacheScreenshot(ctx, pk, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ChartPkCacheScreenshotResponse(rsp)
}

// GetApiV1ChartPkDataWithResponse request returning *GetApiV1ChartPkDataResponse
func (c *ClientWithResponses) GetApiV1ChartPkDataWithResponse(ctx context.Context, pk int, params *GetApiV1ChartPkDataParams, reqEditors ...RequestEditorFn) (*GetApiV1ChartPkDataResponse, error) {
	rsp, err := c.GetApiV1ChartPkData(ctx, pk, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ChartPkDataResponse(rsp)
}

// GetApiV1ChartPkScreenshotDigestWithResponse request returning *GetApiV1ChartPkScreenshotDigestResponse
func (c *ClientWithResponses) GetApiV1ChartPkScreenshotDigestWithResponse(ctx context.Context, pk int, digest string, reqEditors ...RequestEditorFn) (*GetApiV1ChartPkScreenshotDigestResponse, error) {
	rsp, err := c.GetApiV1ChartPkScreenshotDigest(ctx, pk, digest, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ChartPkScreenshotDigestResponse(rsp)
}

// GetApiV1ChartPkThumbnailDigestWithResponse request returning *GetApiV1ChartPkThumbnailDigestResponse
func (c *ClientWithResponses) GetApiV1ChartPkThumbnailDigestWithResponse(ctx context.Context, pk int, digest string, reqEditors ...RequestEditorFn) (*GetApiV1ChartPkThumbnailDigestResponse, error) {
	rsp, err := c.GetApiV1ChartPkThumbnailDigest(ctx, pk, digest, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ChartPkThumbnailDigestResponse(rsp)
}

// DeleteApiV1CssTemplateWithResponse request returning *DeleteApiV1CssTemplateResponse
func (c *ClientWithResponses) DeleteApiV1CssTemplateWithResponse(ctx context.Context, params *DeleteApiV1CssTemplateParams, reqEditors ...RequestEditorFn) (*DeleteApiV1CssTemplateResponse, error) {
	rsp, err := c.DeleteApiV1CssTemplate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1CssTemplateResponse(rsp)
}

// GetApiV1CssTemplateWithResponse request returning *GetApiV1CssTemplateResponse
func (c *ClientWithResponses) GetApiV1CssTemplateWithResponse(ctx context.Context, params *GetApiV1CssTemplateParams, reqEditors ...RequestEditorFn) (*GetApiV1CssTemplateResponse, error) {
	rsp, err := c.GetApiV1CssTemplate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1CssTemplateResponse(rsp)
}

// PostApiV1CssTemplateWithBodyWithResponse request with arbitrary body returning *PostApiV1CssTemplateResponse
func (c *ClientWithResponses) PostApiV1CssTemplateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1CssTemplateResponse, error) {
	rsp, err := c.PostApiV1CssTemplateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1CssTemplateResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1CssTemplateWithResponse(ctx context.Context, body PostApiV1CssTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1CssTemplateResponse, error) {
	rsp, err := c.PostApiV1CssTemplate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1CssTemplateResponse(rsp)
}

// GetApiV1CssTemplateInfoWithResponse request returning *GetApiV1CssTemplateInfoResponse
func (c *ClientWithResponses) GetApiV1CssTemplateInfoWithResponse(ctx context.Context, params *GetApiV1CssTemplateInfoParams, reqEditors ...RequestEditorFn) (*GetApiV1CssTemplateInfoResponse, error) {
	rsp, err := c.GetApiV1CssTemplateInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1CssTemplateInfoResponse(rsp)
}

// GetApiV1CssTemplateRelatedColumnNameWithResponse request returning *GetApiV1CssTemplateRelatedColumnNameResponse
func (c *ClientWithResponses) GetApiV1CssTemplateRelatedColumnNameWithResponse(ctx context.Context, columnName string, params *GetApiV1CssTemplateRelatedColumnNameParams, reqEditors ...RequestEditorFn) (*GetApiV1CssTemplateRelatedColumnNameResponse, error) {
	rsp, err := c.GetApiV1CssTemplateRelatedColumnName(ctx, columnName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1CssTemplateRelatedColumnNameResponse(rsp)
}

// DeleteApiV1CssTemplatePkWithResponse request returning *DeleteApiV1CssTemplatePkResponse
func (c *ClientWithResponses) DeleteApiV1CssTemplatePkWithResponse(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*DeleteApiV1CssTemplatePkResponse, error) {
	rsp, err := c.DeleteApiV1CssTemplatePk(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1CssTemplatePkResponse(rsp)
}

// GetApiV1CssTemplatePkWithResponse request returning *GetApiV1CssTemplatePkResponse
func (c *ClientWithResponses) GetApiV1CssTemplatePkWithResponse(ctx context.Context, pk int, params *GetApiV1CssTemplatePkParams, reqEditors ...RequestEditorFn) (*GetApiV1CssTemplatePkResponse, error) {
	rsp, err := c.GetApiV1CssTemplatePk(ctx, pk, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1CssTemplatePkResponse(rsp)
}

// PutApiV1CssTemplatePkWithBodyWithResponse request with arbitrary body returning *PutApiV1CssTemplatePkResponse
func (c *ClientWithResponses) PutApiV1CssTemplatePkWithBodyWithResponse(ctx context.Context, pk int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1CssTemplatePkResponse, error) {
	rsp, err := c.PutApiV1CssTemplatePkWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1CssTemplatePkResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1CssTemplatePkWithResponse(ctx context.Context, pk int, body PutApiV1CssTemplatePkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1CssTemplatePkResponse, error) {
	rsp, err := c.PutApiV1CssTemplatePk(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1CssTemplatePkResponse(rsp)
}

// DeleteApiV1DashboardWithResponse request returning *DeleteApiV1DashboardResponse
func (c *ClientWithResponses) DeleteApiV1DashboardWithResponse(ctx context.Context, params *DeleteApiV1DashboardParams, reqEditors ...RequestEditorFn) (*DeleteApiV1DashboardResponse, error) {
	rsp, err := c.DeleteApiV1Dashboard(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1DashboardResponse(rsp)
}

// GetApiV1DashboardWithResponse request returning *GetApiV1DashboardResponse
func (c *ClientWithResponses) GetApiV1DashboardWithResponse(ctx context.Context, params *GetApiV1DashboardParams, reqEditors ...RequestEditorFn) (*GetApiV1DashboardResponse, error) {
	rsp, err := c.GetApiV1Dashboard(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1DashboardResponse(rsp)
}

// PostApiV1DashboardWithBodyWithResponse request with arbitrary body returning *PostApiV1DashboardResponse
func (c *ClientWithResponses) PostApiV1DashboardWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1DashboardResponse, error) {
	rsp, err := c.PostApiV1DashboardWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1DashboardResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1DashboardWithResponse(ctx context.Context, body PostApiV1DashboardJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1DashboardResponse, error) {
	rsp, err := c.PostApiV1Dashboard(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1DashboardResponse(rsp)
}

// GetApiV1DashboardInfoWithResponse request returning *GetApiV1DashboardInfoResponse
func (c *ClientWithResponses) GetApiV1DashboardInfoWithResponse(ctx context.Context, params *GetApiV1DashboardInfoParams, reqEditors ...RequestEditorFn) (*GetApiV1DashboardInfoResponse, error) {
	rsp, err := c.GetApiV1DashboardInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1DashboardInfoResponse(rsp)
}

// GetApiV1DashboardExportWithResponse request returning *GetApiV1DashboardExportResponse
func (c *ClientWithResponses) GetApiV1DashboardExportWithResponse(ctx context.Context, params *GetApiV1DashboardExportParams, reqEditors ...RequestEditorFn) (*GetApiV1DashboardExportResponse, error) {
	rsp, err := c.GetApiV1DashboardExport(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1DashboardExportResponse(rsp)
}

// GetApiV1DashboardFavoriteStatusWithResponse request returning *GetApiV1DashboardFavoriteStatusResponse
func (c *ClientWithResponses) GetApiV1DashboardFavoriteStatusWithResponse(ctx context.Context, params *GetApiV1DashboardFavoriteStatusParams, reqEditors ...RequestEditorFn) (*GetApiV1DashboardFavoriteStatusResponse, error) {
	rsp, err := c.GetApiV1DashboardFavoriteStatus(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1DashboardFavoriteStatusResponse(rsp)
}

// PostApiV1DashboardImportWithBodyWithResponse request with arbitrary body returning *PostApiV1DashboardImportResponse
func (c *ClientWithResponses) PostApiV1DashboardImportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1DashboardImportResponse, error) {
	rsp, err := c.PostApiV1DashboardImportWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1DashboardImportResponse(rsp)
}

// GetApiV1DashboardPermalinkKeyWithResponse request returning *GetApiV1DashboardPermalinkKeyResponse
func (c *ClientWithResponses) GetApiV1DashboardPermalinkKeyWithResponse(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*GetApiV1DashboardPermalinkKeyResponse, error) {
	rsp, err := c.GetApiV1DashboardPermalinkKey(ctx, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1DashboardPermalinkKeyResponse(rsp)
}

// GetApiV1DashboardRelatedColumnNameWithResponse request returning *GetApiV1DashboardRelatedColumnNameResponse
func (c *ClientWithResponses) GetApiV1DashboardRelatedColumnNameWithResponse(ctx context.Context, columnName string, params *GetApiV1DashboardRelatedColumnNameParams, reqEditors ...RequestEditorFn) (*GetApiV1DashboardRelatedColumnNameResponse, error) {
	rsp, err := c.GetApiV1DashboardRelatedColumnName(ctx, columnName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1DashboardRelatedColumnNameResponse(rsp)
}

// GetApiV1DashboardDashboardIdFiltersetsWithResponse request returning *GetApiV1DashboardDashboardIdFiltersetsResponse
func (c *ClientWithResponses) GetApiV1DashboardDashboardIdFiltersetsWithResponse(ctx context.Context, dashboardId int, reqEditors ...RequestEditorFn) (*GetApiV1DashboardDashboardIdFiltersetsResponse, error) {
	rsp, err := c.GetApiV1DashboardDashboardIdFiltersets(ctx, dashboardId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1DashboardDashboardIdFiltersetsResponse(rsp)
}

// PostApiV1DashboardDashboardIdFiltersetsWithBodyWithResponse request with arbitrary body returning *PostApiV1DashboardDashboardIdFiltersetsResponse
func (c *ClientWithResponses) PostApiV1DashboardDashboardIdFiltersetsWithBodyWithResponse(ctx context.Context, dashboardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1DashboardDashboardIdFiltersetsResponse, error) {
	rsp, err := c.PostApiV1DashboardDashboardIdFiltersetsWithBody(ctx, dashboardId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1DashboardDashboardIdFiltersetsResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1DashboardDashboardIdFiltersetsWithResponse(ctx context.Context, dashboardId int, body PostApiV1DashboardDashboardIdFiltersetsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1DashboardDashboardIdFiltersetsResponse, error) {
	rsp, err := c.PostApiV1DashboardDashboardIdFiltersets(ctx, dashboardId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1DashboardDashboardIdFiltersetsResponse(rsp)
}

// DeleteApiV1DashboardDashboardIdFiltersetsPkWithResponse request returning *DeleteApiV1DashboardDashboardIdFiltersetsPkResponse
func (c *ClientWithResponses) DeleteApiV1DashboardDashboardIdFiltersetsPkWithResponse(ctx context.Context, dashboardId int, pk int, reqEditors ...RequestEditorFn) (*DeleteApiV1DashboardDashboardIdFiltersetsPkResponse, error) {
	rsp, err := c.DeleteApiV1DashboardDashboardIdFiltersetsPk(ctx, dashboardId, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1DashboardDashboardIdFiltersetsPkResponse(rsp)
}

// PutApiV1DashboardDashboardIdFiltersetsPkWithBodyWithResponse request with arbitrary body returning *PutApiV1DashboardDashboardIdFiltersetsPkResponse
func (c *ClientWithResponses) PutApiV1DashboardDashboardIdFiltersetsPkWithBodyWithResponse(ctx context.Context, dashboardId int, pk int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1DashboardDashboardIdFiltersetsPkResponse, error) {
	rsp, err := c.PutApiV1DashboardDashboardIdFiltersetsPkWithBody(ctx, dashboardId, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1DashboardDashboardIdFiltersetsPkResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1DashboardDashboardIdFiltersetsPkWithResponse(ctx context.Context, dashboardId int, pk int, body PutApiV1DashboardDashboardIdFiltersetsPkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1DashboardDashboardIdFiltersetsPkResponse, error) {
	rsp, err := c.PutApiV1DashboardDashboardIdFiltersetsPk(ctx, dashboardId, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1DashboardDashboardIdFiltersetsPkResponse(rsp)
}

// GetApiV1DashboardIdOrSlugWithResponse request returning *GetApiV1DashboardIdOrSlugResponse
func (c *ClientWithResponses) GetApiV1DashboardIdOrSlugWithResponse(ctx context.Context, idOrSlug string, reqEditors ...RequestEditorFn) (*GetApiV1DashboardIdOrSlugResponse, error) {
	rsp, err := c.GetApiV1DashboardIdOrSlug(ctx, idOrSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1DashboardIdOrSlugResponse(rsp)
}

// GetApiV1DashboardIdOrSlugChartsWithResponse request returning *GetApiV1DashboardIdOrSlugChartsResponse
func (c *ClientWithResponses) GetApiV1DashboardIdOrSlugChartsWithResponse(ctx context.Context, idOrSlug string, reqEditors ...RequestEditorFn) (*GetApiV1DashboardIdOrSlugChartsResponse, error) {
	rsp, err := c.GetApiV1DashboardIdOrSlugCharts(ctx, idOrSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1DashboardIdOrSlugChartsResponse(rsp)
}

// GetApiV1DashboardIdOrSlugDatasetsWithResponse request returning *GetApiV1DashboardIdOrSlugDatasetsResponse
func (c *ClientWithResponses) GetApiV1DashboardIdOrSlugDatasetsWithResponse(ctx context.Context, idOrSlug string, reqEditors ...RequestEditorFn) (*GetApiV1DashboardIdOrSlugDatasetsResponse, error) {
	rsp, err := c.GetApiV1DashboardIdOrSlugDatasets(ctx, idOrSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1DashboardIdOrSlugDatasetsResponse(rsp)
}

// DeleteApiV1DashboardIdOrSlugEmbeddedWithResponse request returning *DeleteApiV1DashboardIdOrSlugEmbeddedResponse
func (c *ClientWithResponses) DeleteApiV1DashboardIdOrSlugEmbeddedWithResponse(ctx context.Context, idOrSlug string, reqEditors ...RequestEditorFn) (*DeleteApiV1DashboardIdOrSlugEmbeddedResponse, error) {
	rsp, err := c.DeleteApiV1DashboardIdOrSlugEmbedded(ctx, idOrSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1DashboardIdOrSlugEmbeddedResponse(rsp)
}

// GetApiV1DashboardIdOrSlugEmbeddedWithResponse request returning *GetApiV1DashboardIdOrSlugEmbeddedResponse
func (c *ClientWithResponses) GetApiV1DashboardIdOrSlugEmbeddedWithResponse(ctx context.Context, idOrSlug string, reqEditors ...RequestEditorFn) (*GetApiV1DashboardIdOrSlugEmbeddedResponse, error) {
	rsp, err := c.GetApiV1DashboardIdOrSlugEmbedded(ctx, idOrSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1DashboardIdOrSlugEmbeddedResponse(rsp)
}

// PostApiV1DashboardIdOrSlugEmbeddedWithBodyWithResponse request with arbitrary body returning *PostApiV1DashboardIdOrSlugEmbeddedResponse
func (c *ClientWithResponses) PostApiV1DashboardIdOrSlugEmbeddedWithBodyWithResponse(ctx context.Context, idOrSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1DashboardIdOrSlugEmbeddedResponse, error) {
	rsp, err := c.PostApiV1DashboardIdOrSlugEmbeddedWithBody(ctx, idOrSlug, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1DashboardIdOrSlugEmbeddedResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1DashboardIdOrSlugEmbeddedWithResponse(ctx context.Context, idOrSlug string, body PostApiV1DashboardIdOrSlugEmbeddedJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1DashboardIdOrSlugEmbeddedResponse, error) {
	rsp, err := c.PostApiV1DashboardIdOrSlugEmbedded(ctx, idOrSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1DashboardIdOrSlugEmbeddedResponse(rsp)
}

// PutApiV1DashboardIdOrSlugEmbeddedWithBodyWithResponse request with arbitrary body returning *PutApiV1DashboardIdOrSlugEmbeddedResponse
func (c *ClientWithResponses) PutApiV1DashboardIdOrSlugEmbeddedWithBodyWithResponse(ctx context.Context, idOrSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1DashboardIdOrSlugEmbeddedResponse, error) {
	rsp, err := c.PutApiV1DashboardIdOrSlugEmbeddedWithBody(ctx, idOrSlug, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1DashboardIdOrSlugEmbeddedResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1DashboardIdOrSlugEmbeddedWithResponse(ctx context.Context, idOrSlug string, body PutApiV1DashboardIdOrSlugEmbeddedJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1DashboardIdOrSlugEmbeddedResponse, error) {
	rsp, err := c.PutApiV1DashboardIdOrSlugEmbedded(ctx, idOrSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1DashboardIdOrSlugEmbeddedResponse(rsp)
}

// DeleteApiV1DashboardPkWithResponse request returning *DeleteApiV1DashboardPkResponse
func (c *ClientWithResponses) DeleteApiV1DashboardPkWithResponse(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*DeleteApiV1DashboardPkResponse, error) {
	rsp, err := c.DeleteApiV1DashboardPk(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1DashboardPkResponse(rsp)
}

// PutApiV1DashboardPkWithBodyWithResponse request with arbitrary body returning *PutApiV1DashboardPkResponse
func (c *ClientWithResponses) PutApiV1DashboardPkWithBodyWithResponse(ctx context.Context, pk int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1DashboardPkResponse, error) {
	rsp, err := c.PutApiV1DashboardPkWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1DashboardPkResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1DashboardPkWithResponse(ctx context.Context, pk int, body PutApiV1DashboardPkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1DashboardPkResponse, error) {
	rsp, err := c.PutApiV1DashboardPk(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1DashboardPkResponse(rsp)
}

// PostApiV1DashboardPkFilterStateWithBodyWithResponse request with arbitrary body returning *PostApiV1DashboardPkFilterStateResponse
func (c *ClientWithResponses) PostApiV1DashboardPkFilterStateWithBodyWithResponse(ctx context.Context, pk int, params *PostApiV1DashboardPkFilterStateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1DashboardPkFilterStateResponse, error) {
	rsp, err := c.PostApiV1DashboardPkFilterStateWithBody(ctx, pk, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1DashboardPkFilterStateResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1DashboardPkFilterStateWithResponse(ctx context.Context, pk int, params *PostApiV1DashboardPkFilterStateParams, body PostApiV1DashboardPkFilterStateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1DashboardPkFilterStateResponse, error) {
	rsp, err := c.PostApiV1DashboardPkFilterState(ctx, pk, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1DashboardPkFilterStateResponse(rsp)
}

// DeleteApiV1DashboardPkFilterStateKeyWithResponse request returning *DeleteApiV1DashboardPkFilterStateKeyResponse
func (c *ClientWithResponses) DeleteApiV1DashboardPkFilterStateKeyWithResponse(ctx context.Context, pk int, key string, reqEditors ...RequestEditorFn) (*DeleteApiV1DashboardPkFilterStateKeyResponse, error) {
	rsp, err := c.DeleteApiV1DashboardPkFilterStateKey(ctx, pk, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1DashboardPkFilterStateKeyResponse(rsp)
}

// GetApiV1DashboardPkFilterStateKeyWithResponse request returning *GetApiV1DashboardPkFilterStateKeyResponse
func (c *ClientWithResponses) GetApiV1DashboardPkFilterStateKeyWithResponse(ctx context.Context, pk int, key string, reqEditors ...RequestEditorFn) (*GetApiV1DashboardPkFilterStateKeyResponse, error) {
	rsp, err := c.GetApiV1DashboardPkFilterStateKey(ctx, pk, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1DashboardPkFilterStateKeyResponse(rsp)
}

// PutApiV1DashboardPkFilterStateKeyWithBodyWithResponse request with arbitrary body returning *PutApiV1DashboardPkFilterStateKeyResponse
func (c *ClientWithResponses) PutApiV1DashboardPkFilterStateKeyWithBodyWithResponse(ctx context.Context, pk int, key string, params *PutApiV1DashboardPkFilterStateKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1DashboardPkFilterStateKeyResponse, error) {
	rsp, err := c.PutApiV1DashboardPkFilterStateKeyWithBody(ctx, pk, key, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1DashboardPkFilterStateKeyResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1DashboardPkFilterStateKeyWithResponse(ctx context.Context, pk int, key string, params *PutApiV1DashboardPkFilterStateKeyParams, body PutApiV1DashboardPkFilterStateKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1DashboardPkFilterStateKeyResponse, error) {
	rsp, err := c.PutApiV1DashboardPkFilterStateKey(ctx, pk, key, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1DashboardPkFilterStateKeyResponse(rsp)
}

// PostApiV1DashboardPkPermalinkWithBodyWithResponse request with arbitrary body returning *PostApiV1DashboardPkPermalinkResponse
func (c *ClientWithResponses) PostApiV1DashboardPkPermalinkWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1DashboardPkPermalinkResponse, error) {
	rsp, err := c.PostApiV1DashboardPkPermalinkWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1DashboardPkPermalinkResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1DashboardPkPermalinkWithResponse(ctx context.Context, pk string, body PostApiV1DashboardPkPermalinkJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1DashboardPkPermalinkResponse, error) {
	rsp, err := c.PostApiV1DashboardPkPermalink(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1DashboardPkPermalinkResponse(rsp)
}

// GetApiV1DashboardPkThumbnailDigestWithResponse request returning *GetApiV1DashboardPkThumbnailDigestResponse
func (c *ClientWithResponses) GetApiV1DashboardPkThumbnailDigestWithResponse(ctx context.Context, pk int, digest string, params *GetApiV1DashboardPkThumbnailDigestParams, reqEditors ...RequestEditorFn) (*GetApiV1DashboardPkThumbnailDigestResponse, error) {
	rsp, err := c.GetApiV1DashboardPkThumbnailDigest(ctx, pk, digest, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1DashboardPkThumbnailDigestResponse(rsp)
}

// GetApiV1DatabaseWithResponse request returning *GetApiV1DatabaseResponse
func (c *ClientWithResponses) GetApiV1DatabaseWithResponse(ctx context.Context, params *GetApiV1DatabaseParams, reqEditors ...RequestEditorFn) (*GetApiV1DatabaseResponse, error) {
	rsp, err := c.GetApiV1Database(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1DatabaseResponse(rsp)
}

// PostApiV1DatabaseWithBodyWithResponse request with arbitrary body returning *PostApiV1DatabaseResponse
func (c *ClientWithResponses) PostApiV1DatabaseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1DatabaseResponse, error) {
	rsp, err := c.PostApiV1DatabaseWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1DatabaseResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1DatabaseWithResponse(ctx context.Context, body PostApiV1DatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1DatabaseResponse, error) {
	rsp, err := c.PostApiV1Database(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1DatabaseResponse(rsp)
}

// GetApiV1DatabaseInfoWithResponse request returning *GetApiV1DatabaseInfoResponse
func (c *ClientWithResponses) GetApiV1DatabaseInfoWithResponse(ctx context.Context, params *GetApiV1DatabaseInfoParams, reqEditors ...RequestEditorFn) (*GetApiV1DatabaseInfoResponse, error) {
	rsp, err := c.GetApiV1DatabaseInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1DatabaseInfoResponse(rsp)
}

// GetApiV1DatabaseAvailableWithResponse request returning *GetApiV1DatabaseAvailableResponse
func (c *ClientWithResponses) GetApiV1DatabaseAvailableWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1DatabaseAvailableResponse, error) {
	rsp, err := c.GetApiV1DatabaseAvailable(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1DatabaseAvailableResponse(rsp)
}

// GetApiV1DatabaseExportWithResponse request returning *GetApiV1DatabaseExportResponse
func (c *ClientWithResponses) GetApiV1DatabaseExportWithResponse(ctx context.Context, params *GetApiV1DatabaseExportParams, reqEditors ...RequestEditorFn) (*GetApiV1DatabaseExportResponse, error) {
	rsp, err := c.GetApiV1DatabaseExport(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1DatabaseExportResponse(rsp)
}

// PostApiV1DatabaseImportWithBodyWithResponse request with arbitrary body returning *PostApiV1DatabaseImportResponse
func (c *ClientWithResponses) PostApiV1DatabaseImportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1DatabaseImportResponse, error) {
	rsp, err := c.PostApiV1DatabaseImportWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1DatabaseImportResponse(rsp)
}

// PostApiV1DatabaseTestConnectionWithBodyWithResponse request with arbitrary body returning *PostApiV1DatabaseTestConnectionResponse
func (c *ClientWithResponses) PostApiV1DatabaseTestConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1DatabaseTestConnectionResponse, error) {
	rsp, err := c.PostApiV1DatabaseTestConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1DatabaseTestConnectionResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1DatabaseTestConnectionWithResponse(ctx context.Context, body PostApiV1DatabaseTestConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1DatabaseTestConnectionResponse, error) {
	rsp, err := c.PostApiV1DatabaseTestConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1DatabaseTestConnectionResponse(rsp)
}

// PostApiV1DatabaseValidateParametersWithBodyWithResponse request with arbitrary body returning *PostApiV1DatabaseValidateParametersResponse
func (c *ClientWithResponses) PostApiV1DatabaseValidateParametersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1DatabaseValidateParametersResponse, error) {
	rsp, err := c.PostApiV1DatabaseValidateParametersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1DatabaseValidateParametersResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1DatabaseValidateParametersWithResponse(ctx context.Context, body PostApiV1DatabaseValidateParametersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1DatabaseValidateParametersResponse, error) {
	rsp, err := c.PostApiV1DatabaseValidateParameters(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1DatabaseValidateParametersResponse(rsp)
}

// DeleteApiV1DatabasePkWithResponse request returning *DeleteApiV1DatabasePkResponse
func (c *ClientWithResponses) DeleteApiV1DatabasePkWithResponse(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*DeleteApiV1DatabasePkResponse, error) {
	rsp, err := c.DeleteApiV1DatabasePk(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1DatabasePkResponse(rsp)
}

// GetApiV1DatabasePkWithResponse request returning *GetApiV1DatabasePkResponse
func (c *ClientWithResponses) GetApiV1DatabasePkWithResponse(ctx context.Context, pk int, params *GetApiV1DatabasePkParams, reqEditors ...RequestEditorFn) (*GetApiV1DatabasePkResponse, error) {
	rsp, err := c.GetApiV1DatabasePk(ctx, pk, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1DatabasePkResponse(rsp)
}

// PutApiV1DatabasePkWithBodyWithResponse request with arbitrary body returning *PutApiV1DatabasePkResponse
func (c *ClientWithResponses) PutApiV1DatabasePkWithBodyWithResponse(ctx context.Context, pk int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1DatabasePkResponse, error) {
	rsp, err := c.PutApiV1DatabasePkWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1DatabasePkResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1DatabasePkWithResponse(ctx context.Context, pk int, body PutApiV1DatabasePkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1DatabasePkResponse, error) {
	rsp, err := c.PutApiV1DatabasePk(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1DatabasePkResponse(rsp)
}

// GetApiV1DatabasePkFunctionNamesWithResponse request returning *GetApiV1DatabasePkFunctionNamesResponse
func (c *ClientWithResponses) GetApiV1DatabasePkFunctionNamesWithResponse(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*GetApiV1DatabasePkFunctionNamesResponse, error) {
	rsp, err := c.GetApiV1DatabasePkFunctionNames(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1DatabasePkFunctionNamesResponse(rsp)
}

// GetApiV1DatabasePkRelatedObjectsWithResponse request returning *GetApiV1DatabasePkRelatedObjectsResponse
func (c *ClientWithResponses) GetApiV1DatabasePkRelatedObjectsWithResponse(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*GetApiV1DatabasePkRelatedObjectsResponse, error) {
	rsp, err := c.GetApiV1DatabasePkRelatedObjects(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1DatabasePkRelatedObjectsResponse(rsp)
}

// GetApiV1DatabasePkSchemasWithResponse request returning *GetApiV1DatabasePkSchemasResponse
func (c *ClientWithResponses) GetApiV1DatabasePkSchemasWithResponse(ctx context.Context, pk int, params *GetApiV1DatabasePkSchemasParams, reqEditors ...RequestEditorFn) (*GetApiV1DatabasePkSchemasResponse, error) {
	rsp, err := c.GetApiV1DatabasePkSchemas(ctx, pk, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1DatabasePkSchemasResponse(rsp)
}

// GetApiV1DatabasePkSelectStarTableNameWithResponse request returning *GetApiV1DatabasePkSelectStarTableNameResponse
func (c *ClientWithResponses) GetApiV1DatabasePkSelectStarTableNameWithResponse(ctx context.Context, pk int, tableName string, reqEditors ...RequestEditorFn) (*GetApiV1DatabasePkSelectStarTableNameResponse, error) {
	rsp, err := c.GetApiV1DatabasePkSelectStarTableName(ctx, pk, tableName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1DatabasePkSelectStarTableNameResponse(rsp)
}

// GetApiV1DatabasePkSelectStarTableNameSchemaNameWithResponse request returning *GetApiV1DatabasePkSelectStarTableNameSchemaNameResponse
func (c *ClientWithResponses) GetApiV1DatabasePkSelectStarTableNameSchemaNameWithResponse(ctx context.Context, pk int, tableName string, schemaName string, reqEditors ...RequestEditorFn) (*GetApiV1DatabasePkSelectStarTableNameSchemaNameResponse, error) {
	rsp, err := c.GetApiV1DatabasePkSelectStarTableNameSchemaName(ctx, pk, tableName, schemaName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1DatabasePkSelectStarTableNameSchemaNameResponse(rsp)
}

// GetApiV1DatabasePkTableTableNameSchemaNameWithResponse request returning *GetApiV1DatabasePkTableTableNameSchemaNameResponse
func (c *ClientWithResponses) GetApiV1DatabasePkTableTableNameSchemaNameWithResponse(ctx context.Context, pk int, tableName string, schemaName string, reqEditors ...RequestEditorFn) (*GetApiV1DatabasePkTableTableNameSchemaNameResponse, error) {
	rsp, err := c.GetApiV1DatabasePkTableTableNameSchemaName(ctx, pk, tableName, schemaName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1DatabasePkTableTableNameSchemaNameResponse(rsp)
}

// GetApiV1DatabasePkTableExtraTableNameSchemaNameWithResponse request returning *GetApiV1DatabasePkTableExtraTableNameSchemaNameResponse
func (c *ClientWithResponses) GetApiV1DatabasePkTableExtraTableNameSchemaNameWithResponse(ctx context.Context, pk int, tableName string, schemaName string, reqEditors ...RequestEditorFn) (*GetApiV1DatabasePkTableExtraTableNameSchemaNameResponse, error) {
	rsp, err := c.GetApiV1DatabasePkTableExtraTableNameSchemaName(ctx, pk, tableName, schemaName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1DatabasePkTableExtraTableNameSchemaNameResponse(rsp)
}

// PostApiV1DatabasePkValidateSqlWithBodyWithResponse request with arbitrary body returning *PostApiV1DatabasePkValidateSqlResponse
func (c *ClientWithResponses) PostApiV1DatabasePkValidateSqlWithBodyWithResponse(ctx context.Context, pk int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1DatabasePkValidateSqlResponse, error) {
	rsp, err := c.PostApiV1DatabasePkValidateSqlWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1DatabasePkValidateSqlResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1DatabasePkValidateSqlWithResponse(ctx context.Context, pk int, body PostApiV1DatabasePkValidateSqlJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1DatabasePkValidateSqlResponse, error) {
	rsp, err := c.PostApiV1DatabasePkValidateSql(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1DatabasePkValidateSqlResponse(rsp)
}

// DeleteApiV1DatasetWithResponse request returning *DeleteApiV1DatasetResponse
func (c *ClientWithResponses) DeleteApiV1DatasetWithResponse(ctx context.Context, params *DeleteApiV1DatasetParams, reqEditors ...RequestEditorFn) (*DeleteApiV1DatasetResponse, error) {
	rsp, err := c.DeleteApiV1Dataset(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1DatasetResponse(rsp)
}

// GetApiV1DatasetWithResponse request returning *GetApiV1DatasetResponse
func (c *ClientWithResponses) GetApiV1DatasetWithResponse(ctx context.Context, params *GetApiV1DatasetParams, reqEditors ...RequestEditorFn) (*GetApiV1DatasetResponse, error) {
	rsp, err := c.GetApiV1Dataset(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1DatasetResponse(rsp)
}

// PostApiV1DatasetWithBodyWithResponse request with arbitrary body returning *PostApiV1DatasetResponse
func (c *ClientWithResponses) PostApiV1DatasetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1DatasetResponse, error) {
	rsp, err := c.PostApiV1DatasetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1DatasetResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1DatasetWithResponse(ctx context.Context, body PostApiV1DatasetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1DatasetResponse, error) {
	rsp, err := c.PostApiV1Dataset(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1DatasetResponse(rsp)
}

// GetApiV1DatasetInfoWithResponse request returning *GetApiV1DatasetInfoResponse
func (c *ClientWithResponses) GetApiV1DatasetInfoWithResponse(ctx context.Context, params *GetApiV1DatasetInfoParams, reqEditors ...RequestEditorFn) (*GetApiV1DatasetInfoResponse, error) {
	rsp, err := c.GetApiV1DatasetInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1DatasetInfoResponse(rsp)
}

// GetApiV1DatasetDistinctColumnNameWithResponse request returning *GetApiV1DatasetDistinctColumnNameResponse
func (c *ClientWithResponses) GetApiV1DatasetDistinctColumnNameWithResponse(ctx context.Context, columnName string, params *GetApiV1DatasetDistinctColumnNameParams, reqEditors ...RequestEditorFn) (*GetApiV1DatasetDistinctColumnNameResponse, error) {
	rsp, err := c.GetApiV1DatasetDistinctColumnName(ctx, columnName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1DatasetDistinctColumnNameResponse(rsp)
}

// PostApiV1DatasetDuplicateWithBodyWithResponse request with arbitrary body returning *PostApiV1DatasetDuplicateResponse
func (c *ClientWithResponses) PostApiV1DatasetDuplicateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1DatasetDuplicateResponse, error) {
	rsp, err := c.PostApiV1DatasetDuplicateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1DatasetDuplicateResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1DatasetDuplicateWithResponse(ctx context.Context, body PostApiV1DatasetDuplicateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1DatasetDuplicateResponse, error) {
	rsp, err := c.PostApiV1DatasetDuplicate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1DatasetDuplicateResponse(rsp)
}

// GetApiV1DatasetExportWithResponse request returning *GetApiV1DatasetExportResponse
func (c *ClientWithResponses) GetApiV1DatasetExportWithResponse(ctx context.Context, params *GetApiV1DatasetExportParams, reqEditors ...RequestEditorFn) (*GetApiV1DatasetExportResponse, error) {
	rsp, err := c.GetApiV1DatasetExport(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1DatasetExportResponse(rsp)
}

// PostApiV1DatasetImportWithBodyWithResponse request with arbitrary body returning *PostApiV1DatasetImportResponse
func (c *ClientWithResponses) PostApiV1DatasetImportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1DatasetImportResponse, error) {
	rsp, err := c.PostApiV1DatasetImportWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1DatasetImportResponse(rsp)
}

// GetApiV1DatasetRelatedColumnNameWithResponse request returning *GetApiV1DatasetRelatedColumnNameResponse
func (c *ClientWithResponses) GetApiV1DatasetRelatedColumnNameWithResponse(ctx context.Context, columnName string, params *GetApiV1DatasetRelatedColumnNameParams, reqEditors ...RequestEditorFn) (*GetApiV1DatasetRelatedColumnNameResponse, error) {
	rsp, err := c.GetApiV1DatasetRelatedColumnName(ctx, columnName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1DatasetRelatedColumnNameResponse(rsp)
}

// DeleteApiV1DatasetPkWithResponse request returning *DeleteApiV1DatasetPkResponse
func (c *ClientWithResponses) DeleteApiV1DatasetPkWithResponse(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*DeleteApiV1DatasetPkResponse, error) {
	rsp, err := c.DeleteApiV1DatasetPk(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1DatasetPkResponse(rsp)
}

// GetApiV1DatasetPkWithResponse request returning *GetApiV1DatasetPkResponse
func (c *ClientWithResponses) GetApiV1DatasetPkWithResponse(ctx context.Context, pk int, params *GetApiV1DatasetPkParams, reqEditors ...RequestEditorFn) (*GetApiV1DatasetPkResponse, error) {
	rsp, err := c.GetApiV1DatasetPk(ctx, pk, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1DatasetPkResponse(rsp)
}

// PutApiV1DatasetPkWithBodyWithResponse request with arbitrary body returning *PutApiV1DatasetPkResponse
func (c *ClientWithResponses) PutApiV1DatasetPkWithBodyWithResponse(ctx context.Context, pk int, params *PutApiV1DatasetPkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1DatasetPkResponse, error) {
	rsp, err := c.PutApiV1DatasetPkWithBody(ctx, pk, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1DatasetPkResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1DatasetPkWithResponse(ctx context.Context, pk int, params *PutApiV1DatasetPkParams, body PutApiV1DatasetPkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1DatasetPkResponse, error) {
	rsp, err := c.PutApiV1DatasetPk(ctx, pk, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1DatasetPkResponse(rsp)
}

// DeleteApiV1DatasetPkColumnColumnIdWithResponse request returning *DeleteApiV1DatasetPkColumnColumnIdResponse
func (c *ClientWithResponses) DeleteApiV1DatasetPkColumnColumnIdWithResponse(ctx context.Context, pk int, columnId int, reqEditors ...RequestEditorFn) (*DeleteApiV1DatasetPkColumnColumnIdResponse, error) {
	rsp, err := c.DeleteApiV1DatasetPkColumnColumnId(ctx, pk, columnId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1DatasetPkColumnColumnIdResponse(rsp)
}

// DeleteApiV1DatasetPkMetricMetricIdWithResponse request returning *DeleteApiV1DatasetPkMetricMetricIdResponse
func (c *ClientWithResponses) DeleteApiV1DatasetPkMetricMetricIdWithResponse(ctx context.Context, pk int, metricId int, reqEditors ...RequestEditorFn) (*DeleteApiV1DatasetPkMetricMetricIdResponse, error) {
	rsp, err := c.DeleteApiV1DatasetPkMetricMetricId(ctx, pk, metricId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1DatasetPkMetricMetricIdResponse(rsp)
}

// PutApiV1DatasetPkRefreshWithResponse request returning *PutApiV1DatasetPkRefreshResponse
func (c *ClientWithResponses) PutApiV1DatasetPkRefreshWithResponse(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*PutApiV1DatasetPkRefreshResponse, error) {
	rsp, err := c.PutApiV1DatasetPkRefresh(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1DatasetPkRefreshResponse(rsp)
}

// GetApiV1DatasetPkRelatedObjectsWithResponse request returning *GetApiV1DatasetPkRelatedObjectsResponse
func (c *ClientWithResponses) GetApiV1DatasetPkRelatedObjectsWithResponse(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*GetApiV1DatasetPkRelatedObjectsResponse, error) {
	rsp, err := c.GetApiV1DatasetPkRelatedObjects(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1DatasetPkRelatedObjectsResponse(rsp)
}

// GetApiV1EmbeddedDashboardUuidWithResponse request returning *GetApiV1EmbeddedDashboardUuidResponse
func (c *ClientWithResponses) GetApiV1EmbeddedDashboardUuidWithResponse(ctx context.Context, uuid string, reqEditors ...RequestEditorFn) (*GetApiV1EmbeddedDashboardUuidResponse, error) {
	rsp, err := c.GetApiV1EmbeddedDashboardUuid(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1EmbeddedDashboardUuidResponse(rsp)
}

// GetApiV1ExploreWithResponse request returning *GetApiV1ExploreResponse
func (c *ClientWithResponses) GetApiV1ExploreWithResponse(ctx context.Context, params *GetApiV1ExploreParams, reqEditors ...RequestEditorFn) (*GetApiV1ExploreResponse, error) {
	rsp, err := c.GetApiV1Explore(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ExploreResponse(rsp)
}

// PostApiV1ExploreFormDataWithBodyWithResponse request with arbitrary body returning *PostApiV1ExploreFormDataResponse
func (c *ClientWithResponses) PostApiV1ExploreFormDataWithBodyWithResponse(ctx context.Context, params *PostApiV1ExploreFormDataParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1ExploreFormDataResponse, error) {
	rsp, err := c.PostApiV1ExploreFormDataWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1ExploreFormDataResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1ExploreFormDataWithResponse(ctx context.Context, params *PostApiV1ExploreFormDataParams, body PostApiV1ExploreFormDataJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1ExploreFormDataResponse, error) {
	rsp, err := c.PostApiV1ExploreFormData(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1ExploreFormDataResponse(rsp)
}

// DeleteApiV1ExploreFormDataKeyWithResponse request returning *DeleteApiV1ExploreFormDataKeyResponse
func (c *ClientWithResponses) DeleteApiV1ExploreFormDataKeyWithResponse(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*DeleteApiV1ExploreFormDataKeyResponse, error) {
	rsp, err := c.DeleteApiV1ExploreFormDataKey(ctx, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1ExploreFormDataKeyResponse(rsp)
}

// GetApiV1ExploreFormDataKeyWithResponse request returning *GetApiV1ExploreFormDataKeyResponse
func (c *ClientWithResponses) GetApiV1ExploreFormDataKeyWithResponse(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*GetApiV1ExploreFormDataKeyResponse, error) {
	rsp, err := c.GetApiV1ExploreFormDataKey(ctx, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ExploreFormDataKeyResponse(rsp)
}

// PutApiV1ExploreFormDataKeyWithBodyWithResponse request with arbitrary body returning *PutApiV1ExploreFormDataKeyResponse
func (c *ClientWithResponses) PutApiV1ExploreFormDataKeyWithBodyWithResponse(ctx context.Context, key string, params *PutApiV1ExploreFormDataKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1ExploreFormDataKeyResponse, error) {
	rsp, err := c.PutApiV1ExploreFormDataKeyWithBody(ctx, key, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1ExploreFormDataKeyResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1ExploreFormDataKeyWithResponse(ctx context.Context, key string, params *PutApiV1ExploreFormDataKeyParams, body PutApiV1ExploreFormDataKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1ExploreFormDataKeyResponse, error) {
	rsp, err := c.PutApiV1ExploreFormDataKey(ctx, key, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1ExploreFormDataKeyResponse(rsp)
}

// PostApiV1ExplorePermalinkWithBodyWithResponse request with arbitrary body returning *PostApiV1ExplorePermalinkResponse
func (c *ClientWithResponses) PostApiV1ExplorePermalinkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1ExplorePermalinkResponse, error) {
	rsp, err := c.PostApiV1ExplorePermalinkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1ExplorePermalinkResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1ExplorePermalinkWithResponse(ctx context.Context, body PostApiV1ExplorePermalinkJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1ExplorePermalinkResponse, error) {
	rsp, err := c.PostApiV1ExplorePermalink(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1ExplorePermalinkResponse(rsp)
}

// GetApiV1ExplorePermalinkKeyWithResponse request returning *GetApiV1ExplorePermalinkKeyResponse
func (c *ClientWithResponses) GetApiV1ExplorePermalinkKeyWithResponse(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*GetApiV1ExplorePermalinkKeyResponse, error) {
	rsp, err := c.GetApiV1ExplorePermalinkKey(ctx, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ExplorePermalinkKeyResponse(rsp)
}

// GetApiV1LogWithResponse request returning *GetApiV1LogResponse
func (c *ClientWithResponses) GetApiV1LogWithResponse(ctx context.Context, params *GetApiV1LogParams, reqEditors ...RequestEditorFn) (*GetApiV1LogResponse, error) {
	rsp, err := c.GetApiV1Log(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1LogResponse(rsp)
}

// PostApiV1LogWithBodyWithResponse request with arbitrary body returning *PostApiV1LogResponse
func (c *ClientWithResponses) PostApiV1LogWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1LogResponse, error) {
	rsp, err := c.PostApiV1LogWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1LogResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1LogWithResponse(ctx context.Context, body PostApiV1LogJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1LogResponse, error) {
	rsp, err := c.PostApiV1Log(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1LogResponse(rsp)
}

// GetApiV1LogPkWithResponse request returning *GetApiV1LogPkResponse
func (c *ClientWithResponses) GetApiV1LogPkWithResponse(ctx context.Context, pk int, params *GetApiV1LogPkParams, reqEditors ...RequestEditorFn) (*GetApiV1LogPkResponse, error) {
	rsp, err := c.GetApiV1LogPk(ctx, pk, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1LogPkResponse(rsp)
}

// GetApiV1MeWithResponse request returning *GetApiV1MeResponse
func (c *ClientWithResponses) GetApiV1MeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1MeResponse, error) {
	rsp, err := c.GetApiV1Me(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1MeResponse(rsp)
}

// GetApiV1MeRolesWithResponse request returning *GetApiV1MeRolesResponse
func (c *ClientWithResponses) GetApiV1MeRolesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1MeRolesResponse, error) {
	rsp, err := c.GetApiV1MeRoles(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1MeRolesResponse(rsp)
}

// GetApiV1MenuWithResponse request returning *GetApiV1MenuResponse
func (c *ClientWithResponses) GetApiV1MenuWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1MenuResponse, error) {
	rsp, err := c.GetApiV1Menu(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1MenuResponse(rsp)
}

// GetApiV1QueryWithResponse request returning *GetApiV1QueryResponse
func (c *ClientWithResponses) GetApiV1QueryWithResponse(ctx context.Context, params *GetApiV1QueryParams, reqEditors ...RequestEditorFn) (*GetApiV1QueryResponse, error) {
	rsp, err := c.GetApiV1Query(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1QueryResponse(rsp)
}

// GetApiV1QueryDistinctColumnNameWithResponse request returning *GetApiV1QueryDistinctColumnNameResponse
func (c *ClientWithResponses) GetApiV1QueryDistinctColumnNameWithResponse(ctx context.Context, columnName string, params *GetApiV1QueryDistinctColumnNameParams, reqEditors ...RequestEditorFn) (*GetApiV1QueryDistinctColumnNameResponse, error) {
	rsp, err := c.GetApiV1QueryDistinctColumnName(ctx, columnName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1QueryDistinctColumnNameResponse(rsp)
}

// GetApiV1QueryRelatedColumnNameWithResponse request returning *GetApiV1QueryRelatedColumnNameResponse
func (c *ClientWithResponses) GetApiV1QueryRelatedColumnNameWithResponse(ctx context.Context, columnName string, params *GetApiV1QueryRelatedColumnNameParams, reqEditors ...RequestEditorFn) (*GetApiV1QueryRelatedColumnNameResponse, error) {
	rsp, err := c.GetApiV1QueryRelatedColumnName(ctx, columnName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1QueryRelatedColumnNameResponse(rsp)
}

// GetApiV1QueryPkWithResponse request returning *GetApiV1QueryPkResponse
func (c *ClientWithResponses) GetApiV1QueryPkWithResponse(ctx context.Context, pk int, params *GetApiV1QueryPkParams, reqEditors ...RequestEditorFn) (*GetApiV1QueryPkResponse, error) {
	rsp, err := c.GetApiV1QueryPk(ctx, pk, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1QueryPkResponse(rsp)
}

// DeleteApiV1ReportWithResponse request returning *DeleteApiV1ReportResponse
func (c *ClientWithResponses) DeleteApiV1ReportWithResponse(ctx context.Context, params *DeleteApiV1ReportParams, reqEditors ...RequestEditorFn) (*DeleteApiV1ReportResponse, error) {
	rsp, err := c.DeleteApiV1Report(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1ReportResponse(rsp)
}

// GetApiV1ReportWithResponse request returning *GetApiV1ReportResponse
func (c *ClientWithResponses) GetApiV1ReportWithResponse(ctx context.Context, params *GetApiV1ReportParams, reqEditors ...RequestEditorFn) (*GetApiV1ReportResponse, error) {
	rsp, err := c.GetApiV1Report(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ReportResponse(rsp)
}

// PostApiV1ReportWithBodyWithResponse request with arbitrary body returning *PostApiV1ReportResponse
func (c *ClientWithResponses) PostApiV1ReportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1ReportResponse, error) {
	rsp, err := c.PostApiV1ReportWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1ReportResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1ReportWithResponse(ctx context.Context, body PostApiV1ReportJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1ReportResponse, error) {
	rsp, err := c.PostApiV1Report(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1ReportResponse(rsp)
}

// GetApiV1ReportInfoWithResponse request returning *GetApiV1ReportInfoResponse
func (c *ClientWithResponses) GetApiV1ReportInfoWithResponse(ctx context.Context, params *GetApiV1ReportInfoParams, reqEditors ...RequestEditorFn) (*GetApiV1ReportInfoResponse, error) {
	rsp, err := c.GetApiV1ReportInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ReportInfoResponse(rsp)
}

// GetApiV1ReportRelatedColumnNameWithResponse request returning *GetApiV1ReportRelatedColumnNameResponse
func (c *ClientWithResponses) GetApiV1ReportRelatedColumnNameWithResponse(ctx context.Context, columnName string, params *GetApiV1ReportRelatedColumnNameParams, reqEditors ...RequestEditorFn) (*GetApiV1ReportRelatedColumnNameResponse, error) {
	rsp, err := c.GetApiV1ReportRelatedColumnName(ctx, columnName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ReportRelatedColumnNameResponse(rsp)
}

// DeleteApiV1ReportPkWithResponse request returning *DeleteApiV1ReportPkResponse
func (c *ClientWithResponses) DeleteApiV1ReportPkWithResponse(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*DeleteApiV1ReportPkResponse, error) {
	rsp, err := c.DeleteApiV1ReportPk(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1ReportPkResponse(rsp)
}

// GetApiV1ReportPkWithResponse request returning *GetApiV1ReportPkResponse
func (c *ClientWithResponses) GetApiV1ReportPkWithResponse(ctx context.Context, pk int, params *GetApiV1ReportPkParams, reqEditors ...RequestEditorFn) (*GetApiV1ReportPkResponse, error) {
	rsp, err := c.GetApiV1ReportPk(ctx, pk, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ReportPkResponse(rsp)
}

// PutApiV1ReportPkWithBodyWithResponse request with arbitrary body returning *PutApiV1ReportPkResponse
func (c *ClientWithResponses) PutApiV1ReportPkWithBodyWithResponse(ctx context.Context, pk int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1ReportPkResponse, error) {
	rsp, err := c.PutApiV1ReportPkWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1ReportPkResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1ReportPkWithResponse(ctx context.Context, pk int, body PutApiV1ReportPkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1ReportPkResponse, error) {
	rsp, err := c.PutApiV1ReportPk(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1ReportPkResponse(rsp)
}

// GetApiV1ReportPkLogWithResponse request returning *GetApiV1ReportPkLogResponse
func (c *ClientWithResponses) GetApiV1ReportPkLogWithResponse(ctx context.Context, pk int, params *GetApiV1ReportPkLogParams, reqEditors ...RequestEditorFn) (*GetApiV1ReportPkLogResponse, error) {
	rsp, err := c.GetApiV1ReportPkLog(ctx, pk, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ReportPkLogResponse(rsp)
}

// GetApiV1ReportPkLogLogIdWithResponse request returning *GetApiV1ReportPkLogLogIdResponse
func (c *ClientWithResponses) GetApiV1ReportPkLogLogIdWithResponse(ctx context.Context, pk int, logId int, params *GetApiV1ReportPkLogLogIdParams, reqEditors ...RequestEditorFn) (*GetApiV1ReportPkLogLogIdResponse, error) {
	rsp, err := c.GetApiV1ReportPkLogLogId(ctx, pk, logId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ReportPkLogLogIdResponse(rsp)
}

// DeleteApiV1SavedQueryWithResponse request returning *DeleteApiV1SavedQueryResponse
func (c *ClientWithResponses) DeleteApiV1SavedQueryWithResponse(ctx context.Context, params *DeleteApiV1SavedQueryParams, reqEditors ...RequestEditorFn) (*DeleteApiV1SavedQueryResponse, error) {
	rsp, err := c.DeleteApiV1SavedQuery(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1SavedQueryResponse(rsp)
}

// GetApiV1SavedQueryWithResponse request returning *GetApiV1SavedQueryResponse
func (c *ClientWithResponses) GetApiV1SavedQueryWithResponse(ctx context.Context, params *GetApiV1SavedQueryParams, reqEditors ...RequestEditorFn) (*GetApiV1SavedQueryResponse, error) {
	rsp, err := c.GetApiV1SavedQuery(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1SavedQueryResponse(rsp)
}

// PostApiV1SavedQueryWithBodyWithResponse request with arbitrary body returning *PostApiV1SavedQueryResponse
func (c *ClientWithResponses) PostApiV1SavedQueryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1SavedQueryResponse, error) {
	rsp, err := c.PostApiV1SavedQueryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1SavedQueryResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1SavedQueryWithResponse(ctx context.Context, body PostApiV1SavedQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1SavedQueryResponse, error) {
	rsp, err := c.PostApiV1SavedQuery(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1SavedQueryResponse(rsp)
}

// GetApiV1SavedQueryInfoWithResponse request returning *GetApiV1SavedQueryInfoResponse
func (c *ClientWithResponses) GetApiV1SavedQueryInfoWithResponse(ctx context.Context, params *GetApiV1SavedQueryInfoParams, reqEditors ...RequestEditorFn) (*GetApiV1SavedQueryInfoResponse, error) {
	rsp, err := c.GetApiV1SavedQueryInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1SavedQueryInfoResponse(rsp)
}

// GetApiV1SavedQueryDistinctColumnNameWithResponse request returning *GetApiV1SavedQueryDistinctColumnNameResponse
func (c *ClientWithResponses) GetApiV1SavedQueryDistinctColumnNameWithResponse(ctx context.Context, columnName string, params *GetApiV1SavedQueryDistinctColumnNameParams, reqEditors ...RequestEditorFn) (*GetApiV1SavedQueryDistinctColumnNameResponse, error) {
	rsp, err := c.GetApiV1SavedQueryDistinctColumnName(ctx, columnName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1SavedQueryDistinctColumnNameResponse(rsp)
}

// GetApiV1SavedQueryExportWithResponse request returning *GetApiV1SavedQueryExportResponse
func (c *ClientWithResponses) GetApiV1SavedQueryExportWithResponse(ctx context.Context, params *GetApiV1SavedQueryExportParams, reqEditors ...RequestEditorFn) (*GetApiV1SavedQueryExportResponse, error) {
	rsp, err := c.GetApiV1SavedQueryExport(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1SavedQueryExportResponse(rsp)
}

// PostApiV1SavedQueryImportWithBodyWithResponse request with arbitrary body returning *PostApiV1SavedQueryImportResponse
func (c *ClientWithResponses) PostApiV1SavedQueryImportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1SavedQueryImportResponse, error) {
	rsp, err := c.PostApiV1SavedQueryImportWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1SavedQueryImportResponse(rsp)
}

// GetApiV1SavedQueryRelatedColumnNameWithResponse request returning *GetApiV1SavedQueryRelatedColumnNameResponse
func (c *ClientWithResponses) GetApiV1SavedQueryRelatedColumnNameWithResponse(ctx context.Context, columnName string, params *GetApiV1SavedQueryRelatedColumnNameParams, reqEditors ...RequestEditorFn) (*GetApiV1SavedQueryRelatedColumnNameResponse, error) {
	rsp, err := c.GetApiV1SavedQueryRelatedColumnName(ctx, columnName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1SavedQueryRelatedColumnNameResponse(rsp)
}

// DeleteApiV1SavedQueryPkWithResponse request returning *DeleteApiV1SavedQueryPkResponse
func (c *ClientWithResponses) DeleteApiV1SavedQueryPkWithResponse(ctx context.Context, pk int, reqEditors ...RequestEditorFn) (*DeleteApiV1SavedQueryPkResponse, error) {
	rsp, err := c.DeleteApiV1SavedQueryPk(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1SavedQueryPkResponse(rsp)
}

// GetApiV1SavedQueryPkWithResponse request returning *GetApiV1SavedQueryPkResponse
func (c *ClientWithResponses) GetApiV1SavedQueryPkWithResponse(ctx context.Context, pk int, params *GetApiV1SavedQueryPkParams, reqEditors ...RequestEditorFn) (*GetApiV1SavedQueryPkResponse, error) {
	rsp, err := c.GetApiV1SavedQueryPk(ctx, pk, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1SavedQueryPkResponse(rsp)
}

// PutApiV1SavedQueryPkWithBodyWithResponse request with arbitrary body returning *PutApiV1SavedQueryPkResponse
func (c *ClientWithResponses) PutApiV1SavedQueryPkWithBodyWithResponse(ctx context.Context, pk int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1SavedQueryPkResponse, error) {
	rsp, err := c.PutApiV1SavedQueryPkWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1SavedQueryPkResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1SavedQueryPkWithResponse(ctx context.Context, pk int, body PutApiV1SavedQueryPkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1SavedQueryPkResponse, error) {
	rsp, err := c.PutApiV1SavedQueryPk(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1SavedQueryPkResponse(rsp)
}

// GetApiV1SecurityCsrfTokenWithResponse request returning *GetApiV1SecurityCsrfTokenResponse
func (c *ClientWithResponses) GetApiV1SecurityCsrfTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1SecurityCsrfTokenResponse, error) {
	rsp, err := c.GetApiV1SecurityCsrfToken(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1SecurityCsrfTokenResponse(rsp)
}

// PostApiV1SecurityGuestTokenWithBodyWithResponse request with arbitrary body returning *PostApiV1SecurityGuestTokenResponse
func (c *ClientWithResponses) PostApiV1SecurityGuestTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1SecurityGuestTokenResponse, error) {
	rsp, err := c.PostApiV1SecurityGuestTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1SecurityGuestTokenResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1SecurityGuestTokenWithResponse(ctx context.Context, body PostApiV1SecurityGuestTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1SecurityGuestTokenResponse, error) {
	rsp, err := c.PostApiV1SecurityGuestToken(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1SecurityGuestTokenResponse(rsp)
}

// PostApiV1SecurityLoginWithBodyWithResponse request with arbitrary body returning *PostApiV1SecurityLoginResponse
func (c *ClientWithResponses) PostApiV1SecurityLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1SecurityLoginResponse, error) {
	rsp, err := c.PostApiV1SecurityLoginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1SecurityLoginResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1SecurityLoginWithResponse(ctx context.Context, body PostApiV1SecurityLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1SecurityLoginResponse, error) {
	rsp, err := c.PostApiV1SecurityLogin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1SecurityLoginResponse(rsp)
}

// PostApiV1SecurityRefreshWithResponse request returning *PostApiV1SecurityRefreshResponse
func (c *ClientWithResponses) PostApiV1SecurityRefreshWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV1SecurityRefreshResponse, error) {
	rsp, err := c.PostApiV1SecurityRefresh(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1SecurityRefreshResponse(rsp)
}

// GetApiVersionOpenapiWithResponse request returning *GetApiVersionOpenapiResponse
func (c *ClientWithResponses) GetApiVersionOpenapiWithResponse(ctx context.Context, version string, reqEditors ...RequestEditorFn) (*GetApiVersionOpenapiResponse, error) {
	rsp, err := c.GetApiVersionOpenapi(ctx, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiVersionOpenapiResponse(rsp)
}

// PostSupersetSqllabVizWithBodyWithResponse request with arbitrary body returning *PostSupersetSqllabVizResponse
func (c *ClientWithResponses) PostSupersetSqllabVizWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSupersetSqllabVizResponse, error) {
	rsp, err := c.PostSupersetSqllabVizWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSupersetSqllabVizResponse(rsp)
}

// ParseGetApiV1AdvancedDataTypeConvertResponse parses an HTTP response from a GetApiV1AdvancedDataTypeConvertWithResponse call
func ParseGetApiV1AdvancedDataTypeConvertResponse(rsp *http.Response) (*GetApiV1AdvancedDataTypeConvertResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1AdvancedDataTypeConvertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdvancedDataTypeSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1AdvancedDataTypeTypesResponse parses an HTTP response from a GetApiV1AdvancedDataTypeTypesWithResponse call
func ParseGetApiV1AdvancedDataTypeTypesResponse(rsp *http.Response) (*GetApiV1AdvancedDataTypeTypesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1AdvancedDataTypeTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Result *[]string `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1AnnotationLayerResponse parses an HTTP response from a DeleteApiV1AnnotationLayerWithResponse call
func ParseDeleteApiV1AnnotationLayerResponse(rsp *http.Response) (*DeleteApiV1AnnotationLayerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1AnnotationLayerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1AnnotationLayerResponse parses an HTTP response from a GetApiV1AnnotationLayerWithResponse call
func ParseGetApiV1AnnotationLayerResponse(rsp *http.Response) (*GetApiV1AnnotationLayerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1AnnotationLayerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// The total record count on the backend
			Count              *float32 `json:"count,omitempty"`
			DescriptionColumns *struct {
				// The description for the column name. Will be translated by babel
				ColumnName *string `json:"column_name,omitempty"`
			} `json:"description_columns,omitempty"`

			// A list of item ids, useful when you don't know the column id
			Ids          *[]string `json:"ids,omitempty"`
			LabelColumns *struct {
				// The label for the column name. Will be translated by babel
				ColumnName *string `json:"column_name,omitempty"`
			} `json:"label_columns,omitempty"`

			// A list of columns
			ListColumns *[]string `json:"list_columns,omitempty"`

			// A title to render. Will be translated by babel
			ListTitle *string `json:"list_title,omitempty"`

			// A list of allowed columns to sort
			OrderColumns *[]string `json:"order_columns,omitempty"`

			// The result from the get list query
			Result *[]AnnotationLayerRestApiGetList `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1AnnotationLayerResponse parses an HTTP response from a PostApiV1AnnotationLayerWithResponse call
func ParsePostApiV1AnnotationLayerResponse(rsp *http.Response) (*PostApiV1AnnotationLayerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1AnnotationLayerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Id     *float32                    `json:"id,omitempty"`
			Result *AnnotationLayerRestApiPost `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1AnnotationLayerInfoResponse parses an HTTP response from a GetApiV1AnnotationLayerInfoWithResponse call
func ParseGetApiV1AnnotationLayerInfoResponse(rsp *http.Response) (*GetApiV1AnnotationLayerInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1AnnotationLayerInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AddColumns  *map[string]interface{} `json:"add_columns,omitempty"`
			EditColumns *map[string]interface{} `json:"edit_columns,omitempty"`
			Filters     *struct {
				ColumnName *[]struct {
					// The filter name. Will be translated by babel
					Name *string `json:"name,omitempty"`

					// The filter operation key to use on list filters
					Operator *string `json:"operator,omitempty"`
				} `json:"column_name,omitempty"`
			} `json:"filters,omitempty"`

			// The user permissions for this API resource
			Permissions *[]string `json:"permissions,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1AnnotationLayerRelatedColumnNameResponse parses an HTTP response from a GetApiV1AnnotationLayerRelatedColumnNameWithResponse call
func ParseGetApiV1AnnotationLayerRelatedColumnNameResponse(rsp *http.Response) (*GetApiV1AnnotationLayerRelatedColumnNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1AnnotationLayerRelatedColumnNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RelatedResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1AnnotationLayerPkResponse parses an HTTP response from a DeleteApiV1AnnotationLayerPkWithResponse call
func ParseDeleteApiV1AnnotationLayerPkResponse(rsp *http.Response) (*DeleteApiV1AnnotationLayerPkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1AnnotationLayerPkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1AnnotationLayerPkResponse parses an HTTP response from a GetApiV1AnnotationLayerPkWithResponse call
func ParseGetApiV1AnnotationLayerPkResponse(rsp *http.Response) (*GetApiV1AnnotationLayerPkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1AnnotationLayerPkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			DescriptionColumns *struct {
				// The description for the column name. Will be translated by babel
				ColumnName *string `json:"column_name,omitempty"`
			} `json:"description_columns,omitempty"`

			// The item id
			Id           *string `json:"id,omitempty"`
			LabelColumns *struct {
				// The label for the column name. Will be translated by babel
				ColumnName *string `json:"column_name,omitempty"`
			} `json:"label_columns,omitempty"`
			Result *AnnotationLayerRestApiGet `json:"result,omitempty"`

			// A list of columns
			ShowColumns *[]string `json:"show_columns,omitempty"`

			// A title to render. Will be translated by babel
			ShowTitle *string `json:"show_title,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutApiV1AnnotationLayerPkResponse parses an HTTP response from a PutApiV1AnnotationLayerPkWithResponse call
func ParsePutApiV1AnnotationLayerPkResponse(rsp *http.Response) (*PutApiV1AnnotationLayerPkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1AnnotationLayerPkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id     *float32                   `json:"id,omitempty"`
			Result *AnnotationLayerRestApiPut `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1AnnotationLayerPkAnnotationResponse parses an HTTP response from a DeleteApiV1AnnotationLayerPkAnnotationWithResponse call
func ParseDeleteApiV1AnnotationLayerPkAnnotationResponse(rsp *http.Response) (*DeleteApiV1AnnotationLayerPkAnnotationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1AnnotationLayerPkAnnotationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1AnnotationLayerPkAnnotationResponse parses an HTTP response from a GetApiV1AnnotationLayerPkAnnotationWithResponse call
func ParseGetApiV1AnnotationLayerPkAnnotationResponse(rsp *http.Response) (*GetApiV1AnnotationLayerPkAnnotationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1AnnotationLayerPkAnnotationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// The total record count on the backend
			Count *float32 `json:"count,omitempty"`

			// A list of annotation ids
			Ids *[]string `json:"ids,omitempty"`

			// The result from the get list query
			Result *[]AnnotationRestApiGetList `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1AnnotationLayerPkAnnotationResponse parses an HTTP response from a PostApiV1AnnotationLayerPkAnnotationWithResponse call
func ParsePostApiV1AnnotationLayerPkAnnotationResponse(rsp *http.Response) (*PostApiV1AnnotationLayerPkAnnotationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1AnnotationLayerPkAnnotationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Id     *float32               `json:"id,omitempty"`
			Result *AnnotationRestApiPost `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1AnnotationLayerPkAnnotationAnnotationIdResponse parses an HTTP response from a DeleteApiV1AnnotationLayerPkAnnotationAnnotationIdWithResponse call
func ParseDeleteApiV1AnnotationLayerPkAnnotationAnnotationIdResponse(rsp *http.Response) (*DeleteApiV1AnnotationLayerPkAnnotationAnnotationIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1AnnotationLayerPkAnnotationAnnotationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1AnnotationLayerPkAnnotationAnnotationIdResponse parses an HTTP response from a GetApiV1AnnotationLayerPkAnnotationAnnotationIdWithResponse call
func ParseGetApiV1AnnotationLayerPkAnnotationAnnotationIdResponse(rsp *http.Response) (*GetApiV1AnnotationLayerPkAnnotationAnnotationIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1AnnotationLayerPkAnnotationAnnotationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// The item id
			Id     *string               `json:"id,omitempty"`
			Result *AnnotationRestApiGet `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutApiV1AnnotationLayerPkAnnotationAnnotationIdResponse parses an HTTP response from a PutApiV1AnnotationLayerPkAnnotationAnnotationIdWithResponse call
func ParsePutApiV1AnnotationLayerPkAnnotationAnnotationIdResponse(rsp *http.Response) (*PutApiV1AnnotationLayerPkAnnotationAnnotationIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1AnnotationLayerPkAnnotationAnnotationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id     *float32              `json:"id,omitempty"`
			Result *AnnotationRestApiPut `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1AssetsExportResponse parses an HTTP response from a GetApiV1AssetsExportWithResponse call
func ParseGetApiV1AssetsExportResponse(rsp *http.Response) (*GetApiV1AssetsExportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1AssetsExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1AssetsImportResponse parses an HTTP response from a PostApiV1AssetsImportWithResponse call
func ParsePostApiV1AssetsImportResponse(rsp *http.Response) (*PostApiV1AssetsImportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1AssetsImportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1AsyncEventResponse parses an HTTP response from a GetApiV1AsyncEventWithResponse call
func ParseGetApiV1AsyncEventResponse(rsp *http.Response) (*GetApiV1AsyncEventResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1AsyncEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Result *[]struct {
				ChannelId *string                   `json:"channel_id,omitempty"`
				Errors    *[]map[string]interface{} `json:"errors,omitempty"`
				Id        *string                   `json:"id,omitempty"`
				JobId     *string                   `json:"job_id,omitempty"`
				ResultUrl *string                   `json:"result_url,omitempty"`
				Status    *string                   `json:"status,omitempty"`
				UserId    *int                      `json:"user_id,omitempty"`
			} `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1AvailableDomainsResponse parses an HTTP response from a GetApiV1AvailableDomainsWithResponse call
func ParseGetApiV1AvailableDomainsResponse(rsp *http.Response) (*GetApiV1AvailableDomainsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1AvailableDomainsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Result *AvailableDomainsSchema `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePostApiV1CachekeyInvalidateResponse parses an HTTP response from a PostApiV1CachekeyInvalidateWithResponse call
func ParsePostApiV1CachekeyInvalidateResponse(rsp *http.Response) (*PostApiV1CachekeyInvalidateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1CachekeyInvalidateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1ChartResponse parses an HTTP response from a DeleteApiV1ChartWithResponse call
func ParseDeleteApiV1ChartResponse(rsp *http.Response) (*DeleteApiV1ChartResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1ChartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1ChartResponse parses an HTTP response from a GetApiV1ChartWithResponse call
func ParseGetApiV1ChartResponse(rsp *http.Response) (*GetApiV1ChartResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ChartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// The total record count on the backend
			Count              *float32 `json:"count,omitempty"`
			DescriptionColumns *struct {
				// The description for the column name. Will be translated by babel
				ColumnName *string `json:"column_name,omitempty"`
			} `json:"description_columns,omitempty"`

			// A list of item ids, useful when you don't know the column id
			Ids          *[]int32 `json:"ids,omitempty"`
			LabelColumns *struct {
				// The label for the column name. Will be translated by babel
				ColumnName *string `json:"column_name,omitempty"`
			} `json:"label_columns,omitempty"`

			// A list of columns
			ListColumns *[]string `json:"list_columns,omitempty"`

			// A title to render. Will be translated by babel
			ListTitle *string `json:"list_title,omitempty"`

			// A list of allowed columns to sort
			OrderColumns *[]string `json:"order_columns,omitempty"`

			// The result from the get list query
			Result *[]ChartRestApiGetList `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1ChartResponse parses an HTTP response from a PostApiV1ChartWithResponse call
func ParsePostApiV1ChartResponse(rsp *http.Response) (*PostApiV1ChartResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1ChartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Id     *float32          `json:"id,omitempty"`
			Result *ChartRestApiPost `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1ChartInfoResponse parses an HTTP response from a GetApiV1ChartInfoWithResponse call
func ParseGetApiV1ChartInfoResponse(rsp *http.Response) (*GetApiV1ChartInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ChartInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AddColumns  *map[string]interface{} `json:"add_columns,omitempty"`
			EditColumns *map[string]interface{} `json:"edit_columns,omitempty"`
			Filters     *struct {
				ColumnName *[]struct {
					// The filter name. Will be translated by babel
					Name *string `json:"name,omitempty"`

					// The filter operation key to use on list filters
					Operator *string `json:"operator,omitempty"`
				} `json:"column_name,omitempty"`
			} `json:"filters,omitempty"`

			// The user permissions for this API resource
			Permissions *[]string `json:"permissions,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1ChartDataResponse parses an HTTP response from a PostApiV1ChartDataWithResponse call
func ParsePostApiV1ChartDataResponse(rsp *http.Response) (*PostApiV1ChartDataResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1ChartDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChartDataResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ChartDataAsyncResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1ChartDataCacheKeyResponse parses an HTTP response from a GetApiV1ChartDataCacheKeyWithResponse call
func ParseGetApiV1ChartDataCacheKeyResponse(rsp *http.Response) (*GetApiV1ChartDataCacheKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ChartDataCacheKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChartDataResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1ChartExportResponse parses an HTTP response from a GetApiV1ChartExportWithResponse call
func ParseGetApiV1ChartExportResponse(rsp *http.Response) (*GetApiV1ChartExportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ChartExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1ChartFavoriteStatusResponse parses an HTTP response from a GetApiV1ChartFavoriteStatusWithResponse call
func ParseGetApiV1ChartFavoriteStatusResponse(rsp *http.Response) (*GetApiV1ChartFavoriteStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ChartFavoriteStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetFavStarIdsSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1ChartImportResponse parses an HTTP response from a PostApiV1ChartImportWithResponse call
func ParsePostApiV1ChartImportResponse(rsp *http.Response) (*PostApiV1ChartImportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1ChartImportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1ChartRelatedColumnNameResponse parses an HTTP response from a GetApiV1ChartRelatedColumnNameWithResponse call
func ParseGetApiV1ChartRelatedColumnNameResponse(rsp *http.Response) (*GetApiV1ChartRelatedColumnNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ChartRelatedColumnNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RelatedResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1ChartPkResponse parses an HTTP response from a DeleteApiV1ChartPkWithResponse call
func ParseDeleteApiV1ChartPkResponse(rsp *http.Response) (*DeleteApiV1ChartPkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1ChartPkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1ChartPkResponse parses an HTTP response from a GetApiV1ChartPkWithResponse call
func ParseGetApiV1ChartPkResponse(rsp *http.Response) (*GetApiV1ChartPkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ChartPkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			DescriptionColumns *struct {
				// The description for the column name. Will be translated by babel
				ColumnName *string `json:"column_name,omitempty"`
			} `json:"description_columns,omitempty"`

			// The item id
			Id           *int32 `json:"id,omitempty"`
			LabelColumns *struct {
				// The label for the column name. Will be translated by babel
				ColumnName *string `json:"column_name,omitempty"`
			} `json:"label_columns,omitempty"`
			Result *ChartRestApiGet `json:"result,omitempty"`

			// A list of columns
			ShowColumns *[]string `json:"show_columns,omitempty"`

			// A title to render. Will be translated by babel
			ShowTitle *string `json:"show_title,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutApiV1ChartPkResponse parses an HTTP response from a PutApiV1ChartPkWithResponse call
func ParsePutApiV1ChartPkResponse(rsp *http.Response) (*PutApiV1ChartPkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1ChartPkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id     *float32         `json:"id,omitempty"`
			Result *ChartRestApiPut `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1ChartPkCacheScreenshotResponse parses an HTTP response from a GetApiV1ChartPkCacheScreenshotWithResponse call
func ParseGetApiV1ChartPkCacheScreenshotResponse(rsp *http.Response) (*GetApiV1ChartPkCacheScreenshotResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ChartPkCacheScreenshotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ChartCacheScreenshotResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1ChartPkDataResponse parses an HTTP response from a GetApiV1ChartPkDataWithResponse call
func ParseGetApiV1ChartPkDataResponse(rsp *http.Response) (*GetApiV1ChartPkDataResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ChartPkDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChartDataResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ChartDataAsyncResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1ChartPkScreenshotDigestResponse parses an HTTP response from a GetApiV1ChartPkScreenshotDigestWithResponse call
func ParseGetApiV1ChartPkScreenshotDigestResponse(rsp *http.Response) (*GetApiV1ChartPkScreenshotDigestResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ChartPkScreenshotDigestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1ChartPkThumbnailDigestResponse parses an HTTP response from a GetApiV1ChartPkThumbnailDigestWithResponse call
func ParseGetApiV1ChartPkThumbnailDigestResponse(rsp *http.Response) (*GetApiV1ChartPkThumbnailDigestResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ChartPkThumbnailDigestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1CssTemplateResponse parses an HTTP response from a DeleteApiV1CssTemplateWithResponse call
func ParseDeleteApiV1CssTemplateResponse(rsp *http.Response) (*DeleteApiV1CssTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1CssTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1CssTemplateResponse parses an HTTP response from a GetApiV1CssTemplateWithResponse call
func ParseGetApiV1CssTemplateResponse(rsp *http.Response) (*GetApiV1CssTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1CssTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// The total record count on the backend
			Count              *float32 `json:"count,omitempty"`
			DescriptionColumns *struct {
				// The description for the column name. Will be translated by babel
				ColumnName *string `json:"column_name,omitempty"`
			} `json:"description_columns,omitempty"`

			// A list of item ids, useful when you don't know the column id
			Ids          *[]string `json:"ids,omitempty"`
			LabelColumns *struct {
				// The label for the column name. Will be translated by babel
				ColumnName *string `json:"column_name,omitempty"`
			} `json:"label_columns,omitempty"`

			// A list of columns
			ListColumns *[]string `json:"list_columns,omitempty"`

			// A title to render. Will be translated by babel
			ListTitle *string `json:"list_title,omitempty"`

			// A list of allowed columns to sort
			OrderColumns *[]string `json:"order_columns,omitempty"`

			// The result from the get list query
			Result *[]CssTemplateRestApiGetList `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1CssTemplateResponse parses an HTTP response from a PostApiV1CssTemplateWithResponse call
func ParsePostApiV1CssTemplateResponse(rsp *http.Response) (*PostApiV1CssTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1CssTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Id     *string                 `json:"id,omitempty"`
			Result *CssTemplateRestApiPost `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1CssTemplateInfoResponse parses an HTTP response from a GetApiV1CssTemplateInfoWithResponse call
func ParseGetApiV1CssTemplateInfoResponse(rsp *http.Response) (*GetApiV1CssTemplateInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1CssTemplateInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AddColumns  *map[string]interface{} `json:"add_columns,omitempty"`
			EditColumns *map[string]interface{} `json:"edit_columns,omitempty"`
			Filters     *struct {
				ColumnName *[]struct {
					// The filter name. Will be translated by babel
					Name *string `json:"name,omitempty"`

					// The filter operation key to use on list filters
					Operator *string `json:"operator,omitempty"`
				} `json:"column_name,omitempty"`
			} `json:"filters,omitempty"`

			// The user permissions for this API resource
			Permissions *[]string `json:"permissions,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1CssTemplateRelatedColumnNameResponse parses an HTTP response from a GetApiV1CssTemplateRelatedColumnNameWithResponse call
func ParseGetApiV1CssTemplateRelatedColumnNameResponse(rsp *http.Response) (*GetApiV1CssTemplateRelatedColumnNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1CssTemplateRelatedColumnNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RelatedResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1CssTemplatePkResponse parses an HTTP response from a DeleteApiV1CssTemplatePkWithResponse call
func ParseDeleteApiV1CssTemplatePkResponse(rsp *http.Response) (*DeleteApiV1CssTemplatePkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1CssTemplatePkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1CssTemplatePkResponse parses an HTTP response from a GetApiV1CssTemplatePkWithResponse call
func ParseGetApiV1CssTemplatePkResponse(rsp *http.Response) (*GetApiV1CssTemplatePkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1CssTemplatePkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			DescriptionColumns *struct {
				// The description for the column name. Will be translated by babel
				ColumnName *string `json:"column_name,omitempty"`
			} `json:"description_columns,omitempty"`

			// The item id
			Id           *string `json:"id,omitempty"`
			LabelColumns *struct {
				// The label for the column name. Will be translated by babel
				ColumnName *string `json:"column_name,omitempty"`
			} `json:"label_columns,omitempty"`
			Result *CssTemplateRestApiGet `json:"result,omitempty"`

			// A list of columns
			ShowColumns *[]string `json:"show_columns,omitempty"`

			// A title to render. Will be translated by babel
			ShowTitle *string `json:"show_title,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutApiV1CssTemplatePkResponse parses an HTTP response from a PutApiV1CssTemplatePkWithResponse call
func ParsePutApiV1CssTemplatePkResponse(rsp *http.Response) (*PutApiV1CssTemplatePkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1CssTemplatePkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Result *CssTemplateRestApiPut `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1DashboardResponse parses an HTTP response from a DeleteApiV1DashboardWithResponse call
func ParseDeleteApiV1DashboardResponse(rsp *http.Response) (*DeleteApiV1DashboardResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1DashboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1DashboardResponse parses an HTTP response from a GetApiV1DashboardWithResponse call
func ParseGetApiV1DashboardResponse(rsp *http.Response) (*GetApiV1DashboardResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1DashboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// The total record count on the backend
			Count              *float32 `json:"count,omitempty"`
			DescriptionColumns *struct {
				// The description for the column name. Will be translated by babel
				ColumnName *string `json:"column_name,omitempty"`
			} `json:"description_columns,omitempty"`

			// A list of item ids, useful when you don't know the column id
			Ids          *[]string `json:"ids,omitempty"`
			LabelColumns *struct {
				// The label for the column name. Will be translated by babel
				ColumnName *string `json:"column_name,omitempty"`
			} `json:"label_columns,omitempty"`

			// A list of columns
			ListColumns *[]string `json:"list_columns,omitempty"`

			// A title to render. Will be translated by babel
			ListTitle *string `json:"list_title,omitempty"`

			// A list of allowed columns to sort
			OrderColumns *[]string `json:"order_columns,omitempty"`

			// The result from the get list query
			Result *[]DashboardRestApiGetList `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1DashboardResponse parses an HTTP response from a PostApiV1DashboardWithResponse call
func ParsePostApiV1DashboardResponse(rsp *http.Response) (*PostApiV1DashboardResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1DashboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Id     *float32              `json:"id,omitempty"`
			Result *DashboardRestApiPost `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1DashboardInfoResponse parses an HTTP response from a GetApiV1DashboardInfoWithResponse call
func ParseGetApiV1DashboardInfoResponse(rsp *http.Response) (*GetApiV1DashboardInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1DashboardInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AddColumns  *map[string]interface{} `json:"add_columns,omitempty"`
			EditColumns *map[string]interface{} `json:"edit_columns,omitempty"`
			Filters     *struct {
				ColumnName *[]struct {
					// The filter name. Will be translated by babel
					Name *string `json:"name,omitempty"`

					// The filter operation key to use on list filters
					Operator *string `json:"operator,omitempty"`
				} `json:"column_name,omitempty"`
			} `json:"filters,omitempty"`

			// The user permissions for this API resource
			Permissions *[]string `json:"permissions,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1DashboardExportResponse parses an HTTP response from a GetApiV1DashboardExportWithResponse call
func ParseGetApiV1DashboardExportResponse(rsp *http.Response) (*GetApiV1DashboardExportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1DashboardExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1DashboardFavoriteStatusResponse parses an HTTP response from a GetApiV1DashboardFavoriteStatusWithResponse call
func ParseGetApiV1DashboardFavoriteStatusResponse(rsp *http.Response) (*GetApiV1DashboardFavoriteStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1DashboardFavoriteStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetFavStarIdsSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1DashboardImportResponse parses an HTTP response from a PostApiV1DashboardImportWithResponse call
func ParsePostApiV1DashboardImportResponse(rsp *http.Response) (*PostApiV1DashboardImportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1DashboardImportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1DashboardPermalinkKeyResponse parses an HTTP response from a GetApiV1DashboardPermalinkKeyWithResponse call
func ParseGetApiV1DashboardPermalinkKeyResponse(rsp *http.Response) (*GetApiV1DashboardPermalinkKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1DashboardPermalinkKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// The stored state
			State *map[string]interface{} `json:"state,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1DashboardRelatedColumnNameResponse parses an HTTP response from a GetApiV1DashboardRelatedColumnNameWithResponse call
func ParseGetApiV1DashboardRelatedColumnNameResponse(rsp *http.Response) (*GetApiV1DashboardRelatedColumnNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1DashboardRelatedColumnNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RelatedResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1DashboardDashboardIdFiltersetsResponse parses an HTTP response from a GetApiV1DashboardDashboardIdFiltersetsWithResponse call
func ParseGetApiV1DashboardDashboardIdFiltersetsResponse(rsp *http.Response) (*GetApiV1DashboardDashboardIdFiltersetsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1DashboardDashboardIdFiltersetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			// A description field of the filter set
			Description *string `json:"description,omitempty"`

			// metadata of the filter set
			JsonMetadata *string `json:"json_metadata,omitempty"`

			// Name of the Filter set
			Name *string `json:"name,omitempty"`

			// A description field of the filter set
			OwnerId *int `json:"owner_id,omitempty"`

			// the Type of the owner ( Dashboard/User)
			OwnerType *int `json:"owner_type,omitempty"`

			// JSON schema defining the needed parameters
			Parameters *interface{} `json:"parameters,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostApiV1DashboardDashboardIdFiltersetsResponse parses an HTTP response from a PostApiV1DashboardDashboardIdFiltersetsWithResponse call
func ParsePostApiV1DashboardDashboardIdFiltersetsResponse(rsp *http.Response) (*PostApiV1DashboardDashboardIdFiltersetsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1DashboardDashboardIdFiltersetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Id     *float32              `json:"id,omitempty"`
			Result *FilterSetRestApiPost `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1DashboardDashboardIdFiltersetsPkResponse parses an HTTP response from a DeleteApiV1DashboardDashboardIdFiltersetsPkWithResponse call
func ParseDeleteApiV1DashboardDashboardIdFiltersetsPkResponse(rsp *http.Response) (*DeleteApiV1DashboardDashboardIdFiltersetsPkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1DashboardDashboardIdFiltersetsPkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutApiV1DashboardDashboardIdFiltersetsPkResponse parses an HTTP response from a PutApiV1DashboardDashboardIdFiltersetsPkWithResponse call
func ParsePutApiV1DashboardDashboardIdFiltersetsPkResponse(rsp *http.Response) (*PutApiV1DashboardDashboardIdFiltersetsPkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1DashboardDashboardIdFiltersetsPkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id     *float32             `json:"id,omitempty"`
			Result *FilterSetRestApiPut `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1DashboardIdOrSlugResponse parses an HTTP response from a GetApiV1DashboardIdOrSlugWithResponse call
func ParseGetApiV1DashboardIdOrSlugResponse(rsp *http.Response) (*GetApiV1DashboardIdOrSlugResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1DashboardIdOrSlugResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Result *DashboardGetResponseSchema `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetApiV1DashboardIdOrSlugChartsResponse parses an HTTP response from a GetApiV1DashboardIdOrSlugChartsWithResponse call
func ParseGetApiV1DashboardIdOrSlugChartsResponse(rsp *http.Response) (*GetApiV1DashboardIdOrSlugChartsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1DashboardIdOrSlugChartsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Result *[]ChartEntityResponseSchema `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetApiV1DashboardIdOrSlugDatasetsResponse parses an HTTP response from a GetApiV1DashboardIdOrSlugDatasetsWithResponse call
func ParseGetApiV1DashboardIdOrSlugDatasetsResponse(rsp *http.Response) (*GetApiV1DashboardIdOrSlugDatasetsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1DashboardIdOrSlugDatasetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Result *[]DashboardDatasetSchema `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1DashboardIdOrSlugEmbeddedResponse parses an HTTP response from a DeleteApiV1DashboardIdOrSlugEmbeddedWithResponse call
func ParseDeleteApiV1DashboardIdOrSlugEmbeddedResponse(rsp *http.Response) (*DeleteApiV1DashboardIdOrSlugEmbeddedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1DashboardIdOrSlugEmbeddedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1DashboardIdOrSlugEmbeddedResponse parses an HTTP response from a GetApiV1DashboardIdOrSlugEmbeddedWithResponse call
func ParseGetApiV1DashboardIdOrSlugEmbeddedResponse(rsp *http.Response) (*GetApiV1DashboardIdOrSlugEmbeddedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1DashboardIdOrSlugEmbeddedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Result *EmbeddedDashboardResponseSchema `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1DashboardIdOrSlugEmbeddedResponse parses an HTTP response from a PostApiV1DashboardIdOrSlugEmbeddedWithResponse call
func ParsePostApiV1DashboardIdOrSlugEmbeddedResponse(rsp *http.Response) (*PostApiV1DashboardIdOrSlugEmbeddedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1DashboardIdOrSlugEmbeddedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Result *EmbeddedDashboardResponseSchema `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutApiV1DashboardIdOrSlugEmbeddedResponse parses an HTTP response from a PutApiV1DashboardIdOrSlugEmbeddedWithResponse call
func ParsePutApiV1DashboardIdOrSlugEmbeddedResponse(rsp *http.Response) (*PutApiV1DashboardIdOrSlugEmbeddedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1DashboardIdOrSlugEmbeddedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Result *EmbeddedDashboardResponseSchema `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1DashboardPkResponse parses an HTTP response from a DeleteApiV1DashboardPkWithResponse call
func ParseDeleteApiV1DashboardPkResponse(rsp *http.Response) (*DeleteApiV1DashboardPkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1DashboardPkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutApiV1DashboardPkResponse parses an HTTP response from a PutApiV1DashboardPkWithResponse call
func ParsePutApiV1DashboardPkResponse(rsp *http.Response) (*PutApiV1DashboardPkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1DashboardPkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id               *float32             `json:"id,omitempty"`
			LastModifiedTime *float32             `json:"last_modified_time,omitempty"`
			Result           *DashboardRestApiPut `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1DashboardPkFilterStateResponse parses an HTTP response from a PostApiV1DashboardPkFilterStateWithResponse call
func ParsePostApiV1DashboardPkFilterStateResponse(rsp *http.Response) (*PostApiV1DashboardPkFilterStateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1DashboardPkFilterStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			// The key to retrieve the value.
			Key *string `json:"key,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1DashboardPkFilterStateKeyResponse parses an HTTP response from a DeleteApiV1DashboardPkFilterStateKeyWithResponse call
func ParseDeleteApiV1DashboardPkFilterStateKeyResponse(rsp *http.Response) (*DeleteApiV1DashboardPkFilterStateKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1DashboardPkFilterStateKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// The result of the operation
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1DashboardPkFilterStateKeyResponse parses an HTTP response from a GetApiV1DashboardPkFilterStateKeyWithResponse call
func ParseGetApiV1DashboardPkFilterStateKeyResponse(rsp *http.Response) (*GetApiV1DashboardPkFilterStateKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1DashboardPkFilterStateKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// The stored value
			Value *string `json:"value,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutApiV1DashboardPkFilterStateKeyResponse parses an HTTP response from a PutApiV1DashboardPkFilterStateKeyWithResponse call
func ParsePutApiV1DashboardPkFilterStateKeyResponse(rsp *http.Response) (*PutApiV1DashboardPkFilterStateKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1DashboardPkFilterStateKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// The key to retrieve the value.
			Key *string `json:"key,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1DashboardPkPermalinkResponse parses an HTTP response from a PostApiV1DashboardPkPermalinkWithResponse call
func ParsePostApiV1DashboardPkPermalinkResponse(rsp *http.Response) (*PostApiV1DashboardPkPermalinkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1DashboardPkPermalinkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			// The key to retrieve the permanent link data.
			Key *string `json:"key,omitempty"`

			// permanent link.
			Url *string `json:"url,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1DashboardPkThumbnailDigestResponse parses an HTTP response from a GetApiV1DashboardPkThumbnailDigestWithResponse call
func ParseGetApiV1DashboardPkThumbnailDigestResponse(rsp *http.Response) (*GetApiV1DashboardPkThumbnailDigestResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1DashboardPkThumbnailDigestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1DatabaseResponse parses an HTTP response from a GetApiV1DatabaseWithResponse call
func ParseGetApiV1DatabaseResponse(rsp *http.Response) (*GetApiV1DatabaseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1DatabaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// The total record count on the backend
			Count              *float32 `json:"count,omitempty"`
			DescriptionColumns *struct {
				// The description for the column name. Will be translated by babel
				ColumnName *string `json:"column_name,omitempty"`
			} `json:"description_columns,omitempty"`

			// A list of item ids, useful when you don't know the column id
			Ids          *[]int32 `json:"ids,omitempty"`
			LabelColumns *struct {
				// The label for the column name. Will be translated by babel
				ColumnName *string `json:"column_name,omitempty"`
			} `json:"label_columns,omitempty"`

			// A list of columns
			ListColumns *[]string `json:"list_columns,omitempty"`

			// A title to render. Will be translated by babel
			ListTitle *string `json:"list_title,omitempty"`

			// A list of allowed columns to sort
			OrderColumns *[]string `json:"order_columns,omitempty"`

			// The result from the get list query
			Result *[]DatabaseRestApiGetList `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1DatabaseResponse parses an HTTP response from a PostApiV1DatabaseWithResponse call
func ParsePostApiV1DatabaseResponse(rsp *http.Response) (*PostApiV1DatabaseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1DatabaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Id     *float32             `json:"id,omitempty"`
			Result *DatabaseRestApiPost `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1DatabaseInfoResponse parses an HTTP response from a GetApiV1DatabaseInfoWithResponse call
func ParseGetApiV1DatabaseInfoResponse(rsp *http.Response) (*GetApiV1DatabaseInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1DatabaseInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AddColumns  *map[string]interface{} `json:"add_columns,omitempty"`
			EditColumns *map[string]interface{} `json:"edit_columns,omitempty"`
			Filters     *struct {
				ColumnName *[]struct {
					// The filter name. Will be translated by babel
					Name *string `json:"name,omitempty"`

					// The filter operation key to use on list filters
					Operator *string `json:"operator,omitempty"`
				} `json:"column_name,omitempty"`
			} `json:"filters,omitempty"`

			// The user permissions for this API resource
			Permissions *[]string `json:"permissions,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1DatabaseAvailableResponse parses an HTTP response from a GetApiV1DatabaseAvailableWithResponse call
func ParseGetApiV1DatabaseAvailableResponse(rsp *http.Response) (*GetApiV1DatabaseAvailableResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1DatabaseAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			// Installed drivers for the engine
			AvailableDrivers *[]string `json:"available_drivers,omitempty"`

			// Default driver for the engine
			DefaultDriver *string `json:"default_driver,omitempty"`

			// Name of the SQLAlchemy engine
			Engine *string `json:"engine,omitempty"`

			// Name of the database
			Name *string `json:"name,omitempty"`

			// JSON schema defining the needed parameters
			Parameters *map[string]interface{} `json:"parameters,omitempty"`

			// Is the database preferred?
			Preferred *bool `json:"preferred,omitempty"`

			// Example placeholder for the SQLAlchemy URI
			SqlalchemyUriPlaceholder *string `json:"sqlalchemy_uri_placeholder,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1DatabaseExportResponse parses an HTTP response from a GetApiV1DatabaseExportWithResponse call
func ParseGetApiV1DatabaseExportResponse(rsp *http.Response) (*GetApiV1DatabaseExportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1DatabaseExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1DatabaseImportResponse parses an HTTP response from a PostApiV1DatabaseImportWithResponse call
func ParsePostApiV1DatabaseImportResponse(rsp *http.Response) (*PostApiV1DatabaseImportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1DatabaseImportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1DatabaseTestConnectionResponse parses an HTTP response from a PostApiV1DatabaseTestConnectionWithResponse call
func ParsePostApiV1DatabaseTestConnectionResponse(rsp *http.Response) (*PostApiV1DatabaseTestConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1DatabaseTestConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1DatabaseValidateParametersResponse parses an HTTP response from a PostApiV1DatabaseValidateParametersWithResponse call
func ParsePostApiV1DatabaseValidateParametersResponse(rsp *http.Response) (*PostApiV1DatabaseValidateParametersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1DatabaseValidateParametersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1DatabasePkResponse parses an HTTP response from a DeleteApiV1DatabasePkWithResponse call
func ParseDeleteApiV1DatabasePkResponse(rsp *http.Response) (*DeleteApiV1DatabasePkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1DatabasePkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1DatabasePkResponse parses an HTTP response from a GetApiV1DatabasePkWithResponse call
func ParseGetApiV1DatabasePkResponse(rsp *http.Response) (*GetApiV1DatabasePkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1DatabasePkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			DescriptionColumns *struct {
				// The description for the column name. Will be translated by babel
				ColumnName *string `json:"column_name,omitempty"`
			} `json:"description_columns,omitempty"`

			// The item id
			Id           *string `json:"id,omitempty"`
			LabelColumns *struct {
				// The label for the column name. Will be translated by babel
				ColumnName *string `json:"column_name,omitempty"`
			} `json:"label_columns,omitempty"`
			Result *DatabaseRestApiGet `json:"result,omitempty"`

			// A list of columns
			ShowColumns *[]string `json:"show_columns,omitempty"`

			// A title to render. Will be translated by babel
			ShowTitle *string `json:"show_title,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutApiV1DatabasePkResponse parses an HTTP response from a PutApiV1DatabasePkWithResponse call
func ParsePutApiV1DatabasePkResponse(rsp *http.Response) (*PutApiV1DatabasePkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1DatabasePkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id     *float32            `json:"id,omitempty"`
			Result *DatabaseRestApiPut `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1DatabasePkFunctionNamesResponse parses an HTTP response from a GetApiV1DatabasePkFunctionNamesWithResponse call
func ParseGetApiV1DatabasePkFunctionNamesResponse(rsp *http.Response) (*GetApiV1DatabasePkFunctionNamesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1DatabasePkFunctionNamesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DatabaseFunctionNamesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1DatabasePkRelatedObjectsResponse parses an HTTP response from a GetApiV1DatabasePkRelatedObjectsWithResponse call
func ParseGetApiV1DatabasePkRelatedObjectsResponse(rsp *http.Response) (*GetApiV1DatabasePkRelatedObjectsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1DatabasePkRelatedObjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DatabaseRelatedObjectsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1DatabasePkSchemasResponse parses an HTTP response from a GetApiV1DatabasePkSchemasWithResponse call
func ParseGetApiV1DatabasePkSchemasResponse(rsp *http.Response) (*GetApiV1DatabasePkSchemasResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1DatabasePkSchemasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SchemasResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1DatabasePkSelectStarTableNameResponse parses an HTTP response from a GetApiV1DatabasePkSelectStarTableNameWithResponse call
func ParseGetApiV1DatabasePkSelectStarTableNameResponse(rsp *http.Response) (*GetApiV1DatabasePkSelectStarTableNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1DatabasePkSelectStarTableNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SelectStarResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1DatabasePkSelectStarTableNameSchemaNameResponse parses an HTTP response from a GetApiV1DatabasePkSelectStarTableNameSchemaNameWithResponse call
func ParseGetApiV1DatabasePkSelectStarTableNameSchemaNameResponse(rsp *http.Response) (*GetApiV1DatabasePkSelectStarTableNameSchemaNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1DatabasePkSelectStarTableNameSchemaNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SelectStarResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1DatabasePkTableTableNameSchemaNameResponse parses an HTTP response from a GetApiV1DatabasePkTableTableNameSchemaNameWithResponse call
func ParseGetApiV1DatabasePkTableTableNameSchemaNameResponse(rsp *http.Response) (*GetApiV1DatabasePkTableTableNameSchemaNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1DatabasePkTableTableNameSchemaNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TableMetadataResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1DatabasePkTableExtraTableNameSchemaNameResponse parses an HTTP response from a GetApiV1DatabasePkTableExtraTableNameSchemaNameWithResponse call
func ParseGetApiV1DatabasePkTableExtraTableNameSchemaNameResponse(rsp *http.Response) (*GetApiV1DatabasePkTableExtraTableNameSchemaNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1DatabasePkTableExtraTableNameSchemaNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TableExtraMetadataResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1DatabasePkValidateSqlResponse parses an HTTP response from a PostApiV1DatabasePkValidateSqlWithResponse call
func ParsePostApiV1DatabasePkValidateSqlResponse(rsp *http.Response) (*PostApiV1DatabasePkValidateSqlResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1DatabasePkValidateSqlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// A List of SQL errors found on the statement
			Result *[]ValidateSQLResponse `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1DatasetResponse parses an HTTP response from a DeleteApiV1DatasetWithResponse call
func ParseDeleteApiV1DatasetResponse(rsp *http.Response) (*DeleteApiV1DatasetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1DatasetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1DatasetResponse parses an HTTP response from a GetApiV1DatasetWithResponse call
func ParseGetApiV1DatasetResponse(rsp *http.Response) (*GetApiV1DatasetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1DatasetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// The total record count on the backend
			Count              *float32 `json:"count,omitempty"`
			DescriptionColumns *struct {
				// The description for the column name. Will be translated by babel
				ColumnName *string `json:"column_name,omitempty"`
			} `json:"description_columns,omitempty"`

			// A list of item ids, useful when you don't know the column id
			Ids          *[]string `json:"ids,omitempty"`
			LabelColumns *struct {
				// The label for the column name. Will be translated by babel
				ColumnName *string `json:"column_name,omitempty"`
			} `json:"label_columns,omitempty"`

			// A list of columns
			ListColumns *[]string `json:"list_columns,omitempty"`

			// A title to render. Will be translated by babel
			ListTitle *string `json:"list_title,omitempty"`

			// A list of allowed columns to sort
			OrderColumns *[]string `json:"order_columns,omitempty"`

			// The result from the get list query
			Result *[]DatasetRestApiGetList `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1DatasetResponse parses an HTTP response from a PostApiV1DatasetWithResponse call
func ParsePostApiV1DatasetResponse(rsp *http.Response) (*PostApiV1DatasetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1DatasetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Id     *float32            `json:"id,omitempty"`
			Result *DatasetRestApiPost `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1DatasetInfoResponse parses an HTTP response from a GetApiV1DatasetInfoWithResponse call
func ParseGetApiV1DatasetInfoResponse(rsp *http.Response) (*GetApiV1DatasetInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1DatasetInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AddColumns  *map[string]interface{} `json:"add_columns,omitempty"`
			EditColumns *map[string]interface{} `json:"edit_columns,omitempty"`
			Filters     *struct {
				ColumnName *[]struct {
					// The filter name. Will be translated by babel
					Name *string `json:"name,omitempty"`

					// The filter operation key to use on list filters
					Operator *string `json:"operator,omitempty"`
				} `json:"column_name,omitempty"`
			} `json:"filters,omitempty"`

			// The user permissions for this API resource
			Permissions *[]string `json:"permissions,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1DatasetDistinctColumnNameResponse parses an HTTP response from a GetApiV1DatasetDistinctColumnNameWithResponse call
func ParseGetApiV1DatasetDistinctColumnNameResponse(rsp *http.Response) (*GetApiV1DatasetDistinctColumnNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1DatasetDistinctColumnNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DistincResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1DatasetDuplicateResponse parses an HTTP response from a PostApiV1DatasetDuplicateWithResponse call
func ParsePostApiV1DatasetDuplicateResponse(rsp *http.Response) (*PostApiV1DatasetDuplicateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1DatasetDuplicateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Id     *float32                `json:"id,omitempty"`
			Result *DatasetDuplicateSchema `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1DatasetExportResponse parses an HTTP response from a GetApiV1DatasetExportWithResponse call
func ParseGetApiV1DatasetExportResponse(rsp *http.Response) (*GetApiV1DatasetExportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1DatasetExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1DatasetImportResponse parses an HTTP response from a PostApiV1DatasetImportWithResponse call
func ParsePostApiV1DatasetImportResponse(rsp *http.Response) (*PostApiV1DatasetImportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1DatasetImportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1DatasetRelatedColumnNameResponse parses an HTTP response from a GetApiV1DatasetRelatedColumnNameWithResponse call
func ParseGetApiV1DatasetRelatedColumnNameResponse(rsp *http.Response) (*GetApiV1DatasetRelatedColumnNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1DatasetRelatedColumnNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RelatedResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1DatasetPkResponse parses an HTTP response from a DeleteApiV1DatasetPkWithResponse call
func ParseDeleteApiV1DatasetPkResponse(rsp *http.Response) (*DeleteApiV1DatasetPkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1DatasetPkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1DatasetPkResponse parses an HTTP response from a GetApiV1DatasetPkWithResponse call
func ParseGetApiV1DatasetPkResponse(rsp *http.Response) (*GetApiV1DatasetPkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1DatasetPkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			DescriptionColumns *struct {
				// The description for the column name. Will be translated by babel
				ColumnName *string `json:"column_name,omitempty"`
			} `json:"description_columns,omitempty"`

			// The item id
			Id           *int32 `json:"id,omitempty"`
			LabelColumns *struct {
				// The label for the column name. Will be translated by babel
				ColumnName *string `json:"column_name,omitempty"`
			} `json:"label_columns,omitempty"`
			Result *DatasetRestApiGet `json:"result,omitempty"`

			// A list of columns
			ShowColumns *[]string `json:"show_columns,omitempty"`

			// A title to render. Will be translated by babel
			ShowTitle *string `json:"show_title,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutApiV1DatasetPkResponse parses an HTTP response from a PutApiV1DatasetPkWithResponse call
func ParsePutApiV1DatasetPkResponse(rsp *http.Response) (*PutApiV1DatasetPkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1DatasetPkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id     *float32           `json:"id,omitempty"`
			Result *DatasetRestApiPut `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1DatasetPkColumnColumnIdResponse parses an HTTP response from a DeleteApiV1DatasetPkColumnColumnIdWithResponse call
func ParseDeleteApiV1DatasetPkColumnColumnIdResponse(rsp *http.Response) (*DeleteApiV1DatasetPkColumnColumnIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1DatasetPkColumnColumnIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1DatasetPkMetricMetricIdResponse parses an HTTP response from a DeleteApiV1DatasetPkMetricMetricIdWithResponse call
func ParseDeleteApiV1DatasetPkMetricMetricIdResponse(rsp *http.Response) (*DeleteApiV1DatasetPkMetricMetricIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1DatasetPkMetricMetricIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutApiV1DatasetPkRefreshResponse parses an HTTP response from a PutApiV1DatasetPkRefreshWithResponse call
func ParsePutApiV1DatasetPkRefreshResponse(rsp *http.Response) (*PutApiV1DatasetPkRefreshResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1DatasetPkRefreshResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1DatasetPkRelatedObjectsResponse parses an HTTP response from a GetApiV1DatasetPkRelatedObjectsWithResponse call
func ParseGetApiV1DatasetPkRelatedObjectsResponse(rsp *http.Response) (*GetApiV1DatasetPkRelatedObjectsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1DatasetPkRelatedObjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DatasetRelatedObjectsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1EmbeddedDashboardUuidResponse parses an HTTP response from a GetApiV1EmbeddedDashboardUuidWithResponse call
func ParseGetApiV1EmbeddedDashboardUuidResponse(rsp *http.Response) (*GetApiV1EmbeddedDashboardUuidResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1EmbeddedDashboardUuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Result *EmbeddedDashboardResponseSchema `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1ExploreResponse parses an HTTP response from a GetApiV1ExploreWithResponse call
func ParseGetApiV1ExploreResponse(rsp *http.Response) (*GetApiV1ExploreResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ExploreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExploreContextSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1ExploreFormDataResponse parses an HTTP response from a PostApiV1ExploreFormDataWithResponse call
func ParsePostApiV1ExploreFormDataResponse(rsp *http.Response) (*PostApiV1ExploreFormDataResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1ExploreFormDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			// The key to retrieve the form_data.
			Key *string `json:"key,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1ExploreFormDataKeyResponse parses an HTTP response from a DeleteApiV1ExploreFormDataKeyWithResponse call
func ParseDeleteApiV1ExploreFormDataKeyResponse(rsp *http.Response) (*DeleteApiV1ExploreFormDataKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1ExploreFormDataKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// The result of the operation
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1ExploreFormDataKeyResponse parses an HTTP response from a GetApiV1ExploreFormDataKeyWithResponse call
func ParseGetApiV1ExploreFormDataKeyResponse(rsp *http.Response) (*GetApiV1ExploreFormDataKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ExploreFormDataKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// The stored form_data
			FormData *string `json:"form_data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutApiV1ExploreFormDataKeyResponse parses an HTTP response from a PutApiV1ExploreFormDataKeyWithResponse call
func ParsePutApiV1ExploreFormDataKeyResponse(rsp *http.Response) (*PutApiV1ExploreFormDataKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1ExploreFormDataKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// The key to retrieve the form_data.
			Key *string `json:"key,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1ExplorePermalinkResponse parses an HTTP response from a PostApiV1ExplorePermalinkWithResponse call
func ParsePostApiV1ExplorePermalinkResponse(rsp *http.Response) (*PostApiV1ExplorePermalinkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1ExplorePermalinkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			// The key to retrieve the permanent link data.
			Key *string `json:"key,omitempty"`

			// pemanent link.
			Url *string `json:"url,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1ExplorePermalinkKeyResponse parses an HTTP response from a GetApiV1ExplorePermalinkKeyWithResponse call
func ParseGetApiV1ExplorePermalinkKeyResponse(rsp *http.Response) (*GetApiV1ExplorePermalinkKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ExplorePermalinkKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// The stored state
			State *map[string]interface{} `json:"state,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1LogResponse parses an HTTP response from a GetApiV1LogWithResponse call
func ParseGetApiV1LogResponse(rsp *http.Response) (*GetApiV1LogResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1LogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// The total record count on the backend
			Count              *float32 `json:"count,omitempty"`
			DescriptionColumns *struct {
				// The description for the column name. Will be translated by babel
				ColumnName *string `json:"column_name,omitempty"`
			} `json:"description_columns,omitempty"`

			// A list of item ids, useful when you don't know the column id
			Ids          *[]string `json:"ids,omitempty"`
			LabelColumns *struct {
				// The label for the column name. Will be translated by babel
				ColumnName *string `json:"column_name,omitempty"`
			} `json:"label_columns,omitempty"`

			// A list of columns
			ListColumns *[]string `json:"list_columns,omitempty"`

			// A title to render. Will be translated by babel
			ListTitle *string `json:"list_title,omitempty"`

			// A list of allowed columns to sort
			OrderColumns *[]string `json:"order_columns,omitempty"`

			// The result from the get list query
			Result *[]LogRestApiGetList `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1LogResponse parses an HTTP response from a PostApiV1LogWithResponse call
func ParsePostApiV1LogResponse(rsp *http.Response) (*PostApiV1LogResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1LogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Id     *string         `json:"id,omitempty"`
			Result *LogRestApiPost `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1LogPkResponse parses an HTTP response from a GetApiV1LogPkWithResponse call
func ParseGetApiV1LogPkResponse(rsp *http.Response) (*GetApiV1LogPkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1LogPkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			DescriptionColumns *struct {
				// The description for the column name. Will be translated by babel
				ColumnName *string `json:"column_name,omitempty"`
			} `json:"description_columns,omitempty"`

			// The item id
			Id           *string `json:"id,omitempty"`
			LabelColumns *struct {
				// The label for the column name. Will be translated by babel
				ColumnName *string `json:"column_name,omitempty"`
			} `json:"label_columns,omitempty"`
			Result *LogRestApiGet `json:"result,omitempty"`

			// A list of columns
			ShowColumns *[]string `json:"show_columns,omitempty"`

			// A title to render. Will be translated by babel
			ShowTitle *string `json:"show_title,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1MeResponse parses an HTTP response from a GetApiV1MeWithResponse call
func ParseGetApiV1MeResponse(rsp *http.Response) (*GetApiV1MeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1MeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Result *UserResponseSchema `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetApiV1MeRolesResponse parses an HTTP response from a GetApiV1MeRolesWithResponse call
func ParseGetApiV1MeRolesResponse(rsp *http.Response) (*GetApiV1MeRolesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1MeRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Result *UserResponseSchema `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetApiV1MenuResponse parses an HTTP response from a GetApiV1MenuWithResponse call
func ParseGetApiV1MenuResponse(rsp *http.Response) (*GetApiV1MenuResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1MenuResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Menu items in a forest like data structure
			Result *[]struct {
				Childs *[]map[string]interface{} `json:"childs,omitempty"`

				// Icon name to show for this menu item
				Icon *string `json:"icon,omitempty"`

				// Pretty name for the menu item
				Label *string `json:"label,omitempty"`

				// The internal menu item name, maps to permission_name
				Name *string `json:"name,omitempty"`

				// The URL for the menu item
				Url *string `json:"url,omitempty"`
			} `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetApiV1QueryResponse parses an HTTP response from a GetApiV1QueryWithResponse call
func ParseGetApiV1QueryResponse(rsp *http.Response) (*GetApiV1QueryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1QueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// The total record count on the backend
			Count              *float32 `json:"count,omitempty"`
			DescriptionColumns *struct {
				// The description for the column name. Will be translated by babel
				ColumnName *string `json:"column_name,omitempty"`
			} `json:"description_columns,omitempty"`

			// A list of item ids, useful when you don't know the column id
			Ids          *[]string `json:"ids,omitempty"`
			LabelColumns *struct {
				// The label for the column name. Will be translated by babel
				ColumnName *string `json:"column_name,omitempty"`
			} `json:"label_columns,omitempty"`

			// A list of columns
			ListColumns *[]string `json:"list_columns,omitempty"`

			// A title to render. Will be translated by babel
			ListTitle *string `json:"list_title,omitempty"`

			// A list of allowed columns to sort
			OrderColumns *[]string `json:"order_columns,omitempty"`

			// The result from the get list query
			Result *[]QueryRestApiGetList `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1QueryDistinctColumnNameResponse parses an HTTP response from a GetApiV1QueryDistinctColumnNameWithResponse call
func ParseGetApiV1QueryDistinctColumnNameResponse(rsp *http.Response) (*GetApiV1QueryDistinctColumnNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1QueryDistinctColumnNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DistincResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1QueryRelatedColumnNameResponse parses an HTTP response from a GetApiV1QueryRelatedColumnNameWithResponse call
func ParseGetApiV1QueryRelatedColumnNameResponse(rsp *http.Response) (*GetApiV1QueryRelatedColumnNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1QueryRelatedColumnNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RelatedResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1QueryPkResponse parses an HTTP response from a GetApiV1QueryPkWithResponse call
func ParseGetApiV1QueryPkResponse(rsp *http.Response) (*GetApiV1QueryPkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1QueryPkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			DescriptionColumns *struct {
				// The description for the column name. Will be translated by babel
				ColumnName *string `json:"column_name,omitempty"`
			} `json:"description_columns,omitempty"`

			// The item id
			Id           *string `json:"id,omitempty"`
			LabelColumns *struct {
				// The label for the column name. Will be translated by babel
				ColumnName *string `json:"column_name,omitempty"`
			} `json:"label_columns,omitempty"`
			Result *QueryRestApiGet `json:"result,omitempty"`

			// A list of columns
			ShowColumns *[]string `json:"show_columns,omitempty"`

			// A title to render. Will be translated by babel
			ShowTitle *string `json:"show_title,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1ReportResponse parses an HTTP response from a DeleteApiV1ReportWithResponse call
func ParseDeleteApiV1ReportResponse(rsp *http.Response) (*DeleteApiV1ReportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1ReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1ReportResponse parses an HTTP response from a GetApiV1ReportWithResponse call
func ParseGetApiV1ReportResponse(rsp *http.Response) (*GetApiV1ReportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// The total record count on the backend
			Count              *float32 `json:"count,omitempty"`
			DescriptionColumns *struct {
				// The description for the column name. Will be translated by babel
				ColumnName *string `json:"column_name,omitempty"`
			} `json:"description_columns,omitempty"`

			// A list of item ids, useful when you don't know the column id
			Ids          *[]string `json:"ids,omitempty"`
			LabelColumns *struct {
				// The label for the column name. Will be translated by babel
				ColumnName *string `json:"column_name,omitempty"`
			} `json:"label_columns,omitempty"`

			// A list of columns
			ListColumns *[]string `json:"list_columns,omitempty"`

			// A title to render. Will be translated by babel
			ListTitle *string `json:"list_title,omitempty"`

			// A list of allowed columns to sort
			OrderColumns *[]string `json:"order_columns,omitempty"`

			// The result from the get list query
			Result *[]ReportScheduleRestApiGetList `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1ReportResponse parses an HTTP response from a PostApiV1ReportWithResponse call
func ParsePostApiV1ReportResponse(rsp *http.Response) (*PostApiV1ReportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1ReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Id     *float32                   `json:"id,omitempty"`
			Result *ReportScheduleRestApiPost `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1ReportInfoResponse parses an HTTP response from a GetApiV1ReportInfoWithResponse call
func ParseGetApiV1ReportInfoResponse(rsp *http.Response) (*GetApiV1ReportInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ReportInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AddColumns  *map[string]interface{} `json:"add_columns,omitempty"`
			EditColumns *map[string]interface{} `json:"edit_columns,omitempty"`
			Filters     *struct {
				ColumnName *[]struct {
					// The filter name. Will be translated by babel
					Name *string `json:"name,omitempty"`

					// The filter operation key to use on list filters
					Operator *string `json:"operator,omitempty"`
				} `json:"column_name,omitempty"`
			} `json:"filters,omitempty"`

			// The user permissions for this API resource
			Permissions *[]string `json:"permissions,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1ReportRelatedColumnNameResponse parses an HTTP response from a GetApiV1ReportRelatedColumnNameWithResponse call
func ParseGetApiV1ReportRelatedColumnNameResponse(rsp *http.Response) (*GetApiV1ReportRelatedColumnNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ReportRelatedColumnNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RelatedResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1ReportPkResponse parses an HTTP response from a DeleteApiV1ReportPkWithResponse call
func ParseDeleteApiV1ReportPkResponse(rsp *http.Response) (*DeleteApiV1ReportPkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1ReportPkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1ReportPkResponse parses an HTTP response from a GetApiV1ReportPkWithResponse call
func ParseGetApiV1ReportPkResponse(rsp *http.Response) (*GetApiV1ReportPkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ReportPkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			DescriptionColumns *struct {
				// The description for the column name. Will be translated by babel
				ColumnName *string `json:"column_name,omitempty"`
			} `json:"description_columns,omitempty"`

			// The item id
			Id           *string `json:"id,omitempty"`
			LabelColumns *struct {
				// The label for the column name. Will be translated by babel
				ColumnName *string `json:"column_name,omitempty"`
			} `json:"label_columns,omitempty"`
			Result *ReportScheduleRestApiGet `json:"result,omitempty"`

			// A list of columns
			ShowColumns *[]string `json:"show_columns,omitempty"`

			// A title to render. Will be translated by babel
			ShowTitle *string `json:"show_title,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutApiV1ReportPkResponse parses an HTTP response from a PutApiV1ReportPkWithResponse call
func ParsePutApiV1ReportPkResponse(rsp *http.Response) (*PutApiV1ReportPkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1ReportPkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id     *float32                  `json:"id,omitempty"`
			Result *ReportScheduleRestApiPut `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1ReportPkLogResponse parses an HTTP response from a GetApiV1ReportPkLogWithResponse call
func ParseGetApiV1ReportPkLogResponse(rsp *http.Response) (*GetApiV1ReportPkLogResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ReportPkLogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// The total record count on the backend
			Count *float32 `json:"count,omitempty"`

			// A list of log ids
			Ids *[]string `json:"ids,omitempty"`

			// The result from the get list query
			Result *[]ReportExecutionLogRestApiGetList `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1ReportPkLogLogIdResponse parses an HTTP response from a GetApiV1ReportPkLogLogIdWithResponse call
func ParseGetApiV1ReportPkLogLogIdResponse(rsp *http.Response) (*GetApiV1ReportPkLogLogIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ReportPkLogLogIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// The log id
			Id     *string                       `json:"id,omitempty"`
			Result *ReportExecutionLogRestApiGet `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1SavedQueryResponse parses an HTTP response from a DeleteApiV1SavedQueryWithResponse call
func ParseDeleteApiV1SavedQueryResponse(rsp *http.Response) (*DeleteApiV1SavedQueryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1SavedQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1SavedQueryResponse parses an HTTP response from a GetApiV1SavedQueryWithResponse call
func ParseGetApiV1SavedQueryResponse(rsp *http.Response) (*GetApiV1SavedQueryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1SavedQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// The total record count on the backend
			Count              *float32 `json:"count,omitempty"`
			DescriptionColumns *struct {
				// The description for the column name. Will be translated by babel
				ColumnName *string `json:"column_name,omitempty"`
			} `json:"description_columns,omitempty"`

			// A list of item ids, useful when you don't know the column id
			Ids          *[]string `json:"ids,omitempty"`
			LabelColumns *struct {
				// The label for the column name. Will be translated by babel
				ColumnName *string `json:"column_name,omitempty"`
			} `json:"label_columns,omitempty"`

			// A list of columns
			ListColumns *[]string `json:"list_columns,omitempty"`

			// A title to render. Will be translated by babel
			ListTitle *string `json:"list_title,omitempty"`

			// A list of allowed columns to sort
			OrderColumns *[]string `json:"order_columns,omitempty"`

			// The result from the get list query
			Result *[]SavedQueryRestApiGetList `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1SavedQueryResponse parses an HTTP response from a PostApiV1SavedQueryWithResponse call
func ParsePostApiV1SavedQueryResponse(rsp *http.Response) (*PostApiV1SavedQueryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1SavedQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Id     *string                `json:"id,omitempty"`
			Result *SavedQueryRestApiPost `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1SavedQueryInfoResponse parses an HTTP response from a GetApiV1SavedQueryInfoWithResponse call
func ParseGetApiV1SavedQueryInfoResponse(rsp *http.Response) (*GetApiV1SavedQueryInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1SavedQueryInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AddColumns  *map[string]interface{} `json:"add_columns,omitempty"`
			EditColumns *map[string]interface{} `json:"edit_columns,omitempty"`
			Filters     *struct {
				ColumnName *[]struct {
					// The filter name. Will be translated by babel
					Name *string `json:"name,omitempty"`

					// The filter operation key to use on list filters
					Operator *string `json:"operator,omitempty"`
				} `json:"column_name,omitempty"`
			} `json:"filters,omitempty"`

			// The user permissions for this API resource
			Permissions *[]string `json:"permissions,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1SavedQueryDistinctColumnNameResponse parses an HTTP response from a GetApiV1SavedQueryDistinctColumnNameWithResponse call
func ParseGetApiV1SavedQueryDistinctColumnNameResponse(rsp *http.Response) (*GetApiV1SavedQueryDistinctColumnNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1SavedQueryDistinctColumnNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DistincResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1SavedQueryExportResponse parses an HTTP response from a GetApiV1SavedQueryExportWithResponse call
func ParseGetApiV1SavedQueryExportResponse(rsp *http.Response) (*GetApiV1SavedQueryExportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1SavedQueryExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1SavedQueryImportResponse parses an HTTP response from a PostApiV1SavedQueryImportWithResponse call
func ParsePostApiV1SavedQueryImportResponse(rsp *http.Response) (*PostApiV1SavedQueryImportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1SavedQueryImportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1SavedQueryRelatedColumnNameResponse parses an HTTP response from a GetApiV1SavedQueryRelatedColumnNameWithResponse call
func ParseGetApiV1SavedQueryRelatedColumnNameResponse(rsp *http.Response) (*GetApiV1SavedQueryRelatedColumnNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1SavedQueryRelatedColumnNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RelatedResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1SavedQueryPkResponse parses an HTTP response from a DeleteApiV1SavedQueryPkWithResponse call
func ParseDeleteApiV1SavedQueryPkResponse(rsp *http.Response) (*DeleteApiV1SavedQueryPkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1SavedQueryPkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1SavedQueryPkResponse parses an HTTP response from a GetApiV1SavedQueryPkWithResponse call
func ParseGetApiV1SavedQueryPkResponse(rsp *http.Response) (*GetApiV1SavedQueryPkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1SavedQueryPkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			DescriptionColumns *struct {
				// The description for the column name. Will be translated by babel
				ColumnName *string `json:"column_name,omitempty"`
			} `json:"description_columns,omitempty"`

			// The item id
			Id           *string `json:"id,omitempty"`
			LabelColumns *struct {
				// The label for the column name. Will be translated by babel
				ColumnName *string `json:"column_name,omitempty"`
			} `json:"label_columns,omitempty"`
			Result *SavedQueryRestApiGet `json:"result,omitempty"`

			// A list of columns
			ShowColumns *[]string `json:"show_columns,omitempty"`

			// A title to render. Will be translated by babel
			ShowTitle *string `json:"show_title,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutApiV1SavedQueryPkResponse parses an HTTP response from a PutApiV1SavedQueryPkWithResponse call
func ParsePutApiV1SavedQueryPkResponse(rsp *http.Response) (*PutApiV1SavedQueryPkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1SavedQueryPkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Result *SavedQueryRestApiPut `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1SecurityCsrfTokenResponse parses an HTTP response from a GetApiV1SecurityCsrfTokenWithResponse call
func ParseGetApiV1SecurityCsrfTokenResponse(rsp *http.Response) (*GetApiV1SecurityCsrfTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1SecurityCsrfTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Result *string `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1SecurityGuestTokenResponse parses an HTTP response from a PostApiV1SecurityGuestTokenWithResponse call
func ParsePostApiV1SecurityGuestTokenResponse(rsp *http.Response) (*PostApiV1SecurityGuestTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1SecurityGuestTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Token *string `json:"token,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1SecurityLoginResponse parses an HTTP response from a PostApiV1SecurityLoginWithResponse call
func ParsePostApiV1SecurityLoginResponse(rsp *http.Response) (*PostApiV1SecurityLoginResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1SecurityLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AccessToken  *string `json:"access_token,omitempty"`
			RefreshToken *string `json:"refresh_token,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1SecurityRefreshResponse parses an HTTP response from a PostApiV1SecurityRefreshWithResponse call
func ParsePostApiV1SecurityRefreshResponse(rsp *http.Response) (*PostApiV1SecurityRefreshResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1SecurityRefreshResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// A new refreshed access token
			AccessToken *string `json:"access_token,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiVersionOpenapiResponse parses an HTTP response from a GetApiVersionOpenapiWithResponse call
func ParseGetApiVersionOpenapiResponse(rsp *http.Response) (*GetApiVersionOpenapiResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiVersionOpenapiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostSupersetSqllabVizResponse parses an HTTP response from a PostSupersetSqllabVizWithResponse call
func ParsePostSupersetSqllabVizResponse(rsp *http.Response) (*PostSupersetSqllabVizResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSupersetSqllabVizResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *DashboardDatasetSchema `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
